;@region v1.1
;@endregion

;@region classes
/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm|`Any`}  
 * The root (topmost) class of AutoHotkey's type hierarchy.  
 * Everything in AHK v2 is derived from this base class.  
 * This includes primitives.  
 * @property {(Prototype)} Base - Retrieves the value's {@link https://www.autohotkey.com/docs/v2/Objects.htm#delegation|base object}.  
 */
class Any {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#Base|`Base`}  
     * Retrieves or sets the value's {@link https://www.autohotkey.com/docs/v2/Objects.htm#delegation|base object}.  
     * The base object must be an Object.  
     * @type Prototype
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|ObjGetBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#SetBase|ObjSetBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Object.Base}
     * @throws Error - Assigning a new base that would change the native type of the object.  
     * @example <caption>Confirming an object came from the Array class.</caption>
     * my_arr := Array()
     * ; The base of a created object is normally derived
     * ; from the prototype of the class that created it.
     * if (my_arr.base = Array.Prototype)
     *     MsgBox('my_arr was created by the Array class.')
     */
    Base: Object
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#static__New|`__Init()`}  
     * A method that is called the first time an object is referenced.  
     * This method is defined automatically and handles initialization of any type of AHK object.  
     * Generally, this method should not be used directly.  
     * Class objects should use the {@link https://www.autohotkey.com/docs/v2/Objects.htm#Custom_NewDelete|`__New()`} method instead.  
     * @returns {(String)}  
     * An empty string is always returned.  
     */
    __Init() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#Custom_NewDelete|`__Delete()`}  
     * A method that is automatically called whenever an object is released.  
     * This method does not exist by default and must be added to an object.  
     * @returns {(Any)}  
     * Return value implementation is determined by the user.  
     */
    __Delete() => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetMethod|`GetMethod()`}  
     * Retrieves the implementation function of a method.  
     * @param {(String)} [Name]  
     * The name of the method to retrieve.  
     * If omitted, the object will attempt self-validation and, if successful, returns the object's own reference.  
     * @param {(Number)} [ParamCount]  
     * The number of parameters that would be passed to the method or function.  
     * Count should not include a method's implicit `this` parameter.  
     * If omitted or if the parameter count cannot be verified, a check is made to see if a Call() method exists.  
     * @returns {(FuncObject|Object)}  
     * A reference to the specified method.  
     * If no method Name was provided, the object itself is returned after successful validation.  
     * @throws MethodError - Method is not found or cannot be retrieved without invoking a property getter.  
     * @throws ValueError - Validation attempted and failed.  
     * @throws MethodError - Validation attempted and failed.  
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()}
     * @example <caption>Getting a reference to the HasBase() method and using it.</caption>
     * ; Get reference to the 'HasBase' method.
     * ; All objects have this method.
     * hb := Any.GetMethod('HasBase')
     * ; The method can now be used as a function to check if array is of "object" type
     * if hb(array, object)
     *     MsgBox('True. Array is derived from object')
     */
    GetMethod([Name:=unset, ParamCount:=unset]) => Func
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#HasBase|`HasBase()`}  
     * Returns a 1 if the current object belongs to the provided BaseObj, otherwise returns a 0.  
     * Meaning BaseObj exists somewhere in the inheritance chain of this object.  
     * @param {(Object | Primitive)} BaseObj  
     * The base object to test against.  
     * @returns {(Boolean)}  
     * - `1` = BaseObj exists in this object's chain of inheritance.  
     * - `0` = BaseObj and this object do not share inheritance.  
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Object.Base} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|ObjGetBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()}
     * @example <caption>Confirming that Arrays are derived from Objects.</caption>
     * if array.HasBase(object)
     *     MsgBox('Yes. The Array class is derived from the Object class.')
     */
    HasBase(BaseObj) => Integer

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#HasMethod|`HasMethod()`}  
     * Returns a non-zero number if this object has a method by the specified Name.  
     * @param {(String)} [Name]  
     * The method name to check for.  
     * If omitted, the object itself is checked to see if it's callable.  
     * @param {(Integer)} [ParamCount]  
     * The number of parameters that would be passed to the method or function.  
     * If omitted, or if the parameter count was not verified, a check is made to see if the object is callable.  
     * ParamCount should never include the `this` parameter that all methods receive.  
     * @returns {(Boolean)}  
     * Name provided:
     * - `1` = Method exists and ParamCount passed validation.  
     * - `0` = Method does not exist or ParamCount failed validation.  
     * 
     * Name omitted: 
     * - `1` = Object is callable.  
     * - `0` = Object is not callable.    
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GetMethod.htm|GetMethod()}
     * @example <caption>Verifying that an array has a push method</caption>  
     * ; Create an array and check for a push method
     * arr := Array()
     * if arr.HasMethod('Push')
     *     MsgBox('Yes. All Array objects have a Push() method.')
     * 
     * ; Make a fat arrow function called fn
     * fn(*) => MsgBox('Hello, world.')
     * ; Create a call descriptor using fn
     * descriptor := {call:fn}
     * ; Use the descriptor to make a method
     * obj := {my_method:descriptor}
     * ; Check if object has a my_method method
     * if obj.HasMethod('my_method')
     *     MsgBox('Yes, obj has a method calls "my_method()".')
     * 
     * ; Omit Name param to check if object is callable
     * if descriptor.HasMethod()
     *     MsgBox('Yes, the descriptor object is callable.')
     * 
     * ; Code that fails a HasMethod() check
     * if descriptor.HasMethod('puppy')
     *     MsgBox('Yes, a puppy() method exists.')
     * else MsgBox('No, a puppy() method does not exist.')
     */
    HasMethod([Name:=unset, ParamCount:=unset]) => Integer

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#HasProp|`HasProp()`}  
     * Returns true if object has a property of the specified name.  
     * The property does not have to be assigned a value. It only needs to exist.  
     * To remove a property, use the {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#DeleteProp|DeleteProp()} method.  
     * @param {(String)} Name  
     * The property name to check for.  
     * @returns {(Boolean)}  
     * - `1` = Object has specified property.  
     * - `0` = Object property not found.  
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()}
     * @example <caption>Checking an object for a specific property.</caption>  
     * obj := {ahk:'AutoHotkey'}
     * 
     * ; Check for a default property:
     * if obj.HasProp('base')
     *     MsgBox('Yes, a base property exists.')
     * else MsgBox('No, a base property does not exist.')
     * 
     * ; Check for an own property:
     * if obj.HasProp('ahk')
     *     MsgBox('Yes, an ahk property exists.')
     * else MsgBox('No, an ahk property does not exist.')
     * 
     * ; Check for a nonexistent property: 
     * if obj.HasProp('java')
     *     MsgBox('Yes, a java property exists.')
     * else MsgBox('No, a java property does not exist.')
     */
    HasProp(Name) => Integer 
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}  
 * Object is the basic class from which all AHK objects are derived.  
 * Each new object inherits properties and methods from the base object it is created from.  
 * All properties added after object creation are considered the object's "own properties".  
 * Objects can be iterated through using a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} and the {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#OwnProps|OwnProps()} method.  
 * @property {(Prototype)} Base - Retrieves or sets an object's base object.
 * @example <caption>Different ways to create an object, adding a property, and looping through an object.</caption>  
 * ; Using the object class.
 * obj1 := Object()
 * obj1.prop := 'value'
 * 
 * ; Specifically using the Call() method.
 * ; This works identically to Object()
 * obj2 := Object.Call()
 * obj2.prop := 'value'
 * 
 * ; Using object syntax (curly braces).
 * obj3 := {prop: 'Value'}
 * 
 * ; Use the .OwnProps() method to iterate,
 * ; or loop through, an object.
 * obj := {a:'auto', h:'hot', k:'key'}
 * for key, value in obj.OwnProps()
 *     MsgBox('key: ' key '`nvalue: ' value)
 */
class Object extends Any {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#Base|`Base`}  
     * Retrieves or sets an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#delegation|base object}.  
     * @type Prototype
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|ObjGetBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#SetBase|ObjSetBase()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Object.Base}
     * @throws Error - Assigning a new base that would change the native type of the object.  
     * @example <caption>Showing the relationship between base and prototype.</caption>  
     * thing := Object()
     * if (thing.Base = Object.Prototype)
     *     MsgBox('Yes, thing is based on Object`'s prototype.')
     * else Msgbox('No, thing is not based on Object`'s prototype.')
     */
    Base: Object
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Call|`Object()`}  
     * Creates a new Object.  
     * @example <caption>Different ways to create a new object.</caption>  
     * ; Calling object.
     * my_obj1 := Object()
     * my_obj1.prop := 'Value A'
     * 
     * ; The same as using Object().
     * my_obj2 := Object.Call()
     * my_obj2.prop := 'Value B'
     * 
     * ; Using object syntax.
     * my_obj3 := {prop: 'Value C'}
     * 
     * ; View each object's property.
     * loop 3
     *     MsgBox(my_obj%A_Index%.prop)
     */
    static Call() => Object
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Clone|`Clone()`}  
     * Returns a shallow copy of the object.  
     * Each property and method owned by the object is copied into the clone.  
     * The clone uses the same base object as the original.  
     * Shallow copy means:  
     * - Primitive values (strings/numbers) are copied
     * - Object *references* are copied. The objects referenced are not duplicated.  
     *   Meaning the original and the clone will both references the same object. See example.  
     * - {@link https://www.autohotkey.com/docs/v2/Objects.htm#Dynamic_Properties|Dynamic properties} are copied but not invoked.  
     * @returns {(Object)}  
     * Shallow copy of the object.
     * @example <caption>Clone() example showing objects aren't duplicated.</caption>  
     * ; Create an object and make a clone
     * obj := {string:'test', array:[1,2,3]}
     * clone := obj.Clone()
     * 
     * ; Change a primitive and an object value.
     * obj.string := 'changed!'
     * obj.array[1] := 'changed!'
     * 
     * ; Showing the data of the shallow copy
     * ; compared to the original object.
     * MsgBox('clone.string = ' clone.string
     *     '`nobj.string = ' obj.string
     *     '`nPrimitive values are copied. Each is unique.'
     *     '`nChanging one does not change the other.'
     *     '`n`nobj.array[1] = ' obj.array[1]
     *     '`nclone.array[1] = ' obj.array[1]
     *     '`nObject reference are cloned, not the array itself.'
     *     '`nMeaning all clones point to the same objects.')
     */
    Clone() => Object
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#DefineProp|`DefineProp()`}  
     * Defines a new own property for the object.  
     * This includes methods, which are callable properties.  
     * @param {(String)} Name  
     * A defining name for the property or method.
     * @param {(Object)} DescriptorObject  
     * An object that contains one of the following key words: `Call`, `Set`, `Get`, `Value`
     * The only time a descriptor can have two of these properties is if `Get` and `Set` are used.  
     * The descriptor should be associated with a {@link https://www.autohotkey.com/docs/v2/Functions.htm|function} or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object}.  
     * When a descriptor is called, parameter of all function object's receive a reference to the object and is traditionally called `this`.  
     * - `Call` = The property becomes callable, calling the assigned function object.  
     *   This turns the property into a {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method} and allows for parameters to be passed in.  
     * - `Get` = A function object that's called when a property is retrieved.  
     * - `Set` = A function object that's called when a value is assigned to a property.  
     *   The second parameter of the functionobject is the value being assigned.  
     * - `Value` = Any value to assign to the property.  
     * 
     * @returns {(Object)}  
     * A reference to the object that received the new property.  
     * @example <caption>Examples of all descriptor types:</caption>  
     * ; Adding a value descriptor. Create an object
     * ; and give it a number property with a value of 100.
     * obj := {}
     * obj.DefineProp('number', {value:100})
     * MsgBox('obj.number: ' obj.number)
     * obj.number := 7
     * MsgBox('obj.number: ' obj.number)
     * ; Value descriptors are automatically created
     * ; when assigning a value using dot notation.
     * obj.number2 := 50
     * MsgBox('obj.number2: ' obj.number2)
     * 
     * ; Adding a call descriptor. This creates a method.
     * ; In AHK, a method is a "callable property".
     * ; Create a mouse object and give it a call descriptor
     * ; to get the current mouse coords when called:
     * mouse := {}
     * mouse.DefineProp('get_coords', {Call:mouse_get_coords})
     * mouse.get_coords('Screen')
     * MsgBox('mouse x: ' mouse.x
     *     '`nmouse y: ' mouse.y)
     * 
     * ; The function to run when get_coords is called
     * ; CoordMode() is set using an optional parameter.
     * mouse_get_coords(this, coord_type:='Client') {
     *     CoordMode('Mouse', coord_type)
     *     MouseGetPos(&mx, &my)
     *     this.x := mx
     *     this.y := my
     * }
     * 
     * ; Adding a setter and getter to an object.
     * ; Known as "accessors" and "mutators".
     * ; Create an object with a number that will always be an integer.
     * obj := {num:0}
     * ; Add a setter and getter descriptor to the object.
     * ; This ensures numbers saved to the property are always integer.
     * ; This example also uses fat arrow functions intead of normal ones.
     * descriptor := {Set:(this, value) => this.num := Integer(value)
     *             ,Get:(this) => this.num}
     * ; Add the descriptor to obj and name it integer.
     * obj.DefineProp('integer', descriptor)
     * MsgBox('Default value of obj.integer = ' obj.integer)
     * ; Assign a non-integer to the property
     * obj.integer := 3.99
     * MsgBox('Assigning 3.99 converts the number to an integer, '
     *     '`ntruncating the fractional part:'
     *     '`nobj.integer = ' obj.integer)
     */
    DefineProp(Name, DescriptorObject) => Object

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#DeleteProp|`DeleteProp()`}  
     * Removes an own property from an object.  
     * Using `obj.prop := ''` only releases the data. It does not delete the property.
     * @param {(String)} Name  
     * Name of the property to delete.
     * @returns {(Any)}  
     * The value of the removed property is always returned.  
     * @example <caption>Removing a property from an object.</caption>  
     * ; Make an object and give it a property
     * obj := {delete_me:'Property Text'}
     * ; Remove that property and save the value
     * removed := obj.DeleteProp('delete_me')
     * MsgBox('Value of the removed property:`n' removed)
     * 
     * ; Use a try/catch to access the deleted property.
     * ; This prevents the error from closing the script.
     * try
     *     MsgBox(obj.delete_me)
     * ; Catch the thrown error object as err
     * ; Show the error object's message.
     * catch as err
     *     MsgBox(err.Message)
     */
    DeleteProp(Name) => Any

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#GetOwnPropDesc|`GetOwnPropDesc()`}  
     * Returns the {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#DefineProp|descriptor object} of an own property.  
     * @param {(String)} Name  
     * The name of the own property to get the descriptor of.  
     * @returns {(Object)}  
     * A reference to the specified {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#DefineProp|descriptor object}.  
     * @example <caption>Getting a descriptor object from an object property.</caption>  
     * ; Create a math object and give it an add method.
     * math := {}
     * math.DefineProp('add', {call:add_fn})
     * ; Get a reference to the object's addition descriptor.
     * add_desc := math.GetOwnPropDesc('add')
     * ; Show that they work identically.
     * MsgBox('math.add(): ' math.add(3, 4)
     *     '`nadd_desc(): ' add_desc(3, 4))
     * 
     * ; The function that the method and descriptor reference.
     * add_fn(this, n1, n2) {
     *     return (n1 + n2)
     * }
     */
    GetOwnPropDesc(Name) => Object

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#HasOwnProp|`HasOwnProp()`}  
     * Returns true if the object has a property by the specified Name.  
     * @param {(String)} Name  
     * The name of a property.  
     * @returns {(Integer)}  
     * - `1` = Object has the specified property.  
     * - `0` = Object property not found.  
     * @example <caption>Test if an object has a specific property.</caption>  
     * obj := {test: 'data'}
     * if (obj.HasOwnProp('test'))
     *     MsgBox('obj has a property named test.')
     * else MsgBox('obj does not have a test property.')
     */
    HasOwnProp(Name) => Integer

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#OwnProps|`OwnProps()`}  
     * Returns an enumerator for an object's own properties.  
     * This is normally used with a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to iterate through the object's properties.  
     * @returns {(Enumerator)}  
     * An {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|enumerator object}.
     * @example <caption>Using OwnProps() to iterate through an object's properties.</caption>  
     * ; Creating an object.
     * obj := {p1:'apple', p2:'banana', p3:'cherry'}
     * ; Make an enumerator.
     * enum := obj.OwnProps()
     * ; Use enumerator to iterate through each property.
     * for key, value in enum
     *     MsgBox('Key: ' key '`nvalue: ' value)
     * 
     * ; It's better to use the function call directly
     * ; instead of making and referencing a 1-time-use object.
     * for key, value in obj.OwnProps()
     *     MsgBox('Key: ' key '`nvalue: ' value)
     */
    OwnProps() => Enumerator
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm|`Array`}  
 * An object containing a sequence of any number of values.  
 * Each individual piece of data is called an element and is referenced by an index number.  
 * Unlike other languages, all AHK indicies start at 1, not 0.  
 * Arrays are also known as lists, vectors, or tuples.  
 * Arrays can contain arrays, making them into a 2D array/table/matrix or tensor/3D array/4D array/etc.  
 * @property {(Integer)} Length - Retrieves or sets the length of an array.
 * @property {(Integer)} Capacity - Retrieves or sets the current capacity of an array.
 * @property {(Any)} Default - Defines the default value to return when an index has no value or does not exist.
 * @property {(Any)} __Item - Used to retrieve or set the value of array element.  
 * The use of the word __Item is normally omitted and bracket syntax is used. 
 * `arr[2]` infers `arr.__Item[2]` and will yield the same results.  
 */
class Array extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Length|`Length`}  
     * Get or set the length of the array.  
     * Length is the total number of elements in the array, including any unset elements.  
     * Increasing Length sets the total elements to the new number and fills in any newly created elements with {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset} values.  
     * Setting Length to a lower number will truncate all elements past the newly defined length.  
     * @type Integer
     * @example <caption>Setting an array's length.</caption>  
     * ; Create an array with 2 elements and show.
     * arr := ['A', 'B']
     * MsgBox('Array before increaseing length:'
     *     '`n' view_array(arr))
     * 
     * ; Increase its length to 4.
     * arr.Length := 4
     * MsgBox('Array length increased from 2 to 4.'
     *     '`nUnset values fill the added elements:'
     *     '`n' view_array(arr))
     * 
     * ; Create an array with 5 elements and show.
     * arr := ['A', 'B', 'C', unset, {}]
     * MsgBox('Array before decreasing length:'
     *     '`n' view_array(arr))
     * 
     * ; Now decrease its length to 3.
     * ; This will truncate the last 2 elements.
     * arr.Length := 3
     * MsgBox('Array length was reduced to 3.'
     *     '`nThe last 2 elements were truncated:'
     *     '`n' view_array(arr))
     * 
     * ; A function to view the primitives in an array.
     * view_array(arr) {
     *     ; String to build and return.
     *     str := '`nArray contents:'
     *     ; Loop through each item of the array.
     *     for index, val in arr {
     *         ; Create new line and add index number.
     *         str .= '`nIndex ' index ': '
     *         ; Using switch to check data type
     *         switch {
     *             ; Always check if unset
     *             case !IsSet(val): str .= 'UNSET value'
     *             ; If value is an object, notate it
     *             case IsObject(val):
     *                 str .= 'OBJECT value'
     *             ; Otherwise, include the value as-is
     *             default: str .= val
     *         }
     *     }
     *     ; Return string
     *     return str
     * }
     */
    Length: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Capacity|`Capacity`}  
     * Get or set the capacity of the array.  
     * Capacity is the total amount of elements the array can hold before the script needs to expand the array's memory.  
     * This is not the same as array `Length`, which is the total amount of elements in use.  
     * If Capacity is set lower than `Length`, all elements greater than the new capacity are truncated.  
     * @type Integer
     * @example <caption>Showing that Capacity differs from Length.</caption>  
     * arr := ['a', 'b', 'c', 'd']
     * MsgBox('Array Length: ' arr.Length
     *     '`nArray Capacity: ' arr.Capacity
     *     '`n' view_array(arr))
     * arr.RemoveAt(2, 2)
     * MsgBox('After arr.RemoveAt(2, 2)'
     *     '`n`nRemoving values does not change capacity.'
     *     '`nLength: ' arr.Length
     *     '`nCapacity: ' arr.Capacity
     *     '`n' view_array(arr))
     * 
     * view_array(arr) {
     *     str := '`nArray contents:'
     *     for index, value in arr
     *         str .= '`nIndex ' index ':' value
     *     return str
     * }
     */
    Capacity: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Default|`Default`}  
     * Defines the default value returned when an unset element is requested.  
     * This property does not exist until the user defines it.  
     * Setting a default value does not prevent an error being thrown when the index is out of range.  
     * To remove the Default value, the property must be removed using {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#|DeleteProp()}.  
     * @type Any
     * @throws UnsetItemError - An attempt was made to read an unset value.  
     * @example <caption>Assigning a default array property and removing it.</caption>  
     * ; Create an array with an unset value.
     * arr := ['a', 'b', unset]
     * ; Set the default property.
     * arr.Default := 'Not found'
     * ; Reference a set and unset property.
     * MsgBox('Index 2: ' arr[2] '`nIndex 3: ' arr[3])
     * 
     * ; The Default property does not affect
     * ; an invalid or out of range index.
     * try
     *     MsgBox(arr[7])
     * ; Catch the error that's thrown
     * ; This prevents the script from closing.
     * catch as err
     *     ; And show the error message.
     *     MsgBox('Error:`n' err.Message)
     * 
     * ; Finally, we can remove the array's default property.
     * arr.DeleteProp('Default')
     * ; And if an unset value is accessed, an error is thrown
     * try MsgBox(arr[3])
     * ; Catch error and show it
     * catch as err
     *     MsgBox('Error:`n' err.Message)
     */
    Default: Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#__Item|`__Item[]`}  
     * Get or set the value of an array element.  
     * The use of the word `__Item` is normally omitted and bracket syntax is used.  
     * `arr[2]` is the same as `arr.__Item[2]`.
     * @param {(Integer)} Index  
     * The number if the element to get or set.  
     * A negative number can be used to go count backward through the array: `-1` last element, `-2` second from last, etc.  
     * @throws IndexError - Using an out-of-bounds index.  
     * @example <caption>Using the __item property.</caption>  
     * arr := ['a','b','c']
     * MsgBox('Accessing array elements:'
     *     '`narr.__Item[2] = ' arr.__Item[2]
     *     '`n`nNormally, __Item is omitted and only brackets are used:  '
     *     '`narr[2] = ' arr[2]
     *     '`n`nA negative index starts at the end and counts backwards:  '
     *     '`narr[-1] = ' arr[-1]
     *     '`narr[3] = ' arr[3]
     * )
     */
    __Item[Index] => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Call|`Call()`}  
     * Creates a new Array.  
     * @param {(Any)} [ValueN]  
     * Include zero or more values to add to the array.  
     * Values are assigned to the array in the order they're listed.  
     * Paramter 1 is element 1, parameter 3 is element 3, etc.  
     * Skipping a parameter will still create the element but its value will be {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.
     * @example <caption>3 different ways to create an array.</caption>  
     * my_arr1 := Array(1, 2, 3)
     * my_arr2 := Array.Call(1, 2, 3)
     * my_arr3 := [1, 2, 3]
     * 
     * ; The 2nd element will be unset
     * my_arr4 := Array('a', , 'c')
     * ; This is the same as my_arr4
     * my_arr5 := ['a', unset , 'c']
     */
    static Call([ValueN*]) => Array
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Clone|`Clone()`}  
     * Returns a shallow copy of the array.  
     * A shallow copy is not a true duplicate. It means:
     * - Primitive values (strings/numbers) are copied.  
     * - Object *references* are copied. The objects they reference are not duplicated.  
     *   This means the original and the clone will reference the same object.  
     * @returns {(Array)}  
     * Shallow copy of the array.
     * @example <caption>Clone() shallow copy example.</caption>  
     * abc_arr := ['A', 'B', 'C']
     * ; Make an array. First element is a primitive.  
     * ; Second and third are both array references
     * ; regardless of where the array is declared.
     * arr := ['OriginalText', abc_arr, [1, 2, 3]]
     * ; Create a clone to inspect
     * clone := arr.Clone()
     * 
     * ; Change the string
     * arr[1] := 'Changed!'
     * ; Change the array references
     * arr[2][1] := 'Changed!'
     * arr[3][1] := 'Changed!'
     * 
     * MsgBox('Primitive values are copied when cloning.'
     *     '`nEach is unique.'
     *     '`nChanging one does not change the other.'
     *     '`n`n`tarr[1] string = ' arr[1]
     *     '`n`tclone[1] string = ' clone[1]
     *     '`n`nObject references get copied.'
     *     '`nThis is not the same as cloning the entire object.'
     *     '`nRemember, these are references.'
     *     '`nBoth the original and clone point to the same object.'
     *     '`n`n`tarr[2][1] reference = ' arr[2][1]
     *     '`n`tarr[2][1] reference = ' clone[2][1]
     *     '`n`n`tarr[3][1] subarray = ' arr[3][1]
     *     '`n`tarr[3][1] subarray = ' clone[3][1])
     */
    Clone() => Array
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Delete|`Delete()`}  
     * Removes the value of an array element, leaving that element value as {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
     * Deleting a value does not affect the array's {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Length|Length}.  
     * Instead, use {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#RemoveAt|RemoveAt()}.  
     * @param {(Integer)} Index  
     * The index number of the element to delete.  
     * A negative index can be used to count from the end to the start.  
     * -1 = last element, -2 = second from last element, etc.  
     * @returns {(Any)}  
     * The removed value is always returned.
     * @throws ValueError - Index is out of range.
     * @example <caption>Removing an element from an array.</caption>  
     * ; Create an array and assign a default
     * arr := ['a', 'b', 'c', 'd']
     * arr.Default := 'No value set'
     * ; Show array and length
     * MsgBox('Array length: ' arr.Length
     *     '`n' view_array(arr))
     * 
     * ; Remove and save the 2nd element
     * removed1 := arr.Delete(2)
     * ; Remove and save the last element
     * removed2 := arr.Delete(-1)
     * 
     * ; Show removed values and array again
     * MsgBox('Array length Unchanged: ' arr.Length
     *     '`nIndex 2 Removed value: ' removed1
     *     '`nIndex -1 Removed value: ' removed2
     *     '`n' view_array(arr))
     * 
     * view_array(arr) {
     *     str := '`nArray contents:'
     *     for index, value in arr {
     *         str .= '`nIndex ' index ': '
     *         if IsSet(value)
     *             str .= value
     *         else str .= 'UNSET VALUE'
     *     }
     *     return str
     * }
     * 
     */
    Delete(Index) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Get|`Get()`}  
     * Returns the value of the specified array element, or a default value if one is provided.  
     * @param {(Integer)} Index  
     * The number of the element to get from the array.  
     * A negative index can be used to count from the end to the start.  
     * -1 = last element, -2 = second from last element, etc.  
     * @param {(Any)} [Default]  
     * The value to return if the specified index does not contain a set value.  
     * The Default parameter has precedence over an array's {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Default|Default property}.
     * @returns {(Any)}  
     * The value found at the specified `Index`.  
     * If no value is found, the Default parameter is used if it was provided.  
     * If no Default parameter was provided, the array's {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Default|Default property} is used if it exists.  
     * If none of these are true, an {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|UnsetItemError} is thrown.  
     * @throws UnsetItemError - Value not set, no default parameter provided, and no default property defined.  
     * @throws IndexError - Index is zero or out of range.
     * @example <caption>Demonstrating the multiple ways Get() works.</caption>  
     * arr := ['a', 'b', 'c', unset]
     * arr.Default := 'Default Property Value'
     * MsgBox('index 2: ' arr.Get(2, 'Default Parameter Value')
     *     '`nindex -2: ' arr.Get(-2, 'Default Parameter Value')
     *     '`nindex 4: ' arr.Get(4, 'Default Parameter Value')
     *     '`nindex 4: ' arr.Get(4)
     *     '`nThe "Default parameter" takes precedence over a "Deafult property".')
     */
    Get(Index [,Default:=unset]) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Has|`Has()`}  
     * Returns true if the specified array element has a set value.  
     * Unlike {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Get|Get()}, Has() does not throw an error if the Index is out of range.
     * @param {(Integer)} Index  
     * The number of the element to check for a value.  
     * A negative index can be used to count from the end to the start.  
     * -1 = last element, -2 = second from last element, etc.  
     * @returns {(Boolean)}  
     * - `1` = The element has a set value.  
     * - `0` = The element is unset or does not exist.  
     * @example <caption>Using Has() to check array elements for a value.</caption>  
     * arr := ['a', 'b', 'c', unset]
     * MsgBox('Has(2) - String: ' arr.Has(2)
     *     '`nHas(4) - Unset value: ' arr.Has(4)
     *     '`nHas(7) - Out of range index: ' arr.Has(7))
     */
    Has(Index) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#InsertAt|`InsertAt()`}  
     * Inserts one or more values at a given position in the array.  
     * All the elements after that position are shifted to the right.  
     * @param {(Integer)} Index  
     * The array position to insert one or more values at.  
     * Use 0 to append value(s) to the end of the array, similar to {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Push|Push()}.  
     * This works the same as `arr.InsertAt(arr.length+1, value)` and `arr.Push(value)`.  
     * A negative index can be used to count from the end to the start.  
     * -1 = last element, -2 = second from last element, etc.  
     * @param {(Any)} Value  
     * A value to add to the end of the array.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of that array to be added instead of adding a reference to the array. See example code.  
     * @param {(Any)} [AdditionalValues]  
     * Any number of additional values can be included, each declared in its own parameter.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of that array to be added instead of adding a reference to the array. See example code.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @throws ValueError - Index is out of range
     * @example <caption>Multiple ways to insert values into an Array.</caption>  
     * ; Using a 0 index.
     * arr := [1, 2, 3]
     * arr.InsertAt(0, 4)
     * MsgBox('Add 4 to the end using 0 as the index.'
     *     '`nThis works the same as arr.Push(4)'
     *     '`n' view_array(arr))
     * arr.InsertAt(1, 0)
     * MsgBox('Insert a zero at the beginning (Index 1):'
     *     '`n' view_array(arr))
     * 
     * ; Inserting multiple values.
     * arr := ['A', 'B', 'E', 'F']
     * arr.InsertAt(3, 'C', 'D')
     * MsgBox('Inserting multiple values:'
     *     '`n' view_array(arr))
     * 
     * ; Inserting multiple values using
     * ; an array of values.
     * arr := ['A', 'B', 'F', 'G']
     * arr_of_values := ['C', 'D', 'E']
     * arr.InsertAt(3, arr_of_values*)
     * MsgBox('Inserting multiple values using'
     *     'an array of values:'
     *     '`n' view_array(arr))
     * 
     * view_array(arr) {
     *     str := '`nArray contents:'
     *     for index, value in arr {
     *         str .= '`nIndex ' index ': '
     *         if IsSet(value)
     *             str .= value
     *         else str .= 'UNSET VALUE'
     *     }
     *     return str
     * }
     */
    InsertAt(Index, Value [,AdditionalValues*]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Pop|`Pop()`}  
     * Removes and returns the last element of the array.  
     * Pop() removes the element, unlike {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Delete|Delete()}, which only removes the value.  
     * This is reflected by array's {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Length|Length}.  
     * Pop() works the same as `arr.RemoveAt(-1)` and `arr.RemoveAt(arr.Length)`.  
     * @returns {(Any)}  
     * The removed element is always returned.  
     * @throws Error - Cannot remove an element from an empty array.  
     * @example <caption>How Pop() </caption>  
     * arr := ['a', 'b', 'c']
     * MsgBox('Array size: ' arr.Length)
     * removed_item := arr.Pop()
     * MsgBox('Array size post-Pop(): ' arr.Length
     *     '`nRemoved value: ' removed_item)
     */
    Pop() => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Push|`Push()`}  
     * Adds one or more values to the end of an array.  
     * This works the same as `arr.InsertAt(0, value)` and `arr.InsertAt(arr.length+1, value)`.  
     * @param {(Any)} Value  
     * A value to add to the end of the array.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of the passed array to be added individually instead of adding an array reference. See example code.  
     * @param {(Any)} [AdditionalValues]  
     * Any number of additional values can be included, each declared in its own parameter.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of that array to be added instead of adding a reference to the array. See example code.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Add an element to the end of an array.</caption>  
     * ; Adding a single value
     * arr := ['a', 'b', 'c']
     * arr.Push('d')
     * view_array(arr)
     * 
     * ; Adding an array of values
     * arr := ['a', 'b', 'c']
     * arr_of_values := ['d', 'e']
     * arr.Push(arr_of_values*)
     * view_array(arr)
     * 
     * ; Adding a reference to an array
     * arr := ['a', 'b', 'c']
     * arr_of_values := ['d', 'e']
     * arr.Push(arr_of_values)
     * MsgBox('This time, the 4th array element is a reference to another array.'
     *     '`narr[4][1] = ' arr[4][1]
     *     '`narr[4][2] = ' arr[4][2])
     * 
     * view_array(arr) {
     *     str := '`nArray contents:'
     *     for index, value in arr {
     *         str .= '`nIndex ' index ': '
     *         if IsSet(value)
     *             str .= value
     *         else str .= 'UNSET VALUE'
     *     }
     *     return str
     * }
     */
    Push(Value [,AdditionalValues*]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#RemoveAt|`RemoveAt()`}  
     * Removes one or more elements from the array at the specified index.  
     * Unlike {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Delete|Delete()}, this adjusts the array's {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Length|Length}.
     * @param {(Integer)} Index  
     * The array element number to be removed.  
     * All remaining elements are shifted to the left, filling in the removed element slots.  
     * A negative index can be used to count from the end to the start.  
     * -1 = last element, -2 = second from last element, etc.  
     * @param {(Integer)} [Length]  
     * The number of elements to remove, starting at the provided `Index`.  
     * If omitted, this defaults to 1.  
     * @returns {(Any)}  
     * If only one element is removed, that element's value is returned.  
     * Otherwise, an empty string is returned.  
     * @throws ValueError - Index is out of range.  
     * @example <caption>Remove a value from a specific element.</caption>  
     * ; Remove a single value
     * arr := ['a', 'b', 'c', 'd']
     * removed := arr.RemoveAt(2)
     * MsgBox('arr.RemoveAt(2):'
     *     '`n`n' view_array(arr)
     *     '`nRemoved value: ' removed)
     * 
     * ; Remove multiple values
     * arr := ['a', 'b', 'c', 'd']
     * removed := arr.RemoveAt(2, 2)
     * MsgBox('arr.RemoveAt(2, 2)'
     *     '`n`n' view_array(arr)
     *     '`n`nNo value was returned because multiple values were removed.'
     *     '`nRemoved value: ' removed)
     * 
     * ; Clear array of all elements
     * arr := ['a', 'b', 'c', 'd']
     * removed := arr.RemoveAt(1, arr.Length)
     * MsgBox('Empty array by removing all elements.'
     *     '`narr.RemoveAt(1, arr.Length)'
     *     '`nArray Length: ' arr.Length)
     * 
     * view_array(arr) {
     *     str := '`nArray contents:'
     *     for index, value in arr {
     *         str .= '`nIndex ' index ': '
     *         if IsSet(value)
     *             str .= value
     *         else str .= 'UNSET VALUE'
     *     }
     *     return str
     * }
     */
    RemoveAt(Index [,Length:=1]) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#__New|`__New()`}  
     * This method exists to support {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Call|Array's Call()}, and is not intended to be called directly.  
     * {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Push|Push()} should be used to add values to an array.  
     * @param {(Any)} Value  
     * A value to add to the end of the array.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of that array to be added instead of adding a reference to the array. See example code.  
     * @param {(Any)} [AdditionalValues]  
     * Any number of additional values can be included, each declared in its own parameter.  
     * An array of values can be used if it is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*} and is the last parameter.  
     * This causes each element of that array to be added instead of adding a reference to the array. See example code.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm#Custom_NewDelete|Construction and Destruction} | 
     * {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Push|Push()} | 
     * {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#Call|Call()}
     */
    __New(Value [,AdditionalValues:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Array.htm#__Enum|`__Enum()`}  
     * Creates an {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator} object that allows iteration of the array's elements.  
     * This method is typically not called directly but instead is used by a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to loop through each element.
     * @returns {(Enumerator)}  
     * Enumerable function object.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator Object}
     * @example <caption>Manually using an enumerator.</caption>  
     * arr := ['a', 'b', 'c']
     * 
     * ; Normal use: Passing the array to the for-loop
     * ; The for-loop always checks the object for an __Enum() method.
     * For index, value in arr
     *     MsgBox('index: ' index '`nvalue: ' value)
     * 
     * ; Or create an enumerator object
     * enum := arr.__Enum()
     * ; And pass it the for-loop.
     * For index, value in enum
     *     MsgBox('index: ' index '`nvalue: ' value)
     * 
     * ; Example of setting up a for-loop using
     * ; an enumerator and a while-loop.
     * enum := arr.__Enum()
     * While enum(&index, &value)
     *     MsgBox('Index: ' index '`nValue: ' value)
     */
    __Enum() => Enumerator
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|`Buffer`}  
 * Encapsulates a block of memory for use with memory sensitive actions such as {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()}, {@link https://learn.microsoft.com/en-us/cpp/cpp/struct-cpp?view=msvc-170|structures}, {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()}, and raw file I/O.  
 * Buffer objects are typically created by calling Buffer(), but can also be returned by {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead} with the "RAW" option.  
 * It helps to understand the basics of "binary" and "data types" when working with buffers.  
 * @property {(Integer)} Ptr - Retrieves the buffer's current memory address.
 * @property {(Integer)} Size - Retrieves or sets the buffer's size, in bytes.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|NumPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|StrGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawRead|File.RawRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawWrite|File.RawWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ClipboardAll.htm|ClipboardAll}
 */
class Buffer extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|`Ptr`}  
     * Retrieves the buffer's current memory address.  
     * This property is read-only and cannot be assigned a new value.
     * @type Integer
     * @example <caption>Showing and using a buffer pointer.</caption>  
     * buff := Buffer(4)
     * NumPut('Int', 420, buff.Ptr)
     * MsgBox('Pointer address of this buffer:`n' buff.ptr
     *     '`nNumber stored in buffer: ' NumGet(buff.ptr, 0, 'Int'))
     */
    Ptr: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|`Size`}  
     * Retrieves or sets the buffer's size, in bytes.  
     * @type Integer
     * @throws MemoryError - Memory could not be allocated.  
     * @example <caption>Getting the size of a buffer.</caption>  
     * buff := Buffer(16)
     * MsgBox('Size of buffer: ' buff.Size ' bytes')
     */
    Size: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|`Buffer()`}  
     * Creates a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer} object.  
     * @param {(Integer)} [ByteCount]  
     * Number of bytes to allocate.  
     * If omitted, the Buffer is created with a null (zero) `Ptr` and `Size` is 0.  
     * @param {(Integer)} [FillByte]  
     * Number between 0-255. Each byte will be filled with that number.  
     * If omitted, the buffer's memory is allocated but the bytes of the buffer will contain whatever previous data was there before.  
     * If the buffer will be written to before being read, it is better to omit `FillByte` as this saves time by not needing to write to memory.  
     * Otherwise, FillByte should be used.  
     * @returns {(Buffer)}  
     * A buffer object.  
     * @throws MemoryError - If the memory could not be allocated.  
     * @example <caption>Creating a new 8-byte buffer and writing 2 integers to it.</caption>  
     * buff := Buffer(8)
     * NumPut('Int', 100, 'Float', 3.14, buff)
     * MsgBox('The buffer object "buff" has been created.'
     *     '`nIt is ' buff.size ' bytes in size.'
     *     '`nThe first number is an integer: ' NumGet(buff, 'Int')
     *     '`nThe second number is a float: ' Round(NumGet(buff, '4', 'Float'), 2))
     */
    static Call([ByteCount:=0, FillByte:=unset]) => Buffer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#__New|`__New()`}  
     * Allocates or reallocates the buffer and optionally fills it.  
     * This method exists to support buffer's {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Call|Call()} method and is not intended to be called directly.  
     * @param {(Integer)} [ByteCount]  
     * Number of bytes to allocate or reallocate or using zero to free the buffer.  
     * This is equivalent to setting the {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property.  
     * If omitted, 0 is used. 
     * @param {(Integer)} [FillByte]  
     * Number between 0-255. Each byte will be filled with that number.  
     * If omitted, the buffer's memory retains whatever prior data was already there.  
     * If the buffer will be written to before being read, it is better to omit `FillByte` as this saves having to write to memory.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm#Custom_NewDelete|Construction and Destruction}  
     * @example <caption>Expanding, storing, and retrieving a number from a buffer.</caption>  
     * ; A buffer that can hold 2 bytes
     * ; 2 bytes can hold a number between 0 and 65,535.
     * buff := Buffer(2)
     * 
     * ; This number is too large and needs at least 3 bytes.
     * num := 70001
     * 
     * ; Expand buffer to 4 bytes.
     * ; It can now hold a number between 0 and 4,294,967,295.
     * buff.__New(4)
     * ; Assign number to buffer
     * NumPut('uInt', num, buff)
     * ; Show buffer contains the number
     * MsgBox('Value stored in buff: '
     *     NumGet(buff, 'Int'))
     */
    __New([ByteCount:=0, FillByte:=unset]) => EmptyString
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|`ClipboardAll`}  
 * Creates an object containing all the data on the clipboard. This includes binary data, like pictures or an exe.  
 * ClipboardAll is derived from the Buffer class.  
 * @property {(Integer)} Ptr - The address of the data contained by the object. This address is valid until the object is freed.
 * @property {(Integer)} Size - The size, in bytes, of the raw binary data.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ClipWait.htm|ClipWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|OnClipboardChange()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_ClipboardTimeout.htm|#ClipboardTimeout} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer}
 * @example <caption>A paste function that backs up and restores the clipboard.</caption>  
 * *F1::paste('Hello, world!')
 * 
 * paste(data) {
 *     ; Backup clipboard
 *     clipbackup := ClipboardAll()
 *     ; Set new data to clipboard
 *     A_Clipboard := data
 *     ; Send the default paste command
 *     Send('^v')
 *     ; Check repeatedly to see if the clipboard is still open
 *     Loop
 *         ; If more than 20 tries, notify of failure
 * 	       if (A_Index > 20)
 *             return TrayTip(A_ThisFunc ' failed to restore clipboard contents.')
 *         ; Otherwise, wait another 100ms
 *         else Sleep(100)
 *     Until !DllCall('GetOpenClipboardWindow', 'Ptr')
 *     ; Finally, restore original clipboard contents
 *     A_Clipboard := clipbackup
 * }
 */
class ClipboardAll extends Buffer {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|`Ptr`}  
     * Retrieves the memory address of the buffer's data.  
     * This address is valid until the object is freed.  
     * This property is read-only and cannot be assigned a new value.
     * @type Integer
     * @throw Error - This is a read-only property and cannot be written to.  
     * @example <caption>Showing a ClipboardAll buffer address.</caption>  
     * clip_backup := ClipboardAll()
     * MsgBox('The memory address of the backup is: ' clip_backup.Ptr)
     */
    Ptr: Integer  
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|`Size`}  
     * Retrieves the size, in bytes, of the raw binary data.  
     * @type Integer
     * @example <caption>Showing size of a buffer.</caption>  
     * clip_backup := ClipboardAll()
     * MsgBox('Size of the clipboard data is ' clip_backup.Size ' bytes.')
     */
    Size: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ClipboardAll.htm|`ClipboardAll()`}  
     * Save the contents of the clipboard to a clipboard buffer object or create a clipboard object using the provided binary data.  
     * This object can be assigned to {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard} to restore the data to the clipboard.
     * @param {(Object | Integer)} [Data]  
     * A memory address or a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|buffer-like} object (any object with a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property).  
     * The data must be in a {@link https://www.autohotkey.com/docs/v2/lib/ClipboardAll.htm#Remarks|specific format}, so typically it originates from a previous call to {@link https://www.autohotkey.com/docs/v2/lib/ClipboardAll.htm|ClipboardAll()}.  
     * Omitting this parameter and the `Size` parameter will retrieve the contents of the clipboard.  
     * @param {(Integer)} [Size]  
     * The number of bytes of data to use.  
     * This is not necessary with buffer objects.  
     * Omitting this parameter and the `Data` parameter will retrieve the contents of the clipboard.  
     * @returns {(ClipboardAll)}  
     * A  buffer object
     * @throws MemoryError - Memory could not be allocated.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|NumPut()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|StrGet()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawRead|File.RawRead()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawWrite|File.RawWrite()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ClipboardAll.htm|ClipboardAll}
     * @example <caption>A paste function that backs up and restores the clipboard.</caption>  
     * *F1::paste('Hello, world!')
     * 
     * paste(data) {
     *     ; Backup clipboard
     *     clipbackup := ClipboardAll()
     *     ; Set new data to clipboard
     *     A_Clipboard := data
     *     ; Send the default paste command
     *     Send('^v')
     *     ; Check repeatedly to see if the clipboard is still open
     *     Loop
     *         ; If more than 20 tries
     * 	       if (A_Index > 20)
     *             ; Stop trying and notify of failure
     *             return TrayTip(A_ThisFunc ' failed to restore clipboard contents.')
     *         ; Otherwise, wait another 100ms
     *         else Sleep(100)
     *     ; Stop when clipboard window isn't in use
     *     Until !DllCall('GetOpenClipboardWindow', 'Ptr')
     *     ; Restore original clipboard contents
     *     A_Clipboard := clipbackup
     * }
     */
    static Call([ByteCount:=0, FillByte:=0]) => ClipboardAll
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Class.htm|`Class`}  
 * Represents a class definition. A class can contain static methods and static properties as well as instance methods and instance properties.  
 * Static methods and properties belong to the class itself while instance methods and properties are unique to each object created by the class.  
 * While a class can be used to make instances of an object, it is not its only purpose.  
 * Sometimes a class is used as a standalone item to organize like-code into one bundle.  
 * @property {(Object)} Prototype - Retrieves or sets the object on which all instances of the class are based.  
 * The Prototype contains all properties and methods that new instances will inherit.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ClipWait.htm|ClipWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|OnClipboardChange()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_ClipboardTimeout.htm|#ClipboardTimeout}
 * @example <caption>A Class template showing all parts it can include.</caption>
 */
class Class extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Class.htm#Call|`Class()`}  
     * Constructs a new instance of the class.  
     * @param Params - Any amount of predetermined parameters.  
     * @returns {(Class)} A class object is returned.  
     * @example <caption>A template of </caption>  
     * obj1 := {}
     * obj2 := Object()
     * obj3 := Object.Call()
     */
    Call(Params*) => Class
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Class.htm#Prototype|`Prototype`}  
     * Retrieves or sets the object on which all instances of the class are based.  
     * By default, a class's Prototype contains all instance methods and dynamic properties defined within the class definition that are not staic, or otherwise owned by the base class.  
     * These are the properties and methods all instances of the class will inherit.  
     * A class's Prototype is normally based on the Prototype of its base class:  
     * 
     *     ClassObj.Prototype.base == ClassObj.base.Prototype
     * Prototype is automatically defined as an own property of any class object created by a class definition.  
     * @type Prototype
     */
    Prototype: Object
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm|`Error`}  
 * An object containing information about an error that can be {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|thrown} when a runtime error occurs.  
 * Errors can be thrown by AHK or programmed to be thrown by the user.  
 * There are multiple types of specific error objects that can also be used:
 * - `MemoryError` = A memory allocation failed.
 * - `OSError` = An internal function call to a Win32 function failed.
 * - `TargetError` = A function failed because its target could not be found.
 * - `TimeoutError` = {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage} time out error.
 * - `TypeError` = An unexpected value type was used as input for a function, property assignment, or some other operation.  
 *   In other words, it expected a string and got a number, expected a number and got an object, etc.
 * - `UnsetError` = An attempt was made to reference or use something that is current unset or not defined.
 *   - `MemberError` = An attempt was made to reference an unset or undefined property or method.
 *     - `PropertyError` = An attempt was made to reference an unset or undefined property.
 *     - `MethodError` = An attempt was made to reference an unset or undefined method.
 *   - `UnsetItemError` = An attempt was made to reference an unset or undefined item.
 * - `ValueError` = An unexpected value was used as input for a function, property assignment, or some other operation.
 *   - `IndexError` = The index parameter of an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#__Item|__Item property} was an invalid type or out of range.
 * - `ZeroDivisionError` = Division by zero is always an error.
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function or method name. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class Error extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Message|`Message`}  
     * A description of the error that occurred.  
     * @type String
     */
    Message: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#What|`What`}  
     * The identifier of the thing that threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @type String
     */
    What: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|`Extra`}  
     * Any additional information to include about the error.  
     * If extra information is passed, the error message will include a separate line that says:  
     * `Specifically: <Information here> `.
     * @type String
     */
    Extra: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#File|`File`}  
     * The full path of the script file that contains the line at which the error occurred or where the Error object was constructed.  
     * @type String
     */
    File: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Line|`Line`}  
     * The Line number at which the error occurred or where the Error object was constructed.  
     * @type Integer
     */
    Line: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Stack|`Stack`}  
     * The full call stack at the time of error or error object construction.  
     * Each line should be shown in one of the following formats:
     * - ``err.File (err.Line): [err.What] SourceCode`r`n``  
     *   *What* is the thing that errored out.  
     *   *File* is the file name and *Line* is the line number of the current stack entry depth.  
     *   *SourceCode* is an approximation of the source code at that line, as it would be shown in {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|ListLines()}.
     * - ``> err.What`r`n``  
     *    Represents the launching of a thread, typically the direct cause of the function call above it.  
     * - `... N more`  
     *   If this is displayed, the stack trace was truncated, and there are *N* more stack entries not being shown.  
     *   The Stack property cannot exceed 2047 characters.
     * @type String
     */
    Stack: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|`Error()`}  
     * Creates an Error object that can be {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|thrown}.  
     * @param {(String)} [Message]  
     * A description of the error that occurred.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(Error)}  
     * Error object.  
     * @example <caption>Example of error-checking the division of 2 numbers.</caption>  
     * dividend := InputBox('Enter number to divide.')
     * if (dividend.Result != 'OK')
     *     return
     * 
     * divisor := InputBox('Enter number to divide by.`nTry using 0.')
     * if (divisor.Result != 'OK')
     *     return
     * 
     * switch {
     *     case !IsNumber(dividend.Value):
     *         throw(TypeError('Dividend must be a number.'
     *             , A_ThisFunc
     *             , 'A ' Type(dividend.Value) ' was supplied.'))
     *     case !IsNumber(divisor.Value):
     *         throw(TypeError('Divisor must be a number.'
     *             , A_ThisFunc
     *             , 'A ' Type(dividend.Value) ' was supplied.'))
     *     case (divisor.Value = 0):
     *         throw ZeroDivisionError('Dividing by zero is a no-no.'
     *             , A_ThisFunc
     *             , 'This is a math thing, not a computer thing.')
     *     default:
     *         quo := dividend.value / divisor.value
     *         msg := dividend.value ' / ' divisor.value ' = ' quo
     *         MsgBox(msg)
     * }
     */
    static Call([Message:='Error', What:=A_ThisFunc, Extra:=unset]) => Error
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MemoryError|`MemoryError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when a memory allocation has failed.
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class MemoryError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MemoryError|`MemoryError()`}  
     * A memory allocation failed.  
     * @param {(String)} [Message]  
     * A description of the error that occurred.  
     * If omitted, "MemoryError" is used.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(MemoryError)}  
     * MemoryError object.  
     */
    static Call([Message:='MemoryError', What:=A_ThisFunc, Extra:='']) => MemoryError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#OSError|`OSError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an internal function call to a Win32 function fails.  
 * @property {(String)} Message - The error code number and a description generated by the operating system.  
 * @property {(Integer)} Number - The error code number.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class OSError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#OSError|`Number`}  
     * The number of the {@link https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-|OS Error}.  
     * @type Integer
     */
    Number: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#OSError|`OSError()`}  
     * An internal function call to a Win32 function failed.  
     * Message includes an {@link https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-|error code and description} generated by the operating system.  
     * OSErrors have an additional `Number` property which contains the error code number.  
     * Calling `OSError(CodeNumber)` sets `Number` to the code number and `Message` to an OS-Defined error message.  
     * Example: `OSError(1)` sets `Number` to 1 and `Message` to "(1) Incorrect Function".  
     * If the code number is omitted, it defaults to {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError}.  
     * @param {(String)} [ErrorNumber]  
     * A {@link https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-|Windows error code} number.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`  
     * @returns {(OSError)}  
     * OSError object.  
     */
    static Call([ErrorNumber:=A_LastError, What:=A_ThisFunc, Extra:='']) => OSError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TargetError|`TargetError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when a function fails because its target could not be found.  
 * @property {(String)} Message - Indicates the type of target expected, such as 'window', 'control', 'menu', or 'status bar'.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class TargetError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TargetError|`Message`}  
     * Indicates the type of target expected, such as 'window', 'control', 'menu', or 'status bar'.  
     * @type String
     */
    Message: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TargetError|`TargetError()`}  
     * A function failed because its target could not be found.  
     * @param {(String)} [Message]  
     * Indicates the type of target expected, such as 'window', 'control', 'menu', or 'status bar'.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(TargetError)}  
     * TargetError object.  
     */
    static Call([Message:='TargetError', What:=A_ThisFunc, Extra:='']) => TargetError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TimeoutError|`TimeoutError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when the {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} function experiences a {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm#Error_Handling|timeout}.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class TimeoutError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TimeoutError|`TimeoutError()`}  
     * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} timed out.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(TimeoutError)}  
     * TimeoutError object.  
     */
    static Call([Message:='TimeoutError', What:=A_ThisFunc, Extra:='']) => TimeoutError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`TypeError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an unexpected {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#cat-type|value type} is used.  
 * Examples would include using a string where a number is expected or using an object when a primitive is expected.  
 * @property {(String)} Message - Normally, this indicates the type expected and the type provided.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Normally, this will contain a string representing the errant value.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class TypeError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`Message`}  
     * Normally, this indicates the {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#cat-type|value type} expected and the type provided.  
     * @type String
     */
    Message: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`Extra`}  
     * Normally, this will contain a string representing the errant value.  
     * @type String
     */
    Extra: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`TypeError()`}  
     * An unexpected {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#cat-type|value type} was used as input for a function, property assignment, or some other operation.  
     * Usually, Message indicates the expected and actual type, and Extra contains a string representing the errant value.  
     * @param {(String)} [Message]  
     * Normally, this indicates the type expected and the type provided.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Normally, this will contain a string representing the errant value.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(TypeError)}  
     * TypeError object.  
     */
    static Call([Message:='TypeError', What:=A_ThisFunc, Extra:='']) => TypeError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#UnsetError|`UnsetError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an attempt is made to read or use a variable, property, or item that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class UnsetError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#UnsetError|`UnsetError()`}  
     * An attempt was made to read or use a variable, property, or item that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(UnsetError)}  
     * UnsetError object.  
     */
    static Call([Message:='UnsetError', What:=A_ThisFunc, Extra:='']) => UnsetError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MemberError|`MemberError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an attempt is made to read or use a property or method that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class MemberError extends UnsetError {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MemberError|`MemberError()`}  
     * An attempt was made to read or use a property or method that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(MemberError)}  
     * MemberError object.  
     */
    static Call([Message:='MemberError', What:=A_ThisFunc, Extra:='']) => MemberError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#PropertyError|`PropertyError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an attempt is made to read or use a property that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class PropertyError extends MemberError {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#PropertyError|`PropertyError()`}  
     * An attempt was made to read or use a property that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(PropertyError)}  
     * PropertyError object.  
     */
    static Call([Message:='PropertyError', What:=A_ThisFunc, Extra:='']) => PropertyError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MethodError|`MethodError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an attempt is made to use or access a method that doesn't exist.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class MethodError extends MemberError {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#MethodError|`MethodError()`}  
     * An attempt was made to use or access a method that doesn't exist.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(MethodError)}  
     * MethodError object.  
     */
    static Call([Message:='MethodError', What:=A_ThisFunc, Extra:='']) => MethodError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#UnsetItemError|`UnsetItemError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an attempt is made to read or use an {@link https://www.autohotkey.com/docs/v2/Objects.htm#__Item|object __item} that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class UnsetItemError extends UnsetError {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#UnsetItemError|`UnsetItemError()`}  
     * An attempt was made to read or use an {@link https://www.autohotkey.com/docs/v2/Objects.htm#__Item|object __item} that doesn't exist or is currently {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(UnsetItemError)}  
     * UnsetItemError object.  
     */
    static Call([Message:='UnsetItemError', What:=A_ThisFunc, Extra:='']) => UnsetItemError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#ValueError|`ValueError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when an unexpected value is used for a function parameter, property assignment, or some other operation.  
 * @property {(String)} Message - Normally, this indicates what expectation was broken.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Normally, this will contain a string representing the errant value.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class ValueError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`Message`}  
     * Normally, this indicates what expectation was broken.  
     * @type String
     */
    Message: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`Extra`}  
     * Normally, this will contain a string representing the errant value.  
     * @type String
     */
    Extra: String

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#ValueError|`ValueError()`}  
     * An unexpected value was used for a function parameter, property assignment, or some other operation.  
     * @param {(String)} [Message]  
     * Normally, this indicates what expectation was broken.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Normally, this will contain a string representing the errant value.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(ValueError)}  
     * ValueError object.  
     */
    static Call([Message:='ValueError', What:=A_ThisFunc, Extra:='']) => ValueError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#IndexError|`IndexError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when the index of an {@link https://www.autohotkey.com/docs/v2/Objects.htm#__Item|__Item property} is invalid or out of range.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Normally, this indicates what invalid index was used.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class IndexError extends ValueError {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#TypeError|`Extra`}  
     * Normally, this indicates what invalid index was used.  
     * @type String
     */
    Extra: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#IndexError|`IndexError()`}  
     * Used when the index of an {@link https://www.autohotkey.com/docs/v2/Objects.htm#__Item|__Item property} is invalid or out of range.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Normally, this indicates what invalid index was used.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(IndexError)}  
     * IndexError object.  
     */
    static Call([Message:='IndexError', What:=A_ThisFunc, Extra:='']) => IndexError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#ZeroDivisionError|`ZeroDivisionError`}  
 * A predefined {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error} class for when when any math operation tries to divide by zero.  
 * @property {(String)} Message - The general error message.  
 * @property {(String)} What - What threw the error. Usually a function. Blank for expressions and global space errors.  
 * @property {(String)} Extra - Extra information to be included about the error.  
 * @property {(String)} File - The full path of the script file containing the line of code that caused the error.  
 * @property {(Integer)} Line - The number of the line of code that caused the error.  
 * @property {(String)} Stack - A string representing the call stack at the time of error.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Finally.htm|Finally} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#error-types|Error Types}
 */
class ZeroDivisionError extends Error {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#ZeroDivisionError|`ZeroDivisionError()`}  
     * A math operation tried to divide by zero.  
     * @param {(String)} [Message]  
     * A message describing the error.  
     * @param {(String)} [What]  
     * The identifier of what threw the error. This is usually a function or method name.  
     * If an expression or something in global space throws the error, this property will be blank. Example: `('a' / 1)`
     * @param {(String|Number)} [Extra]  
     * Any additional information to include about the error.  
     * If `Extra` is provided, the error message will include a separate line that says:  
     * `Specifically: <Extra information>`
     * @returns {(ZeroDivisionError)}  
     * ZeroDivisionError object.  
     */
    static Call([Message:='ZeroDivisionError', What:=A_ThisFunc, Extra:='']) => ZeroDivisionError
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm|`File Object`}  
 * Provides an interface for file input and output, such as reading/writing tex, length, encoding, and more.  
 * This object is created using {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|FileOpen()}.  
 * @property {(Integer)} Pos - Retrieves or sets the position of the file pointer.  
 * @property {(Integer)} Length - Retrieves or sets the size of the file.  
 * @property {(Integer)} AtEOF - (At End Of File) Retrieves a non-zero number if the file pointer has reached the end of the file.  
 * @property {(String)} Encoding - Retrieves or sets the text encoding used by this file object.  
 * @property {(Integer)} Handle - Retrieves a system file handle, intended for use with {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall}.  
 */
class File extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#AtEOF|`AtEOF`}  
     * Retrieves a non-zero value if the file pointer has reached the end of the file.  
     * This property should only be used with actual files.  
     * @type Integer
     * @example <caption>Count total lines in a file.</caption>  
     * ; Open a file as a file object
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * ; Track how many lines there are
     * line_total := 0
     * ; While not At End Of File
     * While !fileobj.AtEOF
     *     ; Read the line
     *     fileobj.ReadLine()
     *     ; And add 1 to total
     *     ,line_total++
     * ; Always close a file when you're finished with it
     * fileobj.Close()
     * MsgBox('There are ' line_total ' line(s) in this file.')
     */
    AtEOF: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Encoding|`Encoding`}  
     * Retrieves or sets the text encoding used by this file object.  
     * NewEncoding may be a numeric code page identifier (see {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Microsoft Docs}) or one of the following strings.  
     * - `UTF-8` = Unicode UTF-8, equivalent to CP65001.  
     * - `UTF-16` = Unicode UTF-16 with little endian byte order, equivalent to CP1200.  
     * - `CP#` = A code page where `#` is a numeric identifier, such as CP437 or CP65001.  
     * Setting a new encoding will never cause a {@link https://www.w3.org/International/questions/qa-byte-order-mark#bomwhat|BOM (Byte Order Mark)} to be added or removed, as the BOM is normally written to the file when it is first created.  
     * @type Primitive 
     * @example <caption>Showing a file's encoding type.</caption>  
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * MsgBox("This script's file encoding is: " fileobj.Encoding)
     * fileobj.Close()
     */
    Encoding: Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Handle|`Handle`}  
     * Retrieves a system file handle, intended for use with {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCalls}. See {@link https://learn.microsoft.com/windows/win32/api/fileapi/nf-fileapi-createfilea|CreateFile}.  
     * A file object internally buffers its reads and writes and if data ha sbeen written into the object's internal buffer, it is committed to disk before the handle is returned.  
     * @type Integer
     * @example <caption>Getting the handle of .</caption>  
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * MsgBox('The handle to this file object is: ' fileobj.Handle)
     * fileobj.Close()
     */
    Handle: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Length|`Length`}  
     * Retrieves or sets the size of the file.  
     * Length is represented in bytes.  
     * This property should only be used with actual files.  
     * @type Integer
     * @example <caption>Checking the size of the current script file.</caption>  
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * MsgBox('Size of this script: ' fileobj.Length ' bytes')
     * fileobj.Close()
     */
    Length: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Pos|`Pos`}  
     * Retrieves or sets the position of the file pointer.  
     * The position is a byte-offset from the beginning of the file, where 0 is the first byte.  
     * When data is written to or read from the file, the file pointer automatically moves to the next byte of the file.  
     * A file containing a UTF-8 or UTF-16 BOM (byte order mark) with read access may skip the BOM.  
     * This may cause the position to start at 2 or 3 after opening the file.
     * @type Integer
     * @example <caption>Get start position of the script 3rd line.</caption>  
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * loop 2
     *     fileobj.ReadLine()
     * MsgBox('The pointer position at the start of line 3 is: ' fileobj.pos)
     * fileobj.Close()
     */
    Pos: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Close|`Close()`}  
     * Closes the file, flushes any data in the cache to disk, and releases the share locks.  
     * As a good practice, it is recommended to close the file as soon as possible.  
     * The file is closed automatically when the object is freed.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Closing an open file to access it.</caption>  
     * ; Path to the test file.
     * path := A_ScriptDir '\testfile.txt'
     * ; Open as a new file, even if the file already exists.
     * fileobj := FileOpen(path, 'w')
     * ; File can be written to because it's opened.
     * fileobj.Write('Hello, world!')
     * ; Trying to write to it while it's opened causes an error.
     * try FileAppend('`nline 2', path)
     * ; Catch the error and show it.
     * catch as err
     *     MsgBox(err.What '`n' err.Extra
     *         '`nFailed to write line 2.')
     * ; Instead, close the file object.
     * ; Always close a file object when finished.
     * fileobj.Close()
     * ; Then append to it.
     * try FileAppend('`nline 2', path)
     * ; Catch the error and show it.
     * catch as err
     *     MsgBox(err.What '`n' err.Extra
     *         '`nFailed to write line 2.')
     * Run(path)
     * ; Cleanup example file.
     * if (MsgBox('Delete test file?', , 'YesNo') = 'Yes')
     *     FileDelete(path)
     */
    Close() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawRead|`RawRead()`}  
     * Reads raw binary data from the file into memory and advances the file pointer.  
     * @param {(Integer)} Buffer  
     * Either a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer-like} object or the memory address which will receive the data.  
     * @param {(Integer)} [Bytes]  
     * The maximum number of bytes to read.  
     * This parameter is optional if Buffer is a Buffer object.  
     * @returns {(Integer)}  
     * Number of bytes that were read.  
     * @throws Error - If bytes exceed the size of the buffer.  
     * @example <caption>Writing and reading binary data from file.</caption>  
     * ; Create a path to where the binary data will be stored
     * path := A_ScriptDir '\testfile.bin'
     * ; Make a buffer that can hold 4 integers in binary form.
     * ; An integer is 4 bytes so 4x4 is 16.
     * buff := Buffer(16)
     * ; Add 4 integers to the buffer.
     * NumPut('Int', 200
     *     ,  'Int', 400
     *     ,  'Int', 800
     *     ,  'Int', 1600
     *     ,  buff)
     * ; Open file as write, creating a new file.
     * fileobj := FileOpen(path, 'w')
     * ; Write binary data to file and notify user.
     * fileobj.RawWrite(buff)
     * fileobj.Close()
     * MsgBox('Data has been written to the file.'
     *     '`nThe file is saved and closed.'
     *     '`n`nClick OK to reopen file and get 3rd '
     *     '`nnumber from the binary file just written.')
     * 
     * ; Reopen the file as read.
     * fileobj := FileOpen(path, 'r')
     * ; Create a buffer to put the binary data into
     * bin := Buffer(16)
     * ; Move the file's pointer 8 bytes in
     * ; This starts it at the 3rd Int
     * fileobj.pos := 8
     * ; Get next 4 bytes and store in bin buffer.
     * fileobj.RawRead(bin, 4)
     * ; Get number from binary data.
     * num := NumGet(bin, 'Int')
     * ; Show the that the 3rd integer was retrieved.
     * MsgBox('The 3rd integer should be 800.'
     *     '`nNumber gotten from fileobj: ' num)
     * ; Don't forget to close your files!
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(path)
     */
    RawRead(Buffer [,Bytes:=Buffer.Size]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#RawWrite|`RawWrite()`}  
     * Writes raw binary data to the file and advances the file pointer.  
     * @param {(Buffer|String|Integer)} Buffer  
     * Either a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer-like} object, a string containing binary data, or a memory address containing the data.  
     * @param {(Integer)} [Bytes]  
     * The number of bytes to write.  
     * This parameter is optional if Buffer is an object or a string.  
     * @returns {(Integer)}  
     * Number of bytes that were read.  
     * @throws Error - If bytes exceed the size of the buffer.  
     * @example <caption>Writing and reading binary data from file.</caption>  
     * ; Create a path to where the binary data will be stored
     * path := A_ScriptDir '\testfile.bin'
     * ; Make a buffer that can hold 4 integers in binary form.
     * ; An integer is 4 bytes so 4x4 is 16.
     * buff := Buffer(16)
     * ; Add 4 integers to the buffer.
     * NumPut('Int', 200
     *     ,  'Int', 400
     *     ,  'Int', 800
     *     ,  'Int', 1600
     *     ,  buff)
     * ; Open file as write, creating a new file.
     * fileobj := FileOpen(path, 'w')
     * ; Write binary data to file and notify user.
     * fileobj.RawWrite(buff)
     * fileobj.Close()
     * MsgBox('Data has been written to the file.'
     *     '`nThe file is saved and closed.'
     *     '`n`nClick OK to reopen file and get 3rd '
     *     '`nnumber from the binary file just written.')
     * 
     * ; Reopen the file as read.
     * fileobj := FileOpen(path, 'r')
     * ; Create a buffer to put the binary data into
     * bin := Buffer(16)
     * ; Move the file's pointer 8 bytes in
     * ; This starts it at the 3rd Int
     * fileobj.pos := 8
     * ; Get next 4 bytes and store in bin buffer.
     * fileobj.RawRead(bin, 4)
     * ; Get number from binary data.
     * num := NumGet(bin, 'Int')
     * ; Show the that the 3rd integer was retrieved.
     * MsgBox('The 3rd integer should be 800.'
     *     '`nNumber gotten from fileobj: ' num)
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(path)
     */
    RawWrite(Data [,Bytes:=Buffer.Size]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Read|`Read()`}  
     * Reads a string of characters from the file and advances the file pointer.  
     * @param {(Integer)} [NumberOfCharacters]  
     * The maximum number of characters to read.  
     * If omitted or unset, the remaining characters of the file are returned as one string.  
     * If the File object was created from a handle to a non-seeking device such as a console buffer or pipe, omitting this parameter may cause the method to fail or return only what data is currently available.  
     * @returns {(String)}  
     * One or more characters from the file.  
     * @example <caption>Reading characters from the script's file.</caption>  
     * ; Use the current script as the file to read.
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * ; Get the first 89 characters.
     * MsgBox(fileobj.read(89))
     * ; Calling with no parameters gets all 
     * ; remaining characters from the file
     * MsgBox(fileobj.read())
     * ; Reset the file pointer to the beginning.
     * fileobj.pos := 0
     * ; Passing unset as the parameter also
     * ; retrieves all characters.
     * MsgBox(fileobj.read(unset))
     * ; When finished with a file, always close it.
     * fileobj.Close()
     */
    Read([NumberOfCharacters:=unset]) => String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadChar()`}  
     * Reads an 8-bit (1-byte) char from the file and advances the file pointer.  
     * Signed char range: `0` - `255`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Char, the missing bytes are assumed to be zero.  
     * @example <caption>Getting an 8-bit signed integer from the start of a file.</caption>  
     * ; A Char value to save.
     * orig_num := 100
     * ; Create a buffer and put a number in it.
     * buff := Buffer(1)
     * NumPut('Char', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first char of the file.
     * num := fileobj.ReadChar()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadChar() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadDouble()`}  
     * Reads a 64-bit (8-byte) floating point number from the file and advances the file pointer.  
     * Double range: `1.7E-308` to `1.7E+308`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Double, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 64-bit floating point number from the start of a file.</caption>  
     * ; A Double value to save.
     * orig_num := 1.1234567890123456789
     * ; Create a buffer and put a number in it.
     * buff := Buffer(8)
     * NumPut('Double', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first double of the file.
     * num := fileobj.ReadDouble()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadDouble() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadFloat()`}  
     * Reads a 32-bit (4-byte) floating point number from the file and advances the file pointer.  
     * Float range: `1.2E-38` to `3.4E+38`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Float, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 32-bit floating point number from the start of a file.</caption>  
     * ; A float value to save.
     * orig_num := 5.1234567890123
     * ; Create a buffer and put a number in it.
     * buff := Buffer(4)
     * NumPut('Float', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first float of the file.
     * num := fileobj.ReadFloat()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadFloat() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadInt()`}  
     * Reads a 32-bit (4-byte) integer from the file and advances the file pointer.  
     * Integer range: `0` to `4,294,967,295`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Int, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 32-bit signed integer from the start of a file.</caption>  
     * ; A signed integer to save.
     * orig_num := -9999
     * ; Create a buffer and put a number in it.
     * buff := Buffer(4)
     * NumPut('Int', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first signed integer of the file.
     * num := fileobj.ReadInt()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadInt() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadInt64()`}  
     * Reads a 64-bit (8-byte) integer from the file and advances the file pointer.  
     * Signed integer 64 range: `-9,223,372,036,854,775,808` to `9,223,372,036,854,775,807`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Int64, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 64-bit integer from the start of a file.</caption>  
     * ; Pick a 64-bit integer to save.
     * ; This is 1.2 quintillion.
     * orig_num := 1234567890123456789
     * ; Create a buffer and put a number in it.
     * buff := Buffer(8)
     * NumPut('Int64', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first signed 64 bit integer of the file.
     * num := fileobj.ReadInt64()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num
     *     '`n`nIf that was dllars and you wanted to spend '
     *     'it all, you would need to spend $391,000,000 '
     *     'every second for 100 years straight.')
     */
    ReadInt64() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadLine|`ReadLine()`}  
     * Reads a line of text from the file and advances the file pointer.  
     * A max of 65,534 characters per line can be read in at a time and subsequent calls to ReadLine() will get the remaining characters.  
     * @returns {(String)}  
     * Next line of text from the file excluding the end character.  
     * @example <caption>Reading individual lines of script.</caption>  
     * ; Open the current running script as a file
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * ; Show each individual line until end of file is reached.
     * while !fileobj.AtEOF
     *     MsgBox(fileobj.ReadLine())
     * ; When finished with a file, always close it.
     * fileobj.Close()
     */
    ReadLine() => String
        
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadShort()`}  
     * Reads a 16-bit (2-byte) short integer from the file and advances the file pointer.  
     * Signed short range: `-32,768` to `32,767`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of Short, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 16-bit signed integer from the start of a file.</caption>  
     * ; A signed Short value to save.
     * orig_num := 32000
     * ; Create a buffer and put a number in it.
     * buff := Buffer(2)
     * NumPut('Short', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first signed Short of the file.
     * num := fileobj.ReadShort()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadShort() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadUChar()`}  
     * Reads an 8-bit (1-byte) unsigned char from the file and advances the file pointer.  
     * Unsigned char range: `-128` - `127`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of UChar, the missing bytes are assumed to be zero.  
     * @example <caption>Getting an 8-bit unsigned integer from the start of a file.</caption>  
     * ; A Char value to save.
     * orig_num := 255
     * ; Create a buffer and put a number in it.
     * buff := Buffer(1)
     * NumPut('UChar', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first unsigned char of the file.
     * num := fileobj.ReadUChar()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadUChar() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadUInt()`}  
     * Reads a 32-bit (4-byte) unsigned integer from the file and advances the file pointer.  
     * Unsigned integer range: `-2,147,483,648` to `2,147,483,647`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of UInt, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 32-bit unsigned integer from the start of a file.</caption>  
     * ; An unsigned integer to save.
     * orig_num := 420
     * ; Create a buffer and put a number in it.
     * buff := Buffer(4)
     * NumPut('UInt', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first UInt of the file.
     * num := fileobj.ReadUInt()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadUInt() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#ReadNum|`ReadUShort()`}  
     * Reads a 16-bit (2-byte) unsigned short integer from the file and advances the file pointer.  
     * Unsigned short range: `0` to `65,535`
     * @returns {(Primitive)}  
     * On success, returns number, otherwise returns an empty string.  
     * If the number of bytes read is non-zero but less than the size of UShort, the missing bytes are assumed to be zero.  
     * @example <caption>Getting a 16-bit unsigned integer from the start of a file.</caption>  
     * ; An unsigned Short value to save.
     * orig_num := 64000
     * ; Create a buffer and put a number in it.
     * buff := Buffer(2)
     * NumPut('UShort', orig_num, buff)
     * ; Path to write binary data to.
     * file_path := A_ScriptDir '\FileObjectExample.bin'
     * ; Delete old file if it exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Now create a file and write the binary number to it.
     * FileAppend(buff, file_path, 'Raw')
     * ; Now open the file up as a File object.
     * fileobj := FileOpen(file_path, 'r')
     * ; And get the first unsigned short of the file.
     * num := fileobj.ReadUShort()
     * ; When finished with a file, always close it.
     * fileobj.Close()
     * ; Clean up. No need to keep the test file.
     * FileDelete(file_path)
     * ; Show original and retrieved numbers.
     * MsgBox('original number: ' orig_num
     *     '`nnumber from file: ' num)
     */
    ReadUShort() => Primitive
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Seek|`Seek()`}  
     * Moves the file pointer.  
     * @param {(Integer)} Distance  
     * Distance to move, in bytes.  
     * @param {(Integer)} [Origin]  
     * Starting point for the file pointer move. Must be one of the following:
     * - `0` (SEEK_SET) = Beginning of the file. Distance must be zero or greater.  
     * - `1` (SEEK_CUR) = Current position of the file pointer.  
     * - `2` (SEEK_END) = End of the file. Distance should usually be negative.  
     * If omitted:  
     *   `0` is used if `Distance` is positive.  
     *   `2` is used if `Distance` is negative.  
     * @returns {(Boolean)}  
     * - `1` = Seek successful.
     * - `0` = Seek failed.
     * @example <caption></caption>
     * ; Open the current script's text.
     * fileobj := FileOpen(A_ScriptFullPath, 'r')
     * ; Move pointer 79 bytes into the file.  
     * fileobj.Seek(79, 1)
     * ; Show the current line.
     * MsgBox(fileobj.ReadLine())
     * ; Always close your files when done.
     * fileobj.Close()
     */
    Seek(Distance [,Origin:=0]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#Write|`Write()`}  
     * Writes a string of characters to the file and advances the file pointer.  
     * @param {(String)} String  
     * The string of characters to write.  
     * @returns {(Integer)}  
     * Number of bytes that were written to file.  
     * Not to be confused with number of characters.  
     * @example <caption>Create a text file and write to it.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.txt'
     * ; Open as write to create new file.
     * fileobj := FileOpen(file_path, 'w')
     * ; Write text to file and record bytes written.
     * bytes_written := fileobj.write('hello world')
     * ; Always close your files when done.
     * fileobj.Close()
     * msg := bytes_written ' bytes were written to the file.'
     *     . '`nDo you want to open the file?'
     * if (MsgBox(msg,, 0x4) = 'Yes')
     *     Run(file_path)
     */
    Write(String) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteChar()`}  
     * Writes an 8-bit (1-byte) char to the file and advances the file pointer.  
     * Signed char range: `0` - `255`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing an 8-bit integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Char to write
     * orig_number := 42
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteChar(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadChar())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteChar(Number) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteDouble()`}  
     * Writes a 64-bit (8-byte) floating point number to the file and advances the file pointer.  
     * Double range: `1.7E-308` to `1.7E+308`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 64-bit floating point number to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Double to write
     * orig_number := 1.987659876598765
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteDouble(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadDouble())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteDouble(Float) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteFloat()`}  
     * Writes a 32-bit (4-byte) floating point number to the file and advances the file pointer.  
     * Float range: `1.2E-38` to `3.4E+38`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 32-bit floating point number to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Float to write
     * orig_number := 5.1234567890123
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteFloat(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadFloat())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteFloat(Float) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteInt()`}  
     * Writes a 32-bit (4-byte) integer to the file and advances the file pointer.  
     * Integer range: `0` to `4,294,967,295`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 32-bit integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Integer to write
     * orig_number := 9999
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteInt(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadInt())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteInt(Integer) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteInt64()`}  
     * Writes a 64-bit (8-byte) integer to the file and advances the file pointer.  
     * Signed integer 64 range: `-9,223,372,036,854,775,808` to `9,223,372,036,854,775,807`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 64-bit integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Integer 64 to write
     * orig_number := 1234567890123456789
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteInt(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadInt64())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteInt64(Integer) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteLine|`WriteLine()`}  
     * Writes a string of characters followed by a new line `` `n `` or carriage return+new line `` `r`n ``.  
     * The {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm#EOL_options|EOL FileOpen() option} determines the character used at the end of each line.  
     * The file pointer is advanced to the next byte after the text written.  
     * @param {(String)} [Text]  
     * The string to write.  
     * If no parameter is passed, an empty line is inserted.  
     * @returns {(Integer)}  
     * Number of **bytes** that were written to file.  
     * Note: This is not characters written.  
     * @example <caption>Writing individual lines to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.txt'
     * ; Create a new file by opening as write
     * fileobj := FileOpen(file_path, 'w')
     * ; Write a few lines of text to the file
     * fileobj.WriteLine('Hello, world!')
     * fileobj.WriteLine('Line 2')
     * fileobj.WriteLine('One last line.')
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Run the file to open it
     * Run(file_path)
     */
    WriteLine([Text:='']) => Integer

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteShort()`}  
     * Writes a 16-bit (2-byte) short integer to the file and advances the file pointer.  
     * Signed short range: `-32,768` to `32,767`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 16-bit integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Short number to write
     * orig_number := 32000
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteShort(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadShort())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteShort(Number) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteUChar()`}  
     * Writes an 8-bit (1-byte) unsigned char to the file and advances the file pointer.  
     * Unsigned char range: `-128` - `127`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing an 8-bit unsigned integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Unsigned char to write
     * orig_num := 255
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteUChar(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadUChar())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteUChar(Number) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteUInt()`}  
     * Writes a 32-bit (4-byte) unsigned integer to the file and advances the file pointer.  
     * Unsigned integer range: `-2,147,483,648` to `2,147,483,647`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 32-bit unsigned integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Unsigned intger to write
     * orig_num := 420
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteUInt(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadUInt())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteUInt(Integer) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/File.htm#WriteNum|`WriteUShort()`}  
     * Writes a 16-bit (2-byte) unsigned short integer to the file and advances the file pointer.  
     * Unsigned short range: `0` to `65,535`
     * @returns {(Integer)}  
     * Returns the number of bytes that were written.  
     * @example <caption>Reading and writing a 16-bit unsigned integer to file.</caption>  
     * ; Path for test file.
     * file_path := A_ScriptDir '\testfile.bin'
     * ; Remove file if it already exists.
     * if FileExist(file_path)
     *     FileDelete(file_path)
     * ; Open file as read-write.
     * fileobj := FileOpen(file_path, 'rw')
     * ; Unsigned intger to write
     * orig_num := 420
     * ; Write number to the file and save
     * ; how many bytes were written.
     * bytes := fileobj.WriteUInt(orig_number)
     * ; Move file pointer back to start
     * ; to read the value just written.
     * fileobj.Seek(0, 0)
     * MsgBox('Bytes written: ' bytes
     *     '`nOriginal number: ' orig_number
     *     '`nValue from file: ' fileobj.ReadUInt())
     * ; Always close your files when done.
     * fileobj.Close()
     * ; Clean up/Delete example file.
     * FileDelete(file_path)
     */
    WriteUShort(Number) => Integer
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm|`Func`}  
 * Represents a user-defined or built-in function.  
 * The Closure class extends Func but does not define any new properties.  
 * @property {(String)} Name - Returns the function's name.
 * @property {(Integer)} IsBuiltIn - Returns 1 (true) if the function is a native AHK function, otherwise 0 (false).
 * @property {(Integer)} IsVariadic - Returns 1 (true) if the function is variadic, otherwise 0 (false).
 * @property {(Integer)} MinParams - Returns the number of required parameters.
 * @property {(Integer)} MaxParams - Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function.
 */
class Func extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#Name|`Name`}  
     * Returns the function's name.  
     * @type String
     * @example <caption>Get a function's name from a reference.</caption>  
     * func_reference := MsgBox()
     * MsgBox('Original function name of the reference:'
     *     '`n' func_reference.Name)
     */
    Name: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#IsBuiltIn|`IsBuiltIn`}  
     * Is set to 1 if the function is a native, built-in AHK function.  
     * Otherwise it is set to 0.  
     * @type Integer
     * @example <caption>How to check if a function is provided natively by AHK.</caption>  
     * MsgBox('Is MsgBox() built-in: ' MsgBox.IsBuiltIn
     *     '`nIs my_func() built-in: ' my_func.IsBuiltIn)
     * 
     * my_func() {
     * }
     */
    IsBuiltIn: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#IsVariadic|`IsVariadic`}  
     * Set to `1` if the function is {@link https://www.autohotkey.com/docs/v2/Functions.htm#Variadic|variadic*}.  
     * Otherwise, it's set to `0`.  
     * Only the last parameter of a function can be marked as variadic.
     * @type Integer
     * @example <caption>Check if the last parameter is variadic.</caption>  
     * if my_func.IsVariadic
     *     MsgBox('The last parameter of this function is variadic.')
     *  
     * my_func(mandatory, optional:='default', variadic*) {
     *     return
     * }
     */
    IsVariadic: Number
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MinParams|`MinParams`}  
     * Returns the number of required parameters.  
     * Optional and variadic parameters are not included.
     * @type Number
     * @example <caption>Checking all parameters of a function.</caption>  
     * MsgBox('The ' my_func.Name ' function has ' (my_func.MaxParams + my_func.IsVariadic) ' parameters.'
     *     '`nRequired parameters: ' my_func.MinParams
     *     '`nOptional parameters: ' (my_func.MaxParams - my_func.MinParams)
     *     '`nLast parameter is variadic: ' (my_func.IsVariadic ? 'True' : 'False')
     * )
     * 
     * my_func(mandatory1, mandatory2, opt1:='default', opt2:=0, variadic*) {
     *     return
     * }
     */
    MinParams: Number
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MaxParams|`MaxParams`}  
     * Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function.  
     * If the function is {@link https://www.autohotkey.com/docs/v2/Functions.htm#Variadic|variadic*}, the returned number indicates the maximum amount of parameters which can be accepted by the function without overflowing into the "variadic*" parameter.  
     * @type Integer
     * @example <caption>Checking all parameters of a function.</caption>  
     * MsgBox('The ' my_func.Name ' function has ' (my_func.MaxParams + my_func.IsVariadic) ' parameters.'
     *     '`nRequired parameters: ' my_func.MinParams
     *     '`nOptional parameters: ' (my_func.MaxParams - my_func.MinParams)
     *     '`nLast parameter is variadic: ' (my_func.IsVariadic ? 'True' : 'False')
     * )
     * 
     * my_func(mandatory1, mandatory2, opt1:='default', opt2:=0, variadic*) {
     *     return
     * }
     */
    MaxParams: Integer

    /**
     * {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#Call|Call()} calls the function.  
     * @param {(Any)} [Params]  
     * Any amount of parameters.  
     * Each parameter must be separated by a comma.  
     * @returns {(Any)}  
     * Return values, if any, are defined within each function.  
     * An empty string is always returned if no return value is explicitly provided.
     */
    Call([Params*]) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#Bind|`Bind()`}  
     * Binds parameters to the function and returns a {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc object}.  
     * This and {@link https://www.autohotkey.com/docs/v2/lib/ObjBindMethod.htm|ObjBindMethod()} are the two ways to create boundfuncs.
     * @param {(Any)} [Param1]  
     * Provide a predefined value for the first param of the function.  
     * @param {(Any)} [ParamN]  
     * Any amount of additional parameters to bind.  
     * Any parameter can be skipped, leaving that parameter empty.  
     * A value can be provided later during the boundfunc Call().
     * Parameter slots can be skipped to pass values onto other parameters.  
     * @returns {(BoundFunc object)}
     * @example <caption>Examples of creating BoundFuncs using a function's .Bind() method.</caption>  
     * ; Binding a parameter and calling the boundfunc
     * hello := MsgBox.Bind('Hello, world!', 'Oh, hi!')
     * hello()
     * 
     * ;====================
     * ; Creating a boundfunc to use as a callback.  
     * ; Things like SetTimer need boundfuncs if you want to  
     * ; call a function with predefined parameters:
     * farewell := MsgBox.Bind('Goodbye, world.', 'Bye-bye!')
     * SetTimer(farewell, -3000)
     * 
     * ;====================
     * ; Example of a spam clicker that uses a boundfunc
     * ; Create a ctrl+space hotkey for the spam clicker
     * *^Space::spam_click('Space')
     * 
     * ; Function to handle spam clicking
     * spam_click(hold_key) {
     *     ; If the hold key isn't being physically held
     *     if !GetKeyState(hold_key, 'P')
     *         ; Return from function/go no further
     *         ; This stops the spam click looping
     *         return
     *     ; Otherwise click mouse
     *     Click()
     *     ; Create a callback (boundfunc)
     *     callback := spam_click.Bind(hold_key)
     *     ; And set a timer to run the callback one time in 50ms
     *     SetTimer(callback, -50)
     * }
     */
    Bind([Param1, ParamN*]) => BoundFunc
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#IsByRef|`IsByRef()`}  
     * Determines whether a parameter is ByRef.  
     * ByRef means a {@link https://www.autohotkey.com/docs/v2/Concepts.htm#variable-references|VarRef (Variable Reference)} is expected.  
     * Normally, when a variable is passed to a function, a copy of the variable is sent, not the variable itself.  
     * When passed as a VarRef (or By Reference), the actual variable is passed in and can be permanent altered by the function.  
     * This only applies to variables. Objects are ALWAYS passed ByRef and do not need to be declared as such.
     * @param {(Integer)} [ParamIndex]  
     * The index number of the parameter check.  
     * Parameters are numbered starting at 1.  
     * If ParamIndex is omitted, all parameters are checked for ByRef status.  
     * @returns {(Boolean)}  
     * If `ParamIndex` is omitted:  
     * - `1` = Function contains at least one ByRef parameter.
     * - `0` = Function has no ByRef parameters.
     * If `ParamIndex` is provided:  
     * - `1` = The specified parameter is ByRef.  
     * - `0` = The specified parameter is not ByRef.  
     * @throws IndexError - ParamIndex is out of range.  
     * @example <caption>Checking for parameters that are "By Reference"</caption>  
     * ; Create two vars.
     * var1 := 'Original Data'
     * var2 := 'Original Data'
     * ; Pass them into the function.
     * my_func(var1, &var2)
     * 
     * ; Contents for the var2 was changed
     * ; because it was sent by reference.
     * MsgBox('Does my_func have any ByRef parameters: ' my_func.IsByRef()
     *     '`nIs param 1 ByRef: ' my_func.IsByRef(1)
     *     '`nIs param 2 ByRef: ' my_func.IsByRef(2)
     *     '`n`nVar contents after function run: '
     *     '`nvar1 (normal): ' var1
     *     '`nvar2 (ByRef): ' var2)
     * 
     * ; A function that changes both parameters.
     * ; v_copy is a normal parameter.
     * ; It receives a reference to a copy of var1.
     * ; v_reference is a VarRef parameter.
     * ; It recieves a direct reference to var2.
     * my_func(v_copy, &v_reference) {
     *     ; Change both values
     *     v_copy := 'Changed by function!'
     *     v_reference := 'Changed by function!'
     * }
     */
    IsByRef([ParamIndex:=unset]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#IsOptional|`IsOptional()`}  
     * Determines whether a parameter is optional.  
     * Parameters with pre-assigned values and variadic parameters are both optional.  
     * @param {(Integer)} [ParamIndex]  
     * The index number of the parameter check.  
     * Parameters are numbered starting at 1.  
     * If ParamIndex is omitted, all parameters are checked for optional status.  
     * @returns {(Boolean)}  
     * If `ParamIndex` is omitted:  
     * - `1` = Function contains at least one optional parameter.
     * - `0` = Function has no optional parameters.
     * If `ParamIndex` is provided:  
     * - `1` = The specified parameter is optional and can be omitted.  
     * - `0` = The specified parameter is required.  

     * 1 if parameter is Optional, otherwise 0.  
     * @throws IndexError - ParamIndex is out of range.  
     * @example <caption>Checking for optional parameters.</caption>  
     * MsgBox('Does my_func have any optional parameters: ' my_func.IsOptional()
     *     '`nIs param 1 optional: ' my_func.IsOptional(1)
     *     '`nIs param 2 (predefined) optional: ' my_func.IsOptional(2)
     *     '`nIs param 3 (variadic) optional: ' my_func.IsOptional(3))
     * 
     * my_func(required, predefined:=1, variadic*) {
     * }
     */
    IsOptional([ParamIndex:=unset]) => Integer
}  

/**
 * @description {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|`BoundFunc Object`}  
 * Created a callable function with predefined parameters.  
 * It's a function with data that's already "bound" to some parameters.  
 * BoundFunc objects can be created in two ways:  
 * - Using a function's {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#Bind|Bind()} method.  
 *   Creates a function boundfunc.
 * - Using the {@link https://www.autohotkey.com/docs/v2/lib/ObjBindMethod.htm|ObjBindMethod()} function.  
 *   Creates a method boundfunc.  
 * To skip a parameter, leave that bind slot (index) blank. See example.  
 * 
 * A list of functions/methods that can utilize boundfuncs: 
 * - {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|HotIf()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|OnClipboardChange()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|SetTimer()}
 * - {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Add|Menu.Add()}
 * - {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm|RegEx callouts}
 * - {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm|Sort}
 * - {@link https://www.autohotkey.com/docs/v2/lib/For.htm|For-loops}
 * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|Gui events}
 * @example <caption>Function and method boundfunc examples.</caption>  
 * ; Example of a spam clicker that uses a function boundfunc
 * ; Create a ctrl+space hotkey for the spam clicker
 * *^Space::spam_click('Space')
 * 
 * ; Function to handle spam clicking
 * spam_click(hold_key) {
 *     ; If the hold key isn't being physically held
 *     if !GetKeyState(hold_key, 'P')
 *         ; Return from function/go no further
 *         ; This stops the spam click looping
 *         return
 *     ; Otherwise click mouse
 *     Click()
 *     ; Create a callback (boundfunc)
 *     callback := spam_click.Bind(hold_key)
 *     ; And set a timer to run the callback one time in 50ms
 *     SetTimer(callback, -50)
 * }
 * 
 * ;====================
 * ; Example of a spam clicker that uses a method boundfunc
 * ; Create a ctrl+space hotkey for the spam clicker
 * *^Space::spammer.run('Space')
 * 
 * class spammer {
 *     static run(hold_key) {
 *         ; If the hold key isn't being physically held
 *         if !GetKeyState(hold_key, 'P')
 *             ; Return from function/go no further
 *             ; This stops the spam click looping
 *             return
 *         ; Otherwise click mouse
 *         Click()
 *         ; Create a boundfunc for this method.  
 *         ; An object and the method name must be provided.
 *         ; Any parameters to bind can be included after.
 *         callback := ObjBindMethod(this, 'run', hold_key)
 *         ; And set a timer to run the callback one time in 50ms
 *         SetTimer(callback, -50)
 *     }
 * }
 */
class BoundFunc extends Func {
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Functions.htm#closures|`Closure`}  
 * Closures are nested functions that are bound to a set of free variables.  
 * Free variables are function variables oustide the closure that the closure can still access.  
 * To create a closure, simply define a nested function and have the neseted function reference a variable from the outer function.  
 * @example <caption>Demonstrating closure vs static nesetd functions.</caption>  
 * example()
 * 
 * example() {
 *     ; This variable can be accessed by a
 *     ; closure but not by a static function.
 *     x := 'Outer function text'
 *     ; Test both.
 *     closure_fn()
 *     static_fn()
 *     not_a_closure()
 *     ; Showing each function's type as AHK sees it:
 *     MsgBox('closure_fn: ' Type(closure_fn)
 *         '`nstatic_fn: ' Type(static_fn)
 *         '`nnot_a_closure: ' Type(not_a_closure))
 *     return
 *     
 *     ; This is a closure because it's not static and 
 *     ; because it references a variable from example().
 *     closure_fn() {
 *         MsgBox('A closure function has access to '
 *             '`nthe outer function variables.'
 *             '`nx from example() is set to: ' x)
 *     }
 *     
 *     static static_fn() {
 *         MsgBox('Unlike a closure, static functions '
 *             'cannot access variables from the function '
 *             'they are neseted in.'
 *             '`nTrying to access x throws an error.')
 *         try
 *             MsgBox(x)
 *         catch
 *             MsgBox('ERROR!!'
 *                 '`nx cannot be accessed'
 *                 '`n`nStatic functions cannot access variables '
 *                 'outside of their body.')
 *     }
 *     
 *     not_a_closure() {
 *         MsgBox('Because not_a_closure() does not reference '
 *             'any variables from the outer function, it is '
 *             'not considered a closure function. '
 *             '`nInstead, it is considered a static function '
 *             'even though it was not declared as static.')
 *     }
 * }
 */
class Closure extends Func {
    
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|`Enumerator`}  
 * A type of {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} called to enumerate through each value of an object.  
 * They are primarily used by {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loops} and are not usually called directly.  
 * @example <caption>Different ways to use enumerators</caption>  
 * arr := ['a', 'b', 'c']
 * 
 * ; Enumerator that only returns the value of each element
 * enum := arr.__Enum(1)
 * for value in enum
 *     MsgBox('for-loop`nvalue only: ' value)
 * 
 * ; Enumerator that returns the index and value of each element
 * enum := arr.__Enum(2)
 * for index, value in enum
 *     MsgBox('for-loop`nindex: ' index '`nvalue: ' value)
 * 
 * ; Using an enumerator with a while-loop
 * enum := arr.__Enum()
 * while enum(&index, &value)
 *     MsgBox('while-loop`nindex: ' index '`nvalue: ' value)
 */
class Enumerator extends Func {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm#Call|`Enumerator()`}  
     * A type of {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} which is called repeatedly to enumerate a sequence of values.
     * @param {(VarRef)} OutputVar1  
     * Variable reference to receive a value dependent on the type of enumerator:  
     * - `__Enum(1)` = OutputVar1 receives the value of each element.  
     * - `__Enum(2)` = OutputVar1 receives the value identifier (key/index/etc) of each element.  
     * @param {(VarRef)} [OutputVar2To19]  
     * Variable reference to receive a value dependent on the type of enumerator:  
     * - `__Enum(1)` = OutputVar2 receives nothing and must be omitted.  
     * - `__Enum(2)` = OutputVar2 receives the value of each element.  
     * 
     * A custom enumerator can handle up to 19 OutputVars, as that's the max a for-loop can utilize.
     * @returns {(Boolean)}  
     * - `1` = The next value was successfully gotten.  
     * - `0` = No more values to enumerate.  
     * @example <caption>Different ways to use enumerators</caption>  
     * arr := ['a', 'b', 'c']
     * 
     * ; Enumerator that only returns the value of each element
     * enum := arr.__Enum(1)
     * for value in enum
     *     MsgBox('for-loop`nvalue only: ' value)
     * 
     * ; Enumerator that returns the index and value of each element
     * enum := arr.__Enum(2)
     * for index, value in enum
     *     MsgBox('for-loop`nindex: ' index '`nvalue: ' value)
     * 
     * ; Using an enumerator with a while-loop
     * enum := arr.__Enum()
     * while enum(&index, &value)
     *     MsgBox('while-loop`nindex: ' index '`nvalue: ' value)
     * 
     * ;=======================
     * ; Creating a class with a customized enumerator.
     * ; This will allow the class to be passed to a for-loop.
     * ; Unlike normal enumerators, this one uses 3 parameters.
     * ; See the for-loop example below the class.
     * class test_class {
     *     ; Define some properties to iterate through.
     *     static Name := 'GroggyOtter'
     *     static Age := 100
     *     static URL := 'www.reddit.com/r/AutoHotkey'
     *     static SSN := 123456789
     *     
     *     ; A for-loop always looks for an __Enum() method.
     *     ; If it finds it
     *     static __Enum(num_of_vars) {
     *         ; Normally, AHK's built-in enumerators only
     *         ; use 1-2 parameters.  
     *         ; However, we're going to enforce 3 parameters
     *         if (num_of_vars != 3)
     *             throw(Error('3 parameters must be provided.'
     *                 , A_ThisFunc
     *                 , 'for key, value, value_type in test_class'))
     *         
     *         ; Make a call descriptor object. The assigned
     *         ; function will be called by the for-loop.
     *         enum := {call:get_next_prop}
     *         
     *         ; Make a list of properties to include.
     *         ; We skip SSN because we don't want it to 
     *         ; show up while iterating through test_class.
     *         ; If propreties are listed in reverse order, 
     *         ; .Pop() can be used, which is faster than .RemoveAt(1).
     *         enum.list := ['URL', 'Age', 'Name']
     *         ; And we need a reference to the
     *         ; class so we can get the values
     *         enum.class := this
     *         
     *         ; Return the enumerator to the for-loop.
     *         ; It can use it to loop through each specified item.
     *         return enum
     *         
     *         ; The function that gets called each 
     *         ; iteration of the for-loop
     *         ; Normally, only 1-2 parameters are used.
     *         ; A For-loop can handle up to 19 VarRefs
     *         ; This example shows how to use three.
     *         get_next_prop(this, &prop, &value, &v_type) {
     *             ; When there are no properties left
     *             if (this.list.Length < 1)
     *                 ; Return false to indicate none left
     *                 return 0
     *             ; Get next property name
     *             prop := this.list.Pop()
     *             ; And its value
     *             value := this.class.%prop%
     *             ; And its type
     *             v_type := Type(value)
     *         }
     *     }
     * }
     * 
     * ; For-looping through test_class
     * ; Notice it uses 3 parameter values
     * ; key, value, and value type
     * for key, value, value_type in test_class
     *     MsgBox('Property: ' key
     *         '`nValue: ' value
     *         '`nType: ' value_type)
     */
    Call(&OutputVar1 [,&OutputVar2To19*]) => Integer
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|`GUI`}  
 * A GUI is a Graphical User Interface.  
 * These provide the ability to create and manage custom windows and controls.  
 * Such windows can be used for a multitude of things, including data entry, hotkey creation, file trees, calanders, or any other imagineable custom user interface.  
 * Gui objects are created by calling the GUI class.  
 * @property {(Integer)} BackColor - Retrieves or sets the background color of the window.
 * @property {(GuiCtrl)} FocusedCtrl - Retrieves the GuiControl object of the window's focused control.
 * @property {(Integer)} Hwnd - Retrieves the window handle (HWND) of the window.
 * @property {(Integer)} MarginX - Retrieves or sets the horizontal padding between controls or the sides of the GUI.
 * @property {(Integer)} MarginY - Retrieves or sets the vertical padding between controls or the sides of the GUI.
 * @property {(MenuBar)} MenuBar - Retrieves or sets the window's menu bar.
 * @property {(String)} Name - Retrieves or sets a custom name for the window.
 * @property {(String)} Title - Retrieves or sets the window's title.
 * @property {(GuiCtrl)} __Item - Retrieves the GuiControl object associated with the specified name, text, ClassNN or HWND.
 * @example <caption>Gui with many common controls added.</caption>
 * make_gui()
 * 
 * make_gui() {
 *     ; Create a new GUI.
 *     goo := Gui()
 *     ; Make the background color black.
 *     goo.BackColor := 0x0
 *     ; Set a new title.
 *     goo.Title := "Custom GUI"
 *     ; Set the margins (spacing) between controls.
 *     ; This applies whenever an x or y position isn't provided.
 *     goo.MarginX := goo.MarginY := 15
 *     ; Set the default font color be used.
 *     goo.SetFont('cWhite')
 *     ; Close script if GUI is closed.
 *     ; Fat-arrow functions can be used
 *     ; instead of function references.
 *     goo.OnEvent('Close', (*) => ExitApp())
 *     
 *     ; Add ability to make GUI always on top.
 *     con := goo.AddCheckbox('xm', 'Always On Top')
 *     con.OnEvent('Click', toggle_aot)
 *     
 *     ; Make a dark/light mode toggle.
 *     goo.AddGroupBox('xm y+m h75 Section', 'Choose Scheme:')
 *     con := goo.AddRadio('xs+15 ys+20 vDark Checked', 'Dark Mode')
 *     con.OnEvent('Click', scheme_update)
 *     con := goo.AddRadio('xs+15 y+m vLight', 'Light Mode')
 *     con.OnEvent('Click', scheme_update)
 *     
 *     ; Create a transparency slider.
 *     con := goo.AddText('xm ys+85 vtrans_percent', 'Transparency: 100%')
 *     ; Identifier of opaqaue side.
 *     goo.AddText('xm y+5', 'Opaque')
 *     ; Slider for adjusting transparency.
 *     con := goo.AddSlider('x+5 h20 Range20-255 AltSubmit Invert vslider', 255)
 *     ; Set the function to call when the slider is changed.  
 *     con.OnEvent('Change', adjust_transparency)
 *     ; Identifier of clear/transparent side.
 *     goo.AddText('x+5', 'Clear')
 *     
 *     ; Add a control for setting a hotkey
 *     ; that launches calcuator.
 *     goo.AddText('xm y+m', 'Set hotkey to launch Calculator')
 *     con := goo.AddHotkey('xm y+0')
 *     con.OnEvent('Change', update_calc_hotkey)
 *     
 *     ; Create a button to exit script.
 *     con := goo.AddButton('xm y+m', 'Exit Script')
 *     con.OnEvent('Click', (*) => ExitApp())
 *     
 *     ; Build a custom menubar for the gui
 *     ; Create a main bar to apply to the gui.
 *     bar := MenuBar()
 *     ; Create a menu to bring up.
 *     file_menu := Menu()
 *     ; We can use the AHK standard menu.
 *     file_menu.AddStandard()
 *     ; Apply the menu to the bar and give it a name.
 *     bar.Add('Main Menu', file_menu)
 *     ; Apply new menu bar to the gui.
 *     goo.MenuBar := bar
 *     
 *     goo.Show('w250')
 *     return
 *     
 *     toggle_aot(checkbox, Info) {
 *         ; If checked, apply AOT
 *         ; otherwise remove it.
 *         if checkbox.Value
 *             aot := '+AlwaysOnTop'
 *         else aot := '-AlwaysOnTop'
 *         ; Update AOT option.
 *         checkbox.Gui.Opt(aot)
 *     }
 *     
 *     scheme_update(radio, Info) {
 *         ; Set background and text color base
 *         ; on which radio button was pressed.
 *         switch radio.name {
 *             case 'Light': 
 *                 radio.Gui.BackColor := 0xE0E0E0
 *                 text_color := 'cBlack'
 *             case 'Dark':
 *                 radio.Gui.backcolor := 0x0
 *                 text_color := 'cWhite'
 *         }
 *         ; Loop through each control.
 *         for con in radio.Gui
 *             ; Apply white text
 *             ; Try is to prevent errors
 *             try con.SetFont(text_color)
 *         ; Focus slider then focus radio button.
 *         ; This forces slider background to update.
 *         radio.Gui['slider'].Focus()
 *         radio.Focus()
 *     }
 *     
 *     adjust_transparency(slider, Info) {
 *         ; Get value from slider.
 *         value := slider.value
 *         ; Apply transparency using slider number.
 *         WinSetTransparent(value, goo)
 *         ; Calculate current trans percentage 
 *         ; and apply to the trans_percent text control.
 *         value := Round(value/255*100) '%'
 *         slider.gui['trans_percent'].Text := 'Transparency: ' value
 *     }
 *     
 *     update_calc_hotkey(hk, Info) {
 *         static last_hk := ''
 *         ; Unregister the previous hotkey
 *         if (last_hk != '')
 *             Hotkey(last_hk, 'Off')
 *         last_hk := hk.Value
 *         Hotkey(hk.Value, run_calc)
 *         return
 *         
 *         run_calc() {
 *             exe := 'calc.exe'
 *             id := 'ahk_exe ' exe
 *             if WinExist(id)
 *                 WinActivate()
 *             else Run(exe)
 *         }
 *     }
 * }
 */
class Gui extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|Control}
     * This is the base object that all control objects are derived.  
     * It provides core properties and methods that all controls.  
     * @property {(String)} ClassNN - Retrieve the class name and sequence number (ClassNN) of the control.
     * @property {(Integer)} Enabled - Retrieve or set the interaction state of the control to enabled or disabled.  
     * @property {(Integer)} Focused - Retrieve the focus state of the control.
     * @property {(Gui)} Gui - Retrieve a reference to the GUI that owns the control.
     * @property {(Integer)} Hwnd - Retrieve the window handle (HWND) of the control.
     * @property {(String)} Name - Retrieve or set an identifying name for the control.
     * @property {(String)} Text - Retrieve or set the text, caption, other information of the control.  
     * This property varies depending on the control's type.
     * @property {(String)} Type - Retrieve the type of the control.
     * @property {(String)} Value - Retrieve or set the data of a value-capable control.  
     * This property varies depending on the control's type and not all controls utilize the value property.
     * @property {(Integer)} Visible - Retrieve or set the visible state of the control.
     */
    class Control extends Object {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|`ClassNN`}  
         * Retrieves the class name and sequence number (ClassNN) of the control.  
         * The `Class` is the type of control and the `NN` is the sequence number.  
         * `Edit2` would denote the second edit box that was added to a GUI.  
         * @type String
         * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetClassNN.htm|ControlGetClassNN}
         * @example <caption>Labeling all controls with their ClassNN.</caption>
         * ; Create a gui and add multiple controls.
         * goo := Gui()
         * goo.AddText()
         * goo.AddButton()
         * goo.AddEdit()
         * goo.AddCheckbox()
         * goo.AddText()
         * goo.AddRadio()
         * goo.AddRadio()
         * ; Loop through all controls.
         * for control in goo {
         *     ; Assign the ClassNN as the control's text.
         *     control.Text := control.ClassNN
         *     ; Increase width to accommodate new text.
         *     control.Move(,,100)
         * }
         * goo.Show('w200')
         */
        ClassNN: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Enabled|`Enabled`}  
         * Retrieve or set the interaction state of the control.  
         * By setting this, you can disable or enable the ability to interact with that control.  
         * - `1` = Control enabled  
         * - `0` = Control disabled  
         * 
         * For Tab controls, this will also enable or disable all of the tab's sub-controls.  
         * @type Integer
         * @example <caption>A checkbox that enables/disables another control.</caption>
         * goo := Gui()
         * ; Add a checkbox that toggles a button on/off
         * con := goo.AddCheckbox('xm ym Checked', 'Disable Button')
         * con.OnEvent('Click', toggle_disable)
         * ; Add the button to enable/disable
         * con := goo.AddButton('w100 vexit_btn +Disabled', 'Exit Script')
         * con.OnEvent('Click', (*) => ExitApp())
         * goo.Show()
         * 
         * ; Function that runs when checkbox is clicked
         * toggle_disable(checkbox, info) {
         *     ; Using the checkbox's GUI property, we have access
         *     ; to all other controls, including the exit button.
         *     button := checkbox.Gui['exit_btn']
         *     ; If checkbox is checked
         *     if checkbox.Value
         *         ; Enable button
         *         button.Enabled := 0
         *     ; Otherwise, disable button
         *     else button.Enabled := 1
         * }
         */
        Enabled: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Focused|`Focused`}  
         * Retrieves the focus state of the control.  
         * - `1` = Focused  
         * - `0` = Not focused  
         * 
         * To set focus on a control, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Focus|Focus()} method.
         * @type Integer
         */
        Focused: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Gui|`Gui`}  
         * Retrieves a reference to the control's parent {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUI object}.  
         * This gives every control direct access to the GUI that owns it as well as all other controls owned by the GUI.  
         * @type Gui
         * @example <caption>A checkbox that enables/disables another control.</caption>
         * goo := Gui()
         * ; Add a checkbox that toggles a button on/off
         * con := goo.AddCheckbox('xm ym Checked', 'Disable Button')
         * con.OnEvent('Click', toggle_disable)
         * ; Add the button to enable/disable
         * con := goo.AddButton('w100 vexit_btn +Disabled', 'Exit Script')
         * con.OnEvent('Click', (*) => ExitApp())
         * goo.Show()
         * 
         * ; Function that runs when checkbox is clicked
         * toggle_disable(checkbox, info) {
         *     ; Using the checkbox's GUI property, we have access
         *     ; to all other controls, including the exit button.
         *     button := checkbox.Gui['exit_btn']
         *     ; If checkbox is checked
         *     if checkbox.Value
         *         ; Enable button
         *         button.Enabled := 0
         *     ; Otherwise, disable button
         *     else button.Enabled := 1
         * }
         */
        Gui: Gui
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Hwnd|`Hwnd`}  
         * Retrieves the window handle (HWND) of the control.  
         * @see {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control parameter}
         * @type Integer
         */
        Hwnd: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|`Name`}  
         * Retrieves or sets the explicit name of the control.  
         * A control name can also be set by using the `v` (var) option:  
         * - Creating a control:  
         * 
         *       GuiObject.AddButton('vExitBtn', 'Exit')
         * - Add with the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|Opt()} method:  
         * 
         *       GuiControl.Opt('vExitBtn')
         * @type String
         */
        Name: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * Retrieves or sets the text/caption of the control.  
         * - Button, CheckBox, Edit, GroupBox, Link, Radio, Text:  
         *   The caption or display text of the control.  
         * - DateTime:  
         *   Get the current formatted text display or assign a new {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} date-time stamp date-time stamp.
         * - DropDownList, ComboBox, ListBox:  
         *   Text of the currently selected item.
         * - Tab:  
         *   Text of the currently selected Tab.
         * - Edit:  
         *   The text in the control.
         * - StatusBar:  
         *   The text of the first section.  
         * @type String
         */
        Text: String
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Type|`Type`}  
         * Retrieves the {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|type} of the control:  
         * |            |            |            |             |
         * | :---       | :---       | :---       | :---        |
         * | `ActiveX`  | `DateTime` | `ListView` | `Slider`    |
         * | `Button`   | `Edit`     | `MonthCal` | `StatusBar` |
         * | `CheckBox` | `GroupBox` | `Pic`      | `Tab`       |
         * | `ComboBox` | `Hotkey`   | `Picture`  | `Text`      |
         * | `Custom`   | `Link`     | `Progress` | `TreeView`  |
         * | `DDL`      | `ListBox`  | `Radio`    | `UpDown`    |
         * @type String
         */
        Type: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the contents of a value-capable control.  
         * If not value-capable, returns an empty string or errors if set.  
         * - ActiveX:  
         *   The ActiveX object of the control.  
         *   Assigning a new value is an error.  
         * - Checkbox, Radio:  
         *   Get/set current checked status: `1`, `0`, `-1`.  
         * - ComboBox, DropDownList, ListBox, Tab:  
         *   Position number of selected item.  
         * - DateTime/MonthCal:  
         *   Get or set a {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} date-time stamp.  
         * - Edit:  
         *   Text of control. Similar to the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|text} property.  
         * - Hotkey:  
         *   Text representing a hotkey.  
         * - Picture:  
         *   Filename of a picture.  
         * - Progress, Slider, UpDown:  
         *   Current position of the control.  
         * - Text:  
         *   The text of the control.  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|`Visible`}  
         * Retrieves the current visibility state of the control, or shows or hides it.  
         * @type Integer
         */
        Visible: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Focus|`Focus()`}  
         * Sets the keyboard focus to this control.  
         * To be effective, the window generally must not be minimized or hidden.  
         * To retrieve the focus state of the control, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Focused|Focused} property.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Focusing a specific control.</caption>  
         * goo := Gui()
         * goo.btn_exit := goo.AddButton('xm ym w100', 'Exit Script')
         * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
         * goo.btn_msg := goo.AddButton('xm w100', 'PopUp Msg')
         * goo.btn_msg.OnEvent('Click', (*) => MsgBox('Pop Up!'))
         * goo.btn_exit.Focus()
         * txt := 'Even though "PopUp Msg" was added last, the '
         *     . '`nFocused button was set to "' goo.FocusedCtrl.Text '"'
         * goo.AddText('xm', txt)
         * goo.Show('y200')
         */
        Focus() => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#GetPos|`GetPos()`}  
         * Retrieves the position and size of the control.  
         * Unlike {@link https://www.autohotkey.com/docs/v2/lib/ControlGetPos.htm|ControlGetPos()}, this method applies {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|DPI scaling} to the returned coordinates.  
         * @param {(VarRef)} [X]  
         * Variable reference to receive x coordinate of GUI control
         * @param {(VarRef)} [Y]  
         * Variable reference to receive y coordinate of GUI control
         * @param {(VarRef)} [Width]  
         * Variable reference to receive width of control
         * @param {(VarRef)} [Height]  
         * Variable reference to receive height of control
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Adjust button attributes using checkboxes.</caption>  
         * goo := Gui()
         * goo.MarginX := goo.MarginY := 10
         * goo.AddText('xm ym', 'Check boxes to change button:')
         * goo.cb_tall := goo.AddCheckbox('xm w100 h30 vTall', 'Make Tall')
         * goo.cb_tall.OnEvent('Click', check_events)
         * goo.cb_wide := goo.AddCheckbox('x+m w100 h30 vWide', 'Make Wide')
         * goo.cb_wide.OnEvent('Click', check_events)
         * goo.btn_exit := goo.AddButton('xm', 'ExitScript')
         * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
         * goo.Show('h150')
         * 
         * check_events(control, info) {
         *     control.gui.btn_exit.GetPos(,, &w, &h)
         *     switch control.name {
         *         case 'Tall':
         *             if (h > 30)
         *                 h := 30
         *             else h := 60
         *         case 'Wide': 
         *             if (w > 100)
         *                 w := 100
         *             else w := 200
         *     }
         *     control.gui.btn_exit.Move(,, w, h)
         * }
         */
        GetPos([&X, &Y, &Width, &Height]) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|`Move()`}  
         * Moves and/or resizes the control.  
         * Unlike {@link https://www.autohotkey.com/docs/v2/lib/ControlMove.htm|ControlMove()}, this method applies {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|DPI scaling} to the returned coordinates.  
         * @param {(Integer)} [X]  
         * New x coordinate.  
         * @param {(Integer)} [Y]  
         * New y coordinate.  
         * @param {(Integer)} [Width]  
         * New control width.  
         * @param {(Integer)} [Height]  
         * New control height.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Adjust button attributes using checkboxes.</caption>  
         * goo := Gui()
         * goo.MarginX := goo.MarginY := 10
         * goo.AddText('xm ym', 'Check boxes to change button:')
         * goo.cb_tall := goo.AddCheckbox('xm w100 h30 vTall', 'Make Tall')
         * goo.cb_tall.OnEvent('Click', check_events)
         * goo.cb_wide := goo.AddCheckbox('x+m w100 h30 vWide', 'Make Wide')
         * goo.cb_wide.OnEvent('Click', check_events)
         * goo.btn_exit := goo.AddButton('xm', 'ExitScript')
         * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
         * goo.Show('h150')
         * 
         * check_events(control, info) {
         *     control.gui.btn_exit.GetPos(,, &w, &h)
         *     switch control.name {
         *         case 'Tall':
         *             if (h > 30)
         *                 h := 30
         *             else h := 60
         *         case 'Wide': 
         *             if (w > 100)
         *                 w := 100
         *             else w := 200
         *     }
         *     control.gui.btn_exit.Move(,, w, h)
         * }
         */
        Move([X, Y, Width, Height]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#OnCommand|`OnCommand()`}  
         * Registers a function or method to be called when a control notification is received via the {@link https://learn.microsoft.com/windows/win32/menurc/wm-command|WM_COMMAND message}.  
         * @param {(Integer)} NotifyCode  
         * The control-defined notification code to monitor.  
         * @param {(String|FuncObj)} Callback  
         * The function, method, boundfunc, or object to call when the event is raised.  
         * If GUI uses an event sink, this can be a string with a method's name.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback. If omitted, parameter defaults to 1.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @see {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|WM - Window Messages} |
         * {@link https://www.autohotkey.com/docs/v2/lib/GuiOnCommand.htm|Gui.OnCommand()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent()}
         */
        OnCommand(NotifyCode, Callback [,AddRemove:=1]) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The control's value changes.  
         * 
         *       Ctrl_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The control is clicked.  
         * 
         *       Ctrl_Click(GuiCtrl, Info)
         *       Link_Click(GuiCtrl, Info, Href)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The control is double-clicked.  
         * 
         *       Ctrl_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ColClick|`ColClick`} - One of the ListView's column headers is clicked.  
         * 
         *       Ctrl_ColClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the control  
         *   or presses Menu or Shift+F10 while the control has the keyboard focus.  
         * 
         *       Ctrl_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The control gains the keyboard focus.  
         * 
         *       Ctrl_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The control loses the keyboard focus.  
         * 
         *       Ctrl_LoseFocus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemCheck|`ItemCheck`} - A ListView or TreeView item is checked or unchecked.  
         * 
         *       Ctrl_ItemCheck(GuiCtrl, Item, Checked)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemEdit|`ItemEdit`} - A ListView or TreeView item's label is edited by the user.  
         * 
         *       Ctrl_ItemEdit(GuiCtrl, Item)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemExpand|`ItemExpand`} - A TreeView item is expanded or collapsed.  
         * 
         *       Ctrl_ItemExpand(GuiCtrl, Item, Expanded)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemFocus|`ItemFocus`} - The focused item changes in a ListView.  
         * 
         *       Ctrl_ItemFocus(GuiCtrl, Item)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemSelect|`ItemSelect`} - A ListView or TreeView item is selected, or a ListView item is deselected.  
         * 
         *       ListView_ItemSelect(GuiCtrl, Item, Selected)
         *       TreeView_ItemSelect(GuiCtrl, Item)
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * If GUI uses an event sink, this can be a string with a method's name.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnNotify.htm|`OnNotify()`}  
         * Registers a function or method to be called when a control notification  
         * is received via the {@link https://learn.microsoft.com/windows/win32/controls/wm-notify|WM_NOTIFY} message.  
         * @param {(Integer)} NotifyCode  
         * The control-defined notification code to monitor.  
         * @param {(String|FuncObj)} Callback  
         * The function, method, boundfunc, or object to call when the event is raised.  
         * If GUI uses an event sink, this can be a string with a method's name.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * If omitted, parameter defaults to 1.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @see {@link https://www.autohotkey.com/docs/v2/lib/GuiOnNotify.htm|OnNotify()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent()}
         */
        OnNotify(NotifyCode, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * Sets various options to change a control's appearance or behaviors.  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *       GuiControl.Opt('+VMyControl')
         *       GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: Use control's alternate submit method.  
         *   DropDownList, ComboBox, ListBox, Tab: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit} uses selected item's position instead of its text.  
         *   ComboBox: If no item is selected, the text of the edit field is stored.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         *   The color option does not affect {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|buttons} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|status bars}.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|DateTime},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab2},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}
         * - `Right`: Right-justifies the control's text within its available width.  
         *   For {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox} and {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio Buttons}, this also moves the box from the left side to the right.  
         *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|DateTime},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Link|Link},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab2},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}
         * - `Center`: Centers the control's text within its available width.  
         *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
         *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text}
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS` and `YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *   This is enabled by default for almost all controls.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *   Note about {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|ListBoxes}: Horizontal scrolling width defaults to 3 times the ListBox's width.  
         *   To specify a different scrolling width, include a number immediately after the word HScroll.  
         *  
         * **Uncommon Styles and Options**
         * - `BackgroundTrans`: Uses a transparent background, which allows any control that lies behind  
         *   a Text, Picture, or GroupBox control to show through.  
         *   Use GuiCtrl.Opt("+Background") to remove this option later.  
         *   An error is thrown if a control type does not support this option.  
         *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *     Reset color to default.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Hiding and showing all GUI controls.</caption>  
         * goo := Gui()
         * goo.cb_hide := goo.AddCheckbox('xm ym vcb_hide', 'Hide All')
         * goo['cb_hide'].OnEvent('click', test)
         * loop 3
         *     goo.AddButton('xm w100 h25', 'Button' A_Index)
         *     ,goo.AddCheckbox('x+m w100 h25 +Border +Right', 'Checkbox' A_Index)
         * con := goo.AddButton('xm w210', 'Exit Script')
         * con.OnEvent('Click', (*) => ExitApp())
         * goo.show()
         * 
         * test(con, info) {
         *     if con.value
         *         option := '+Hidden'
         *     else option := '-Hidden'
         *     
         *     for hwnd, control in con.gui
         *         if (control.Name != 'cb_hide')
         *             control.Opt(option)
         * }
         */
        Opt(Options) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Redraw|`Redraw()`}  
         * Repaints the region of the GUI window occupied by the control.  
         * Redrawing solves problems such as groupbox artifacting.  
         * If called repeatedly, this may cause GUI flickering.  
         * @example <caption>Call Redraw() if a control needs redrawn.</caption>  
         * control_obj.Redraw()
         */
        Redraw() => String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#SetFont|`SetFont()`}  
         * Sets the font typeface, size, style, and/or color for the control.  
         * Omitting both parameters sets the control font to the current Gui.SetFont() values.  
         * If Gui.SetFont() has not been set, the system default values are used.
         * @param {(String)} [Options]  
         * Zero or more options separated by spaces.  
         * Styling words are applied in order.  
         * `norm italic` would disable all options and apply only italics  
         * - `bold` - Adds a heavy weight/boldness to text.  
         * - `italic` - Italicizes text.  
         * - `strike` - Strikes out text by adding a horizontal line through it.  
         * - `underline` - Underlines text.  
         * - `norm`- Disables all aforementioned settings.  
         * 
         * Other options:  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default:  
         *     `CDefault` or `C`  
         *   The color option does not affect {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|buttons} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|status bars}.  
         * - `S#`: Size in points where `#` is a decimal value.  
         * - `W#`: Weight/boldness where `#` is a decimal value between 1 and 1000. 400 is normal. 700 is bold.  
         * - `Q#`: {@link https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfonta|Text rendering quality} where `#` is an integer between 0 and 5.  
         *    - `0` - Window Constant: `DEFAULT_QUALITY` - Appearance of the font does not matter.  
         *    - `1` - Window Constant: `DRAFT_QUALITY` - Appearance of the font is less important than when the PROOF_QUALITY value is used.  
         *    - `2` - Window Constant: `PROOF_QUALITY` - Character quality of the font is more important than exact matching of the logical-font attributes.  
         *    - `3` - Window Constant: `NONANTIALIASED_QUALITY` - Font is never antialiased, that is, font smoothing is not done.  
         *    - `4` - Window Constant: `ANTIALIASED_QUALITY` - Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.  
         *    - `5` - Window Constant: `CLEARTYPE_QUALITY` - If set, text is rendered (when possible) using ClearType antialiasing method.  
         * @param {(String)} [FontName]  
         * The name of any font, such as one from the {@link https://www.autohotkey.com/docs/v2/misc/FontsStandard.htm|font table}.  
         * If FontName is omitted or does not exist on the system, the previous font typeface will be used, otherwise the system's default Gui typeface is used.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @see {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#SetFont|Gui.SetFont()}
         * @example <caption>Changing control font properties.</caption>  
         * goo := Gui()
         * con := goo.AddText('xm ym w200 h30 Center Border', 'Big Header Text')
         * con.SetFont('S16 Bold c00A080')
         * con := goo.AddText('xm w200 h100 Left', 'Normal text goes down here.`nMore text.'
         *                     '`nEven more text`n+1 more line.`nLine++`nEOL (End of lines!)')
         * con.SetFont('s10 Italic')
         * con.SetFont(, 'Courier New')
         * con.SetFont(, 'Consolas')
         * goo.Show()
         */
        SetFont([Options:=GuiFontOptions, FontName:=GuiFontType]) => EmptyString
    }

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ActiveX|`ActiveX`}  
     * ActiveX components, such as the {@link https://learn.microsoft.com/en-us/dotnet/desktop/winforms/controls/webbrowser-control-overview?view=netframeworkdesktop-4.8|MSIE browser control}, can be embedded into a GUI window.  
     */
    class ActiveX extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the contents of a value-capable control.  
         * The Value is the ActiveX object of the ActiveX control. 
         * For details about the ActiveX component and its method used below, see:  
         * - {@link https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752085(v=vs.85)|WebBrowser object (Microsoft Docs)}  
         * - {@link https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752093(v=vs.85)|Navigate method (Microsoft Docs)}  
         * @example <caption>Adding an MSIE control to a GUI.</caption>  
         * goo := Gui()
         * goo.MarginX := goo.MarginY := 0
         * goo.BackColor := 0xFFFF00
         * con := goo.AddText('xm ym w924 h30', 'Yes, this is inside a GUI.')
         * con.SetFont('s18')
         * con.SetFont('s18 Bold')
         * con := goo.AddButton('x+0 w100 h30', 'Exit')
         * con.OnEvent('Click', (*) => ExitApp())
         * goo.web := goo.AddActiveX("x0 y+0 w1024 h768", "Shell.Explorer")
         * ; The ActiveX object is stored in the value property
         * goo.Show()
         * goo.web.value.Navigate("https://www.autohotkey.com/docs/v2/index.htm")
         */
        value: String
    }
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|`Button`}  
     * A pushbutton, which can be pressed to trigger an action.  
     */
    class Button extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The caption that displays on the button.  
         * If the text of a button is increased, the button does not auto-adjust in size.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust button width if needed.
         * @type String
         * @example <caption>Changing button caption.</caption>  
         * goo := Gui()
         * control := goo.AddButton('w200 h100', 'change')
         * control.lowercase := 1
         * control.OnEvent('Click', change_text)
         * goo.Show('')
         * 
         * change_text(con, info) {
         *     if (con.lowercase)
         *         con.Text := StrUpper(con.Text)
         *         ,con.lowercase := 0
         *     else
         *         con.Text := StrLower(con.Text)
         *         ,con.lowercase := 1
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Button is clicked.  
         * 
         *       Button_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Button is double-clicked.  
         * 
         *       Button_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Button or presses  
         * Menu or Shift+F10 while the Button has the keyboard focus.  
         * 
         *       Button_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The Button gains the keyboard focus.  
         * 
         *       Button_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The Button loses the keyboard focus.  
         * 
         *       Button_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Button's object  
         *     - `Info`: Not used with Button controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Multiple buttons and events</caption>  
         * goo := Gui()
         * 
         * goo.btn_max := goo.AddButton('xm ym w100', 'Maximize Window')
         * goo.btn_max.OnEvent('Click', (con, *) => con.gui.Maximize())
         * 
         * goo.btn_res := goo.AddButton('xm w100', 'Restore Window')
         * goo.btn_res.OnEvent('Click', (con, *) => con.gui.Restore())
         * 
         * goo.btn_win := goo.AddButton('xm w100', 'Toggle Win Border')
         * goo.btn_win.OnEvent('Click', border_toggle)
         * 
         * goo.btn_warn := goo.AddButton('xm w100', 'Focus this button`nUse tab/arrow')
         * goo.btn_warn.OnEvent('Focus', (con, *) => con.gui.BackColor := 0xE0E000)
         * goo.btn_warn.OnEvent('LoseFocus', (con, *) => con.gui.BackColor := 'Default')
         * goo.btn_warn.OnEvent('Click', (*) => MsgBox("Don't click me!"))
         * 
         * goo.btn_exit := goo.AddButton('xm w100', 'Close').OnEvent('Click', quit)
         * 
         * goo.Show('AutoSize')
         * 
         * quit(*) => ExitApp()
         * 
         * border_toggle(con, info) {
         *     static state := 0
         *     state := !state
         *     if state
         *         con.gui.Opt('-Caption')
         *     else con.gui.Opt('+Caption')
         * }
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * Sets various options to change a control's appearance or behaviors.  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Positioning and Sizing of Controls**  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to change control size/position.
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *       GuiControl.Opt('+VMyControl')
         *       GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *     Reset color to default.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     * @description @class
     */
    class CheckBox extends Gui.Control {
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The caption that displays on the checkbox.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust checkbox width if needed.
         * @type String
         * @example <caption>Changing checkbox caption.</caption>  
         * goo := Gui()
         * control := goo.AddCheckbox('w100 h50', 'change')
         * control.lowercase := 1
         * control.OnEvent('Click', change_text)
         * goo.Show('')
         * 
         * change_text(con, info) {
         *     if (con.lowercase)
         *         con.Text := StrUpper(con.Text)
         *         ,con.lowercase := 0
         *     else
         *         con.Text := StrLower(con.Text)
         *         ,con.lowercase := 1
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the checked state.  
         * Values can be:  
         * `1`: Checked  
         * `0`: Unchecked  
         * `-1`: Grey checked/undetermined ({@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#CheckBox|Check3} option must be enabled)  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The CheckBox is clicked.  
         * 
         *       CheckBox_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The CheckBox is double-clicked.  
         * 
         *       CheckBox_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the CheckBox or presses  
         * Menu or Shift+F10 while the CheckBox has the keyboard focus.  
         * 
         *       CheckBox_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The CheckBox gains the keyboard focus.  
         * 
         *       CheckBox_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The CheckBox loses the keyboard focus.  
         * 
         *       CheckBox_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the CheckBox's object  
         *     - `Info`: Not used with CheckBox controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Custom example not written yet.</caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Check3`: Adds a 3rd "indeterminate" gray checkmark state to the checkbox.  
         *   This can be used to indidcate the checkbox has neither been checked or unchecked.  
         * - `Checked` or `CheckedGray`: Starts the checkbox checked or checked grey/indeterminate.  
         *   `Checked` may also be followed by a 0 (unchecked), 1 (checked), or -1 (gray checked).  
         *  
         *       goo.AddCheckBox('+Checked0')
         *       var := 1, goo.AddCheckBox('+Checked' var)
         * 
         * **Positioning and Sizing of Controls**  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to change control size/position.
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default:  
         *   `CDefault` or `C`
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         *   This also moves the box from the left to the right side of the control.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @param {(String|Number|Array)} [ControlSpecific]  
         * Control specific setting.  
         * @returns {(GuiControl)}  
         * GuiControl Object
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Custom extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * Not all options work with all custom controls.
         * **Positioning and Sizing of Controls**  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to change control size/position.
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width and moves the box to the right side.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class DateTime extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The formatted text of the control.  
         * To change the date-time, set the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|Value property} with a new date-time stamp in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} format.
         * @type String
         * @example <caption></caption>  
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the control's Date-time stamp in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS format}.  
         * Use {@link https://www.autohotkey.com/docs/v2/Variables.htm#Now|A_Now} to set Value to current time.  
         * If the {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ChooseNone|choose none `+2` option} was used, setting  
         * Value to 0 will clear the DateTime control.
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The DateTime's value changes.  
         * 
         *       DateTime_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the DateTime or presses  
         * Menu or Shift+F10 while the DateTime has the keyboard focus.  
         * 
         *       DateTime_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The DateTime gains the keyboard focus.  
         * 
         *       DateTime_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The DateTime loses the keyboard focus.  
         * 
         *       DateTime_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the DateTime's object  
         *     - `Info`: Not used with DateTime controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose`: Pre-select a date or time other than the current date/time.  
         *   Choose should be followed by a DTS in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHHMISS format}`.  
         *   When setting the time, the full date and time must be provided.  
         *   `ChooseNone` adds a checkbox to toggle usable state (similar to a checkbox greycheck).  
         * - `RangeMIN-MAX`: Sets how far back or forward you can set the DateTime control.  
         *   MIN and MAX should be dates. Omitting one leaves that side of the range unrestricted.  
         * 
         *       goo.Opt('Range20220101-20221231')
         *       goo.Opt('Range-20250101115959')
         * - `Right`: Right edge of drop-down calendar aligns with the right side of the control.  
         * - `Left`: Left edge of drop-down calendar aligns with the left side of the control.  
         * - `1`: Provide an up-down control to the right of the control to modify date-time values.  
         *   This replaces the button of the drop-down month calendar. Does not work with the `LongDate` option.  
         * - `2`: Provide a checkbox inside the control, similar to `CheckNone`.  
         *   When unchecked, the control is greyed out and indicates no date/time is selected.  
         *   This option cannot be added or removed after the control is created.  
         * - `Colors`: Day number colors inside the drop-down calendar obey {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#SetFont|Gui.SetFont()}` or the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|C option'}`.  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   R takes precedence over H.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *     Reset color to default.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime_SetFormat|`SetFormat()`}  
         * Sets the display format of a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|DateTime} control.  
         * @param {(String)} [DateFormat]  
         * Sets the desired {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTimeFormat|display format} of a DateTime control.
         * - `ShortDate`: Locale short date format. Example: 6/1/2005  
         *   ShortDate is used if DateFormat is omitted or is an empty string  
         * - `LongDate`: Locale long date format. Example: Wednesday, June 01, 2005  
         * - `Time`: Shows locale time only. Example: 9:37:45 PM  
         *   The date is still present in the control even though it's not shown.  
         *   It will be retrieved along with the time in the YYYYMMDDHH24MISS format.  
         * - `Custom`: Any combination of {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|date and time formats}.  
         * @param {String} [Format] - Sets the display format of a DateTime control.  
         * @returns {(String)}  
         * An empty string is always returned.  
         */
        SetFormat([DateFormat:='']) => EmptyString
    }
    
    /**
     */
    class Edit extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text inside the control.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust edit width if needed.
         * @type String
         * @example <caption>Changing edit text.</caption>  
         * goo := Gui()
         * goo.edt_main := goo.AddEdit('w100 h30', 'Some Text')
         * goo.btn_clear := goo.AddButton('y+5 w100 h30', 'Clear Text')
         * goo.btn_clear.OnEvent('Click', clear_text)
         * goo.Show()
         * 
         * clear_text(con, info) {
         *     con.gui.edt_main.Text := ''
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the text in the control.  
         * Unlike the Text property, `` `r`n `` is not converted to `` `n ``.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust text width if needed.
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The Edit's value changes.  
         * 
         *       Edit_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The Edit gains the keyboard focus.  
         * 
         *       Edit_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The Edit loses the keyboard focus.  
         * 
         *       Edit_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Edit's object  
         *     - `Info`: Not used with Edit controls  
         *     - `Item`: Not used with Edit controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Limit`: Restricts input to the visible width of the edit field.  
         * - `Limit#`: Set the character limit of the control where `#` is the limit number.  
         * - `Lowercase`: The characters typed by the user are automatically converted to lowercase.  
         * - `Multi`: Allows more than one line of text.  
         * - `Number`: Allows only digits to be typed into the edit field. Non-digits can still be pasted in.  
         *   Attaching an {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}` control also forces +Number.  
         * - `Password`: Hides the user input of a single-lined edit control.  
         *   To change the masking character, include the new char immediately after password:  
         * 
         *        goo.AddEdit('+Password*'), goo.AddButton('+Password#')
         * - `ReadOnly`: Prevent the user from changing the control's contents, but text can still be copied.  
         * - `T#`: Set tab stop distance where `#` is the amount of {@link https://learn.microsoft.com/en-us/previous-versions/windows/desktop/bb226789(v=vs.85)|dialog units}` to use (a unit determined by the OS).  
         *   A single tab stop sets the default tab distance. Default value is 32.  
         *   Multiple tab stops (up to 50) can be set to define where each tab should go to.  
         * 
         *        goo.AddEdit('T5'), goo.AddEdit('T10 T20 T50 T100')
         * - `Uppercase`: Convert all characters in the control to uppercase.  
         * - `WantCtrlA`: Allow Ctrl+A to highlight all text or `-WantCtrlA` to disable it.  
         * - `WantReturn`: Allows Enter to create a new line.  
         *   `-WantReturn` causes Enter will activate the Gui's default control.  
         *   New lines can still be added by using Ctrl+Enter.  
         * - `WantTab`: If enabled, Tab produces a tab character otherwise tab navigates to the next control.  
         *   In a multiline tab, a tab can still be produced with Ctrl+Tab.  
         * - `Wrap`: Enables word-wrapping in a multi-line edit control.  
         *   This style cannot be changed after the control has been created.  
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class GroupBox extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The caption that displays on the checkbox.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust checkbox width if needed.
         * @type String
         * @example <caption>Changing a GroupBox's text.</caption>  
         * goo := Gui()
         * goo.gb := goo.AddGroupBox('w100 h100 Section', 'Options:')
         *     goo.rad_en := goo.AddRadio('xp+10 yp+20 w80 h20 Checked vEN', 'English')
         *     goo.rad_en.OnEvent('Click', set_language)
         *     goo.rad_en := goo.AddRadio('y+5 w80 h20 vES', 'Española')
         *     goo.rad_en.OnEvent('Click', set_language)
         *     goo.rad_en := goo.AddRadio('y+5 w80 h20 vDE', 'Deutsch')
         *     goo.rad_en.OnEvent('Click', set_language)
         * goo.Show()
         * 
         * set_language(con, info) {
         *     switch con.name {
         *         case 'EN': opt := 'Options'
         *         case 'ES': opt := 'Opciones'
         *         case 'DE': opt := 'Optionen'
         *     }
         *     con.gui.gb.Text := opt ':'
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the GroupBox or presses  
         * Menu or Shift+F10 while the GroupBox has the keyboard focus.  
         * 
         *       GroupBox_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the GroupBox's object  
         *     - `Item`: Not used with GroupBox controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Positioning and Sizing of Controls**  
         * - `R#`: The number of controls to reserve space for. 
         *   This number can be a float. Default: 2 rows
         * - `W#`: Width of control where `#` is a number of pixels. Default: Current font size x18  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
         *   the GroupBox to show through. Use `+Background` to remove this option later.  
         *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.           * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Hotkey extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the current hotkey string.  
         * Includes modifier keys. 
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The Edit's value changes.  
         * 
         *       Hotkey_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Hotkey control or presses  
         * Menu or Shift+F10 while the Hotkey control has the keyboard focus.  
         * 
         *       Hotkey_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Hotkey control's object  
         *     - `Info`: Not used with Hotkey controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Limit#`: Restrict the types of hotkeys the user can enter where `#` is one of the following:
         *   - 1: Prevent unmodified keys  
         *   - 2: Prevent Shift-only keys  
         *   - 4: Prevent Ctrl-only keys  
         *   - 8: Prevent Alt-only keys  
         *   - 16: Prevent Shift+Ctrl keys  
         *   - 32: Prevent Shift+Alt keys  
         *   - 64: Not supported (will not behave correctly)  
         *   - 128: Prevent Shift+Ctrl+Alt keys  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels. Default is font size x15.  
         * - `H#`: Height of control where `#` is a number of pixels. Default is 1 row
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Link extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the link.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust link width if needed.
         * @type String
         * @example <caption>Changing checkbox caption.</caption>  
         * goo := Gui()
         * control := goo.AddLink('w100 h50', '<a href="https://www.autohotkey.com/docs/v2/">V2 Docs</a>')
         * control.visited := 0
         * control.OnEvent('Click', mark_link_visited)
         * goo.Show('')
         * 
         * mark_link_visited(con, info, href) {
         *     if con.visited = 0
         *         con.text .= ' [VISITED]'
         *         ,con.visited := 1
         *     Run(href)
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Link is clicked.  
         * 
         *       Link_Click(GuiCtrl, Info, Href)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Link or presses  
         * Menu or Shift+F10 while the Link has the keyboard focus.  
         * 
         *       Link_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Link's object  
         *     - `Href`: The link's HREF attribute. If a Click event callback  
         *       is registered, the HREF attribute is not automatically executed.  
         *     - `Info`: The link's ID attribute (a string) if it has one, otherwise the link's index (an integer).  
         *     - `Item`: Not used with Link controls.  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     * Class for grouping the list controls: ComboBox, DropDownList, ListBox, and Tab
     */
    class List extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends items to a multi-item control (ListBox, DropDownList, ComboBox, or Tab).  
         * To replace/overwrite the list, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method beforehand.
         * @param {(Array)} Items  
         * An array of strings to be inserted as items at the end of the control's list.
         * @returns {(String)}  
         * An empty string is always returned.  
         * @see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Add|ListView.Add()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Add|TreeView.Add()}
         * @example <caption></caption>  
         */
        Add(Items) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Select an item in a multi-item control (ListBox, DropDownList, ComboBox, or Tab).  
         * Unlike One of the following event(s). Expected callback format is included. event.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * If the ListBox is multi-select, all matching items are selected.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example
         */
        Choose(Value) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes one or all items from a multi-item control (ListBox, DropDownList, ComboBox, or Tab).  
         * @param {(Integer)} Value  
         * Item number to be deleted. `1` is first item, `2` is second, etc.  
         * If value is omitted, all items are deleted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Delete|ListView.Delete()} |
         * {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Delete|TreeView.Delete()}
         * @example
         */
        Delete([Value]) => EmptyString
    }
    
    /**
     */
    class ComboBox extends Gui.List {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the selected item or the text of the item to select (case insensitive).  
         * If no item selected, the control's edit field is retrieved instead.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|Value} property to select an item by its position number.  
         * @type String
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets position number of the currently selected item.  
         * If text is in the ComboBox, the first matching text is used.  
         * 0 indicates nothing is selected and no matches were made.  
         * Setting the property to 0 clears any selected item.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends the specified entries to the control.  
         * @param {(Array)} Items  
         * An array of strings to append to the list.  
         * To replace the list with a new one, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method first and then add the list.  
         * To pre-select an item, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.letter_combo := goo.AddComboBox('xm ym r6', ['a', 'b', 'c'])
         * goo.Show('y300 AutoSize')
         * MsgBox('Click OK to add "e", "f", "g" to the ComboBox.')
         * goo.letter_combo.Add(['e', 'f', 'g'])
         */
        Add(Items) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Sets a value from the ComboBox to selected.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * @returns {(String)}  
         * An empty string is always returned.  
         */
        Choose(Value) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes the specified entry or all entries from the ComboBox.  
         * @param {(Integer)} [Value]  
         * The index number of the item to delete or all items if value is omitted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         *  
         */
        Delete([Value]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The ComboBox's value changes.  
         * 
         *       ComboBox_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The ComboBox is double-clicked.  
         * 
         *       ComboBox_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the ComboBox or presses  
         * Menu or Shift+F10 while the ComboBox has the keyboard focus.  
         * The context menu does not work with the edit portion of the control.
         * 
         *       ComboBox_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The ComboBox gains the keyboard focus.  
         * 
         *       ComboBox_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The ComboBox loses the keyboard focus.  
         * 
         *       ComboBox_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the ComboBox's object  
         *     - `Info`: Not used with ComboBox controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
         * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
         * - `Sort`: Item list is sorted alphabetically. This option also enables incremental searching.  
         *   Meaning an item can be selected by typing its name.  
         * - `Limit`: Restrict the user's input to the visible width of the ComboBox's edit field.  
         * - `Simple`: Replaces the ComboBox's DropDownList with a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|ListBox}`.  
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Max amount of items to show in the control list without needing to scroll,  
         *   where `#` is the number of visible rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default value: Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default value: 3 rows  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
         *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         *   Text color applies to the Edit field and to {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|Simple}` ListBoxes.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *   This is enabled by default for almost all controls.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         *   Background color applies to the Edit field and to {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|Simple}` ListBoxes.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class DDL extends Gui.List {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the selected item or the text of the item to select (case insensitive).  
         * @type String
         * @example <caption></caption>  
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets position number  
         * of the currently selected item.  
         * 0 means nothing is selected.  
         * Setting Value to 0 clears any selected item.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends the specified entries to the DropDownList.  
         * @param {(Array)} Items  
         * An array of strings to append to the list.  
         * To replace the list with a new one, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method first and then add the list.  
         * To pre-select an item, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.letter_ddl := goo.AddDDL('xm ym', ['a', 'b', 'c'])
         * goo.Show('y300 AutoSize')
         * MsgBox('Click OK to add "e", "f", "g" to DropDownList')
         * goo.letter_ddl.Add(['e', 'f', 'g'])
         */
        Add(Items) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Sets a value from the DropDownList to selected.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.combo := goo.AddComboBox('xm ym', ['a', 'b', 'c'])
         * goo.combo.Choose(2)
         * goo.Show('y300 AutoSize')
         */
        Choose(Value) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes the specified entry or all entries from the DropDownList.  
         * @param {(Integer)} [Value]  
         * The index number of the item to delete or all items if value is omitted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         *  
         */
        Delete([Value]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The DropDownList's value changes.  
         * 
         *       DDL_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the DropDownList or presses  
         * Menu or Shift+F10 while the DropDownList has the keyboard focus.  
         * 
         *       DDL_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The DropDownList gains the keyboard focus.  
         * 
         *       DDL_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The DropDownList loses the keyboard focus.  
         * 
         *       DDL_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the DropDownList's object  
         *     - `Info`: Not used with DropDownList controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
         * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
         * - `Sort`: Item list is sorted alphabetically. 
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Max amount of items to show in the control list without needing to scroll,  
         *   where `#` is the number of visible rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default value: Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default value: 3 rows  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
         *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         *   Text color does not apply to the dropped-down list.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *   This is enabled by default for almost all controls.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         *   Background color does not apply to the dropped-down list.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class DropDownList extends Gui.List {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the selected item or the text of the item to select (case insensitive).  
         * @type String
         * @example <caption></caption>  
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets position number  
         * of the currently selected item.  
         * 0 means nothing is selected.  
         * Setting Value to 0 clears any selected item.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends the specified entries to the DropDownList.  
         * @param {(Array)} Items  
         * An array of strings to append to the list.  
         * To replace the list with a new one, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method first and then add the list.  
         * To pre-select an item, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.letter_ddl := goo.AddDDL('xm ym', ['a', 'b', 'c'])
         * goo.Show('y300 AutoSize')
         * MsgBox('Click OK to add "e", "f", "g" to DropDownList')
         * goo.letter_ddl.Add(['e', 'f', 'g'])
         */
        Add(Items) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Sets a value from the DropDownList to selected.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.combo := goo.AddComboBox('xm ym', ['a', 'b', 'c'])
         * goo.combo.Choose(2)
         * goo.Show('y300 AutoSize')
         */
        Choose(Value) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes the specified entry or all entries from the DropDownList.  
         * @param {(Integer)} [Value]  
         * The index number of the item to delete or all items if value is omitted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         *  
         */
        Delete([Value]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The DropDownList's value changes.  
         * 
         *       DDL_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the DropDownList or presses  
         * Menu or Shift+F10 while the DropDownList has the keyboard focus.  
         * 
         *       DDL_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The DropDownList gains the keyboard focus.  
         * 
         *       DDL_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The DropDownList loses the keyboard focus.  
         * 
         *       DDL_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the DropDownList's object  
         *     - `Info`: Not used with DropDownList controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
         * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
         * - `Sort`: Item list is sorted alphabetically. 
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Max amount of items to show in the control list without needing to scroll,  
         *   where `#` is the number of visible rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default value: Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default value: 3 rows  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
         *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         *   Text color does not apply to the dropped-down list.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *   This is enabled by default for almost all controls.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         *   Background color does not apply to the dropped-down list.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class ListBox extends Gui.List {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the selected item or the text of the item to select (case insensitive).  
         * @type String
         * @example <caption></caption>  
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the index of the  
         * currently selected items. 0 indicates nothing was selected.  
         * If the {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBoxMulti|Multi} option is enabled, an array is returned  
         * and contains the index of all selected item.  
         * If array is empty `array.length = 0`, nothing was selected.  
         * When setting Value, only integers can be used.  
         * To set multiple items, loop through them and use the  
         * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method to select each item.  
         * @type Integer|Array
         */
        Value: Array
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends the specified entries to the control.  
         * @param {(Array)} Items  
         * An array of strings to append to the list.  
         * To replace the list with a new one, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method first and then add the list.  
         * To pre-select an item, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.lb := goo.AddListBox('xm ym +Multi', ['a', 'b', 'c'])
         * goo.lb.Choose(2)
         * goo.Show('y300 AutoSize')
         *  
         * LB_SETSEL := 0x0185
         * MsgBox('Press OK to select all')
         * PostMessage(LB_SETSEL, 1, -1, goo.lb)
         *  
         * MsgBox('Press OK to deselect all')
         * PostMessage(LB_SETSEL, 0, -1, goo.lb)
         */
        Add(Items) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Select an item in a multi-item control.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * If the ListBox is multi-select, all matching items are selected.  
         * {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} can be used to select or deselect all items. See {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose_Remarks|example}.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>A searchable ListBox</caption>  
         * goo := Gui()
         * lb_arr := ['apple', 'apricot', 'avocado', 'banana']
         * goo.listbox := goo.AddListBox('xm ym w300 +Multi r' lb_arr.Length , lb_arr)
         * goo.listbox.Choose(2)
         * goo.AddText('xm w40 h20 +0x200', 'Search:')
         * goo.edit := goo.AddEdit('x+0 w260 h20')
         * goo.edit.OnEvent('Change', search_list)
         * goo.edit.Focus()
         * goo.Show('y300 AutoSize')
         * 
         * search_list(con, info) {
         *     con.gui.listbox.choose(0)
         *     try
         *         con.gui.listbox.Choose(con.value)
         *     catch
         *         ToolTip('Invalid character')
         *         ,SetTimer(Tooltip, -1500)
         * }
         */
        Choose(Value) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes the specified entry or all entries from the ListBox.  
         * @param {(Integer)} [Value]  
         * The index number of the item to delete or all items if value is omitted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         *  
         */
        Delete([Value]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The ListBox's value changes.  
         * 
         *       ListBox_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The ListBox is double-clicked.  
         * 
         *       ListBox_DoubleClick(GuiCtrl, ItemPos)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the ListBox or presses  
         * Menu or Shift+F10 while the ListBox has the keyboard focus.  
         * 
         *       ListBox_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The ListBox gains the keyboard focus.  
         * 
         *       ListBox_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The ListBox loses the keyboard focus.  
         * 
         *       ListBox_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the ListBox's object  
         *     - `Info`: Position number of the focused item on double click  
         *     - `ItemPos`: Position number of the focused item  
         *     - `Item`: Position number of current focused item  
         *       Right-clicking a standard ListBox does not focus an item  
         *       Meaning this may not be the clicked item  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
         * - `Multi`: Multiple items can be selected via Ctrl+Clicking and Shift+Clicking.  
         *   Using Style `+0x8` {@link https://learn.microsoft.com/en-us/windows/win32/controls/list-box-styles#LBS_MULTIPLESEL|LBS_MULTIPLESEL}`, item highlighting is toggled on clicked.  
         * - `ReadOnly`: Items will not be visibly highlighted when selected but still register  
         *   with {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit()}` and the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|Value}` and {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text}` properties.  
         * - `Sort`: Item list is sorted alphabetically. This option also enables incremental searching.  
         *   Meaning an item can be selected by typing its name.  
         * - `T#`: Sets each tab's distance, where `#` is number of dialogue units (a unit determined by the OS) to use.  
         *   If one tab stop is set, that distance is used between all tabs.  
         *   If multiple tab stops are set, each marks the distance the corresponding tab will extend to.  
         * - `0x100`: Adds the {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm#LBS_NOINTEGRALHEIGHT|LBS_NOINTEGRALHEIGHT}` style to the ListBox, preventing a partial  
         *   row from appearing at the bottom and from shrinking when the font is changed.  
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Max amount of items to show in the control list without needing to scroll,  
         *   where `#` is the number of visible rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default value: Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default value: 3 rows  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
         *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         *   This is enabled by default for almost all controls.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Tab extends Gui.List {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of current tab or the text of the tab to activate (case insensitive).  
         * @type String
         * @example <caption></caption>  
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets  
         * position number of the currently selected tab.  
         * A Value of 0 means no tab is selected.  
         * A Value **can** be set to 0.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|`Add()`}  
         * Appends the specified tabs to the control.  
         * @param {(Array)} Items  
         * An array of strings to append to the tabs.  
         * To replace the list with a new one, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|Delete()} method first and then add the list.  
         * To pre-select an item, use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|Choose()} method.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * goo.letter_tabs := goo.AddTab('xm ym', ['a', 'b', 'c'])
         * goo.Show('y300 AutoSize')
         * MsgBox('Click OK to add "e" and "f" tabs.')
         * goo.letter_tabs.Add(['e', 'f'])
         */
        Add(Items) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|`Choose()`}  
         * Select a tab.  
         * @param {(Integer|String)} Value  
         * Specify the number of the item. 1 for first item, 2 for second.  
         * If Value is a `0` or `EmptyString`, any selected value is deselected.  
         * If Value is a string (including a numeric string), the list item that matches the most leading characters is selected. This search is not case-sensitive.  
         * {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} can be used to select or deselect all items. See example.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * tab_names := ['A','B','C','D']
         * goo.tabs := goo.AddTab3('xm ym w200', tab_names)
         * MsgBox('Press OK to select tab C')
         * goo.tabs.Choose(3)
         * goo.Show('w500 y300 AutoSize')
         */
        Choose(Value) => EmptyString
    
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|`Delete()`}  
         * Removes the specified tab or all tabs from the Tab control.  
         * Deleting a tab removes only the tab title and does not affect that tab's sub-controls. Instead, the tabs names are shifted left and the last tab's controls are deleted.  
         * Because of this behavior, if you need a deleteable tab, it should placed at the end of the tab list. Otherwise, the only way to rearrange tabs is to delete and rebuild the tab control.  
         * The example code below demonstrates this behavior. Tab B is removed, the remaining tabs are shifted left, and tab B's control are now under the C tab. The final tab's controls, tab D, are deleted.  
         * @param {(Integer)} [Value]  
         * The index number of the item to delete or all items if value is omitted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         * goo := Gui()
         * tab_names := ['A','B','C','D']
         * goo.tabs := goo.AddTab3('xm ym w200 r3 Section', tab_names)
         * for i, tname in tab_names
         *     goo.Tabs.UseTab(A_Index)
         *     ,goo.AddButton('xs+5 ys+25', '"Tab ' tname '" Button')
         * goo.Show('w500 y300 AutoSize')
         * MsgBox('Press OK to delete tab "B".')
         * goo.tabs.Delete(2)
         */
        Delete([Value]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The Tab's value changes.  
         * 
         *       Tab_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Tab or presses  
         * Menu or Shift+F10 while the Tab has the keyboard focus.  
         * 
         *       Tab_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Tab's object  
         *     - `Info`: Not used with Tab controls  
         *     - `RightClick`:  
         *       `1` = Mouse right click was used  
         *       `0` = AppsKey or Shift+F10 was used  
         *     - `X` and `Y`: Right click dependent (Check `RightClick` param)  
         *       Right Clicked = Coords of mouse click  
         *       Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Choose#`: Pre-select a Tab where `#` is the tab's positional number.  
         * - `Buttons`: The Tabs are replaced with clickable buttons. 
         * - `Left`/`Right`/`Bottom`: Specify the side of the control to show the tabs.  
         *   See {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm#TCS_VERTICAL|TCS_VERTICAL}` for Left/Right limitations.  
         * - `Wrap`: Specify `-Wrap` to keep all tabs on a single row. Scroll buttons are added if there are too many tabs.  
         *   If there are too many tabs, scroll buttons are added to navigate through them.  
         * - `Tab Icons`: Icons may be added next to tabs via {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage}` as demonstrated in {@link https://www.autohotkey.com/board/topic/5692-icons-in-tabs/|this post}`.  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Max amount of items to show in the control list without needing to scroll,  
         *   where `#` is the number of visible rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default value: Current font size x30 plus the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|MarginX}` x3.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default value: 10 rows  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
         *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
        
    /**
     */
    class ListView extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Add|`Add()`}  
         * Adds a new row to the bottom of the list.  
         * @param {(String)} [Options]  
         * If omitted, no options are used.  
         * - `Check`  
         *   Shows a checkmark in the row.  
         *   Use `LV.Modify(RowNumber, "-Check")` to uncheck.  
         * - `Col#` 
         *   Specify the column to start at when adding the Cell values.  
         * - `Focus`  
         *   Set keyboard focus to this row.  
         * - `Icon#`  
         *   The image to use from ImageList, where `#` is the icon index.  
         *   Use `-1` for a blank icon.  
         * - `Select`  
         *   Selects the row.  
         *   Use LV.Modify(RowNumber, "-Select") to deselect. 
         *   `Select` may also be followed by a 1 (selected) or a 0 (unselected).  
         *  
         *       LV.add('+Checked0')
         *       var := 1, LV.add('+Checked' var)
         * @param {(String)} [Col1]  
         * First column of the row to add data to.  
         * Starts at column 1 unless the Col# option is specified.  
         * If omitted, cell is left blank.  
         * @param {(String)} [ColN]  
         * Each additional parameter can contain the next column's data.  
         * If the parameter is blank or omitted, no data is added to that column.  
         * @returns {(Integer)}  
         * The new row's number.  
         * @example <caption>Create ListView from script folder files.</caption>  
         * goo := Gui()
         * lv := goo.AddListView('xm ym w800 h400', ['Name', 'Dir', 'Extension'])
         * loop files A_ScriptDir '\*.*'
         *     lv.Add('', A_LoopFileName, A_LoopFileDir, A_LoopFileExt)
         * 
         * lv.ModifyCol()
         * 
         * goo.Show()
         */
        Add([Options:='', Col1, ColN*]) => Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Delete|`Delete()`}  
         * Deletes the specified row or all rows.  
         * @param {(Integer)} [RowNumber]  
         * The row number to delete from the ListView.  
         * If omitted, all rows are deleted.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Removing a row from a ListView.</caption>  
         * goo := Gui()
         * lv := goo.AddListView('xm ym w200 h200', ['A Col', 'B Col', 'C Col'])
         * loop 3
         *     lv.Add('', A_Index, A_Index, A_Index)
         * 
         * lv.Delete(2)
         * 
         * goo.Show()
         */
        Delete([RowNumber:=unset]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#DeleteCol|`DeleteCol()`}  
         * Deletes the specified column and all of the contents beneath it.  
         * @param {(Integer)} ColumnNumber  
         * The number of the column to delete.  
         * All columns to the right of the deleted column are reduced by 1.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption>Removing a column from a ListView.</caption>  
         * goo := Gui()
         * lv := goo.AddListView('xm ym w200 h200', ['A Col', 'B Col', 'C Col'])
         * loop 3
         *     lv.Add('', A_Index, A_Index, A_Index)
         * 
         * lv.DeleteCol(2)
         * 
         * goo.Show()
         */
        DeleteCol(ColumnNumber) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#GetCount|`GetCount()`}  
         * Returns the number of rows or columns in the control.  
         * @param {(String)} [Mode]  
         * - Omit  
         *   Returns the total number of rows in the control.  
         * - `S` `Selected`  
         *   Only selected/highlighted rows are counted.  
         * - `Col` `Column`  
         *   The number of columns in the control.  
         * @returns {(Integer)}  
         * The number of rows, selected rows, or columns in the control.  
         * @example <caption></caption>  
         */
        GetCount([Mode:=unset]) => Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#GetNext|`GetNext()`}  
         * Returns the row number of the next selected, checked, or focused row.  
         * @param {(Integer)} StartingRowNumber  
         * The number of the row to begin the search.  
         * If omitted or less than 1, search starts at top of list.  
         * @param {(String)} RowType  
         * - Omit or Empty String 
         *   Search for next selected/highlighted row.  
         * - `C` `Checked`  
         *   Find next checked row.  
         * - `F` `Focused`  
         *   Find the focused row.  
         *   The can only be 1 focused row.  
         * @returns {(Integer)}  
         * The row number of the next selected, checked, or focused row.  
         * `0` if none is found.  
         * @example <caption></caption>  
         */
        GetNext([StartingRowNumber:=0, RowType:='']) => String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#GetText|`GetText()`}  
         * Retrieves the text at the specified row and column number.  
         * @param {(Integer)} RowNumber  
         * The row number to get text from.  
         * @param {(Integer)} ColumnNumber  
         * The column number to get text from.  
         * If omitted, `1` is used.  
         * @returns {(String)}  
         * The retrieved text from the specified cell.  
         * There is an 8191 character limit to this string.  
         * @example <caption></caption>  
         */
        GetText(RowNumber [,ColumnNumber:=1]) => String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Insert|`Insert()`}  
         * Inserts a new row at the specified row number.  
         * @param {(Integer)} RowNumber  
         * Row number to insert the new row at.  
         * All rows below are shifted down.  
         * If row number is higher than total rows, it's added to the end of the list.  
         * @param {(String)} [Options]  
         * If omitted, no options are used.  
         * - `Check`  
         *   Shows a checkmark in the row.  
         *   Use `LV.Modify(RowNumber, "-Check")` to uncheck.  
         * - `Col#` 
         *   Specify the column to start at when adding the Cell values.  
         * - `Focus`  
         *   Set keyboard focus to this row.  
         * - `Icon#`  
         *   The image to use from ImageList, where `#` is the icon index.  
         *   Use `-1` for a blank icon.  
         * - `Select`  
         *   Selects the row.  
         *   Use LV.Modify(RowNumber, "-Select") to deselect. 
         *   `Select` may also be followed by a 1 (selected) or a 0 (unselected).  
         *  
         *       LV.add('+Checked0')
         *       var := 1, LV.add('+Checked' var)
         * @param {(String)} [Col1]  
         * First column of the row to add data to.  
         * Starts at column 1 unless the Col# option is specified.  
         * If omitted, cell is left blank.  
         * @param {(String)} [ColN]  
         * Each additional parameter can contain the next column's data.  
         * If the parameter is blank or omitted, no data is added to that column.  
         * @returns {(Integer)}  
         * The row's number is returned.  
         * @example <caption>Inserting a row into a ListView.</caption>  
         * goo := Gui()
         * lv := goo.AddListView('xm ym w200 h200', ['A Col', 'B Col', 'C Col'])
         * loop 4
         *     lv.Add('', A_Index, A_Index, A_Index)
         * 
         * lv.Insert(3, , 'x', 'y', 'z')
         * 
         * goo.Show()
         */
        Insert(RowNumber [,Options:='', Col1, ColN*]) => Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#InsertCol|`InsertCol()`}  
         * Inserts a new column at the specified column number.  
         * Max number of columns is 200.  
         * @param {(Integer)} ColumnNumber  
         * Column number to insert the new column at.  
         * All columns to the right are shifted right by 1.  
         * If column number is higher than total columns, it's added to the end of the list.  
         * @param {(String)} [Options]  
         * If omitted, no options are used.  
         * - `Check`  
         *   Shows a checkmark in the row.  
         *   Use `LV.Modify(RowNumber, "-Check")` to uncheck.  
         * - `Col#` 
         *   Specify the column to start at when adding the Cell values.  
         * - `Focus`  
         *   Set keyboard focus to this row.  
         * - `Icon#`  
         *   The image to use from ImageList, where `#` is the icon index.  
         *   Use `-1` for a blank icon.  
         * - `Select`  
         *   Selects the row.  
         *   Use LV.Modify(RowNumber, "-Select") to deselect. 
         *   `Select` may also be followed by a 1 (selected) or a 0 (unselected).  
         *  
         *       LV.add('+Checked0')
         *       var := 1, LV.add('+Checked' var)
         * @param {(String)} [ColumnTitle]  
         * The title to apply to the column header.  
         * If omitted or an empty string, the header will be blank.  
         * @returns {(Integer)}  
         * The inserted column's number.  
         * @example <caption></caption>  
         */
        InsertCol(ColumnNumber [,Options:='', ColumnTitle:='']) => String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#Modify|`Modify()`}  
         * Modifies the attributes and/or text of a row.  
         * @param {(Integer)} RowNumber  
         * Row number to modify.  
         * If `0` is used, all rows are modified.  
         * @param {(String)} Options  
         * If omitted, no options are used.  
         * - `Check`  
         *   Shows a checkmark in the row.  
         *   Use `LV.Modify(RowNumber, "-Check")` to uncheck.  
         * - `Col#` 
         *   Specify the column to start at when adding the Cell values.  
         * - `Focus`  
         *   Set keyboard focus to this row.  
         * - `Icon#`  
         *   The image to use from ImageList, where `#` is the icon index.  
         *   Use `-1` for a blank icon.  
         * - `Select`  
         *   Selects the row.  
         *   Use LV.Modify(RowNumber, "-Select") to deselect. 
         *   `Select` may also be followed by a 1 (selected) or a 0 (unselected).  
         * 
         *       LV.add('+Checked0')
         *       var := 1, LV.add('+Checked' var)
         * - `Vis`  
         *   Ensures row is visible by scrolling to it (if necessary). 
         * @param {(String)} [Col1]  
         * First column of the row to add data to.  
         * Starts at column 1 unless the Col# option is specified.  
         * If omitted, cell is left blank.  
         * @param {(String)} [ColN]  
         * Each additional parameter can contain the next column's data.  
         * If the parameter is blank or omitted, no data is added to that column.  
         * @returns {(String)} An empty string is always returned.  
         * @example <caption></caption>  
         */
        Modify(RowNumber [,Options:='', Col1, ColN*]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#ModifyCol|`ModifyCol()`}  
         * Modifies the attributes and/or text of the specified column and its header.  
         * If all params are omitted, all columns are auto-adjusted to fit contents.  
         * @param {(Integer)} [ColumnNumber]  
         * The number of the column to modify.  
         * @param {(String)} [Options]  
         * **General options**  
         *   - `#` = New column width where `#` is the number of pixels.
         *     This can be a pure number if it's the only option.  
         *   - `Auto` = Adjust column width to fit contents. 
         *     Only works in {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#View|Report view mode}.  
         *   - `AutoHdr` = Adjust column width to fit contents, including the header.  
         *     Only works in {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#View|Report view mode}.  
         *   - `Icon#` = Display icon next to column header, where `#` is the icon numberr of the {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL|ImageList}.  
         *   - `IconRight` = Icon is displayed on the right side of the column.
         * 
         * **Column data type**  
         *   - `Text` = Text-mode sorting, which is the initial default for every column. 
         *     Only the first 8190 characters are used when sorting (4094 if using Logical).  
         *     Text can perform up to x25 slower than Integer.  
         *   - `Integer` = Contains decimal or hexadecimal integers.  
         *     Non-integer values are considered 0 when sorting.  
         *   - `Float` = Contains floating point numbers.  
         *     Float can perform up to x25 slower than Integer.  
         * 
         * **Alignment**  
         * Alignment should come after data type
         *   - `Center` = Centers the text in the column. 
         *   - `Left` = Left-aligns the column's text.  
         *     Default for Text.  
         *   - `Right` = Right-aligns the column's text.  
         *     Default for Integer and Float.  
         This attribute need not be specified for Integer and Float columns 
         because they are right-aligned by default. 
         That default can be overridden by specifying something such as "Integer Left" 
         or "Float Center".
         * 
         * **Sorting**  
         *   - `Case` = The sorting of the column is case-sensitive (affects only text columns). If the options Case, CaseLocale, and Logical are all omitted, the uppercase letters A-Z are considered identical to their lowercase counterparts for the purpose of the sort.
         *   - `CaseLocale` = The sorting of the column is case-insensitive based on the current user's locale (affects only text columns). For example, most English and Western European locales treat the letters A-Z and ANSI letters like Ä and Ü as identical to their lowercase counterparts. This method also uses a "word sort", which treats hyphens and apostrophes in such a way that words like "coop" and "co-op" stay together.
         *   - `Desc` = Descending order. The column starts off in descending order the first time the user sorts it.
         *   - `Logical` = Same as CaseLocale except that any sequences of digits in the text are treated as true numbers rather than mere characters. For example, the string "T33" would be considered greater than "T4". Logical and Case are currently mutually exclusive: only the one most recently specified will be in effect.
         *   - `NoSort` = Prevents a user's click on this column from having any automatic sorting effect. However, the ColClick event is still raised, so the script can respond with a custom sort or other action. To disable sorting for all columns rather than only a subset, include NoSort in the ListView's options.
         *   - `Sort` = Immediately sorts the column in ascending order (even if it has the Desc option).
         *   - `SortDesc` = Immediately sorts the column in descending order.
         *   - `Uni` = Unidirectional sort. This prevents a second click on the same column from reversing the sort direction.
         * 
         * @param {(String)} [ColumnTitle]  
         * The new header of the column.  
         * If omitted, the header is left unchanged.  
         * @returns {()}  
         * @see @example <caption></caption>  
         */
        ModifyCol([ColumnNumber:=unset, Options:=unset, ColumnTitle:=unset]) => String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Listview is clicked.  
         *   
         *       ListView_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Listview is double-clicked.  
         * 
         *       ListView_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ColClick|`ColClick`} - A ListView's column header is clicked.  
         * 
         *       ListView_ColClick(GuiCtrl, ColNum)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the ListView or presses  
         *   Menu or Shift+F10 while the ListView has the keyboard focus.  
         * 
         *       ListView_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The ListView gains the keyboard focus.  
         * 
         *       ListView_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The ListView loses the keyboard focus.  
         * 
         *       ListView_LoseFocus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemCheck|`ItemCheck`} - The ListView item is checked or unchecked.  
         * 
         *       ListView_ItemCheck(GuiCtrl, RowNum, RowChecked)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemEdit|`ItemEdit`} - The ListView item's label is edited by the user.  
         *   The One of the following event(s). Expected callback format is included. must be used to edit labels.  
         * 
         *       ListView_ItemEdit(GuiCtrl, RowNum)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemFocus|`ItemFocus`} - The ListView item receives focus.  
         * 
         *       ListView_ItemFocus(GuiCtrl, RowNum)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemSelect|`ItemSelect`} - A ListView item is selected or deselected.  
         *   During multiple selections (like click+drag) the event is fired once for each item.  
         * 
         *       ListView_ItemSelect(GuiCtrl, RowNum, IsSelected)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the ListView's object  
         *     - `Info`: Row number of clicked item or 0 if not over an item  
         *     - `ColNum`: Column number of item  
         *       Column numbers do not change when columns are rearranged  
         *     - `RowNum`: The row number of the item  
         *     - `IsSelected`:
         *       - `1` = Item selected  
         *       - `0` = Item deselected  
         *     - `RowChecked`:
         *       - `1` = Row is checked  
         *       - `0` = Row is unchecked  
         *     - `Item`: Item's row or ID number  
         *       0 if the user clicked somewhere other than an item  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Checked`: Each row has a checkbox to the left side.  
         *   To add a row already checked, include the {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Check|Check}` option.  
         * - `Count#`: Specify an inital amount of rows where `#` is the starting amount. `Count20`  
         *   Using this option increases performance by preventing multiple row addition calls.  
         * - `Grid`: Provides visual horizontal and vertical boundaries between rows and columns.  
         * - `Hdr`: To hide the header, use `-Hdr`.  
         *   To make the header visible hte '+Hdr' option.  
         * - `Multi`: Specify `-Multi` to prevent the user from selecting more than one row at a time.  
         * - `NoSortHdr`: Makes header unclickable and take on a flat appearance.  
         *   This cannot be changed after the ListView is created.  
         * - `NoSort`: Turns off automatic sorting on column header click.  
         *   The header still behaves like a button and allows the {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ColClick|ColClick event}`  
         *   to be raised and allowing for custom sorting or other actions.  
         * - `ReadOnly`: Using `-ReadOnly` allows the first column to be editable.  
         *   The label can be edited with F2 (see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#WantF2|WantF2}`) or by clicking the label,  
         *   waiting a brief moment, then clicking again.  
         * - `R#`: Rows of height at creation, where # is the the number of rows that should be inside the control.  
         *   If the ListView is created with a view mode other than report view, the control is sized to fit rows of icons instead of rows of text.  
         *   Adding icons to a ListView's rows will increase the height of each row, which will make this option inaccurate.  
         * - `Sort`: The control is sorted alphabetically by first column contents.  
         * - `SortDesc`: The control is sorted in reverse alphabetical order by first column contents.  
         * - `WantF2`: Specify `-WantF2` to prevent F2 from editing the current selected item. WantF2 only works if `-ReadOnly` is also in effect.  
         * 
         * **View Modes**  
         * ListView has five viewing modes, of which the most common is the default `Report` view.  
         * - `Icon`: Shows a large-icon view. In this view and all the others except Report, the text in columns other than the first is not visible. To display icons in this mode, the ListView must have a large-icon ImageList assigned to it.  
         * - `Tile`: Shows a large-icon view but with ergonomic differences such as displaying each item's text to the right of the icon rather than underneath it. Checkboxes do not function in this view.  
         * - `IconSmall`: Shows a small-icon view.  
         * - `List`: Shows a small-icon view in list format, which displays the icons in columns. The number of columns depends on the width of the control and the width of the widest text item in it.  
         * - `Report`: Switches back to report view, which is the initial default. For example: LV.Opt("+Report").  
         * 
         * **Positioning and Sizing of Controls**  
         * - `W#` or `H#`: Width or Height where `#` is a number of pixels.  
         *    If omitted, width is calculated automatically.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as this control's starting `x` or `y` point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as this control's starting `x` or `y` point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *  
         * **Common Styles and Other Options**  
         * Prefixing with `+` adds/enables an option and `-` removes it. If no sign is provided, `+` is assumed.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is an RGB hex number `c0x0` to `cFFFFFF` (0x prefix is optional) or a color string `cRed`.  
         *   {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Color word list}: Black, Silver, Gray, White, Maroon, Red, Purple, Fuchsia, Green, Lime, Olive, Yellow, Navy, Blue, Teal, Aqua  
         * - `Disabled`: Applies a disabled state to the control preventing the user from focusing or modifying its contents.  
         *   Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to enable it later.  
         *   The word `Disabled` may optionally be followed immediately by a `0` for enabled or `1` for disabled to indicate starting state.  
         * - `Hidden`: The control is initially invisible.  
         *   Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to show it later.  
         *   The word `Hidden` may optionally be followed immediately by a `0` for visible or `1` for hidden to indicate the starting state.  
         * - `Section`: Sets current control as the new section control. Used with the `XS` and `YS` positioning options.  
         * - `Tabstop`: Enable a control to be tabbed to. When tabbing to a control with `-Tabstop`, that control is skipped over.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar.  
         * - `HScroll`: Provide or remove a horizontal scroll bar.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is an RGB hex number `c0x0` to `cFFFFFF` or a color string `cRed`.  
         *   Specifying `BackgroundDefault` or `-Background` applies the system's default background color.  
         *   {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Color word list}: Black, Silver, Gray, White, Maroon, Red, Purple, Fuchsia, Green, Lime, Olive, Yellow, Navy, Blue, Teal, Aqua  
         * - `Redraw`: When used with {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|Opt}, this option enables or disables redraw (visual updates) for a control by sending it a WM_SETREDRAW message.  
         *   When working with multiple controls or control elements, performance can be increased by disabling redraw: `-Redraw`  
         *   Don't forget to enable redraw when finished: `+Redraw` after all the changes are made.               
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   It has no effect when used on an existing control; however, this may change in a future version.  
         *   See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#SetImageList|`SetImageList()`}  
         * Sets or replaces an ImageList for displaying icons.  
         * Destroy the ImageList with {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Destroy|IL_Destroy()}.  
         * @param {(Integer)} ImageListID  
         * The ID number returned from a previous call to {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|IL_Create()}.
         * @param {(Integer)} IconType  
         * - Omit = Detected automatically. 
         * - `0` = Large icons. 
         * - `1` = Small icons. 
         * - `2` = State icons. 
         *   Not yet directly supported, but can be used via {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMesage()}
         * @returns {(Integer)}  
         * The ImageList's ID is returned, otherwise `0` on failure.  
         * @example <caption></caption>  
         */
        SetImageList(ImageListID [,IconType:=unset]) => String
    }
    
    /**
     */
    class MonthCal extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the control's Date-time stamp in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS format}.  
         * Use {@link https://www.autohotkey.com/docs/v2/Variables.htm#Now|A_Now} to set Value to current time.  
         * If the {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ChooseNone|choose none `+2` option} was used, setting  
         * Value to 0 will clear the DateTime control.
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The MonthCal's value changes.  
         *   
         *       MonthCal_Click(GuiCtrl, Info)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the MonthCal's object  
         *     - `Info`: Not used with MonthCal controls  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Multi`: Allows multi-select range with shift-click or click-drag to select a range of adjacent dates.  
         *   This option is forced when the control is created with the `Range` opttion.  
         *   Once the control is created, this option cannot be altered.  
         * - `RangeMIN-MAX`: Sets how far back or forward you can set the DateTime control.  
         *   MIN and MAX should be dates. Omitting one leaves that side of the range unrestricted.  
         * 
         *       goo.AddMonthCal('Range20220101-20221231')
         *       goo.AddMonthCal('Range-20250101115959')
         * - `4`: Display week numbers (1-52) to the left of each row of days.  
         *   Week 1 is defined as the first week that contains at least four days.  
         * - `8`: Prevent the circling of today's date within the control.  
         * - `16`: Prevent the display of today's date at the bottom of the control.  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         *   This can also be set by the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#SetFont|GuiCtrl.SetFont()}` method.
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Pic extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the picture file's path.  
         * If setting a new picture, zero or more options can come before the file path.  
         * Only 1 space or 1 tab should be used between each option and the file path.  
         * If both *W and *H are omitted, control's width and height are used.  
         * - `*W#` and `*H#` = Adjust the width or height of the image, where `#` is the size in pixels.  
         *   Using `*W0` or `*H0` will use the image's native width or height.  
         *   Using `*W-1` or `*H-1` preserves the aspect ratio when setting the other value.  
         *   Only one of the two should be set to -1.
         * - `*Icon#` = Select an icon from a group of them.  
         *   Or select an icon resource from a DLL or EXE file.  
         * @type String
         * @example <caption></caption>  
         * goo := Gui()
         * goo.AddText('xm ym', "Click the icon to cycle through through AHK's built-in icons.")
         * con := goo.AddPic('y+5 w0 h0 Icon1', A_AhkPath)
         * con.OnEvent('Click', pic_click_cycle_icons)
         * goo.Show('')
         * 
         * pic_click_cycle_icons(GuiCtrl, Info) {
         *     static icon_num := 1
         *     
         *     icon_num_max := 5
         *     icon_num++
         *     if (icon_num > icon_num_max)
         *         icon_num := 1
         *     
         *     TraySetIcon(A_AhkPath, icon_num)
         *     GuiCtrl.value := '*Icon' icon_num ' ' A_AhkPath
         * }
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Picture is clicked.  
         * 
         *       Pic_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Picture is double-clicked.  
         * 
         *       Pic_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Picture or presses  
         * Menu or Shift+F10 while the Picture has the keyboard focus.  
         * 
         *       Pic_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The Picture gains the keyboard focus.  
         * 
         *       Pic_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The Picture loses the keyboard focus.  
         * 
         *       Pic_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Picture's object  
         *     - `Info`: Not used with Picture controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Picture's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Icon#`: Use a specific icon from an icon group where # is the number of the icon.
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of height where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Specify `-1` to set height and keep aspect ratio
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Specify `-1` to set height and keep aspect ratio
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `AltSubmit`: Use Microsoft's GDIPlus.dll to load the image.  
         * This might result in a different appearance for GIF, BMP, and icon images.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
         *   the Picture to show through. Use `+Background` to remove this option later.  
         *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Picture extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the picture file's path.  
         * If setting a new picture, zero or more options can come before the file path.  
         * Only 1 space or 1 tab should be used between each option and the file path.  
         * If both *W and *H are omitted, control's width and height are used.  
         * - `*W#` and `*H#` = Adjust the width or height of the image, where `#` is the size in pixels.  
         *   Using `*W0` or `*H0` will use the image's native width or height.  
         *   Using `*W-1` or `*H-1` preserves the aspect ratio when setting the other value.  
         *   Only one of the two should be set to -1.
         * - `*Icon#` = Select an icon from a group of them.  
         *   Or select an icon resource from a DLL or EXE file.  
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Picture is clicked.  
         * 
         *       Pic_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Picture is double-clicked.  
         * 
         *       Pic_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Picture or presses  
         * Menu or Shift+F10 while the Picture has the keyboard focus.  
         * 
         *       Pic_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The Picture gains the keyboard focus.  
         * 
         *       Pic_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The Picture loses the keyboard focus.  
         * 
         *       Pic_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Picture's object  
         *     - `Info`: Not used with Picture controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Picture's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Icon#`: Use a specific icon from an icon group where # is the number of the icon.
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of height where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Specify `-1` to set height and keep aspect ratio
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Specify `-1` to set height and keep aspect ratio
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `AltSubmit`: Use Microsoft's GDIPlus.dll to load the image.  
         * This might result in a different appearance for GIF, BMP, and icon images.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
         *   the Picture to show through. Use `+Background` to remove this option later.  
         *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Progress extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the new position of the control.  
         * Relative adjustment can be done with operators like: `+=`, `-=`, `++`, and `--`
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Progress bar or presses  
         * Menu or Shift+F10 while the Progress bar has the keyboard focus.  
         * 
         *       Pic_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Progress object  
         *     - `Info`: Not used with Progress bar controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Progress bar's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `RangeMIN-MAX`: Sets the minimum and maximum ends of the progress bar. Default is `Range0-100`.  
         * - `Smooth`: Displays a simple, continuous bar.  
         * - `Vertical`: Makes the bar rise or fall vertically rather than horizontally.  
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default size: Vertical - Current font size x2, Horizontal - Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Default size: Vertical - 5 rows, Horizontal - Current font size x2
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Sets the color of the main bar where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets background color of the progress bar where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Radio extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The caption that displays on the radio.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust radio width if needed.
         * @type String
         * @example <caption>Changing radio caption.</caption>  
         * goo := Gui()
         * control := goo.AddCheckbox('w100 h50', 'change')
         * control.lowercase := 1
         * control.OnEvent('Click', change_text)
         * goo.Show('')
         * 
         * change_text(con, info) {
         *     if (con.lowercase)
         *         con.Text := StrUpper(con.Text)
         *         ,con.lowercase := 0
         *     else
         *         con.Text := StrLower(con.Text)
         *         ,con.lowercase := 1
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Retrieves or sets the checked state.  
         * Values can be:  
         * `1`: Checked  
         * `0`: Unchecked  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text property} to set/get the control text.
         * @type Integer
         */
        Value: Integer
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following events:  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Radio button is clicked.  
         * 
         *       Radio_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Radio button is double-clicked.  
         * 
         *       Radio_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Progress bar or presses  
         * Menu or Shift+F10 while the Progress bar has the keyboard focus.  
         * 
         *       Radio_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The Radio button gains the keyboard focus.  
         * 
         *       Radio_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The Radio button loses the keyboard focus.  
         * 
         *       Radio_LoseFocus(GuiCtrl, Reserved)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Radio's object  
         *     - `Info`: Not used with Radio button controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Radio button's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Checked`: Starts the button in the checked/on state.
         * - `Group`: Starts a new radio group. A new group is automatically started when a non-radio control is added.  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         *   This also moves the box from the left to the right side of the control.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Slider extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the new position of the control.  
         * Relative adjustment can be done with operators like: `+=`, `-=`, `++`, and `--`
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following events:  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The Slider's value changes.  
         * 
         *       Slider_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Progress bar or presses  
         * Menu or Shift+F10 while the Progress bar has the keyboard focus.  
         * 
         *       Slider_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Slider's object  
         *     - `Info`: Amount slider has changed between starting and stopping  
         *       If the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#AltSubmit|AltSubmit}` option is used the event is raised  
         *       after any type of value change is detected.  
         *     - `Item`: Not used with Slider controls.  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Slider's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Buddy1#` and `Buddy2#`: Specify controls to automatically reposition  
         *   at the ends of the slider, where `#` is the name or HWND of the control.  
         *   The {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|control Text}` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|ClassNN}` can also be used, but only up to the first space or tab.  
         *   Buddy1 appears left/top of the slider and Buddy2 appears right/bottom of it.  
         * - `Invert`: Reverses the slider direction. Low goes on the right/bottom and high on the left/top.  
         *   This option will not work with the `ToolTip` option.  
         * - `Center`: The slider (thumb) is blunt on both ends instead of pointed at one end.  
         * - `Left`: The slider (thumb) will upward, or to the left if `Vertical`.  
         * - `NoTicks`: Omit tickmarks alongside the slider track.  
         * - `Line#`: Distance to move when an arrow key is pressed, where `#` is the number of positions.  
         * - `Page#`: Distance to move when PgUp\PgDn is pressed, where `#` is the number of positions.  
         * - `RangeMIN-MAX`: Set slider value range, where `MIN` is the minimum and `MAX` is the maximum.  
         *   Default is `Range0-100`.  
         * - `Thick#`: Set slider (thumb) thickenss where `#` is pixels.  
         * - `TickInterval#`: Add marks along the track where `#` is how often each tick should show.  
         * - `ToolTip`: When dragging the thumb, the current value is shown in a tooltip.  
         *   To adjust tooltip position, use `ToolTipTop`, `ToolTipBottom`.  
         *   `ToolTipLeft`, `ToolTipRight` are used with `Vertical` sliders.  
         *   This option does not work with the `Invert` option.  
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of space, where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         *   Default: Sliders (horizontal): Current font size x15
         * - `H#`: Height of control where `#` is a number of pixels.  
         *   Defaults: Sliders (vertical): 5 rows, Sliders (horizontal): 30px  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `AltSubmit`: While dragging the slider (thumb), the {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`change event`} fires continuously.  
         *   Normally, the change event only fires on mouse release.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class StatusBar extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * The text of the first section of the status bar.  
         * Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#SB_SetText|StatusBar.SetText()} for more text options.  
         * @type String
         * @example <caption>Changing checkbox caption.</caption>  
         * goo := Gui()
         * control := goo.AddCheckbox('w100 h50', 'change')
         * control.lowercase := 1
         * control.OnEvent('Click', change_text)
         * goo.Show('')
         * 
         * change_text(con, info) {
         *     if (con.lowercase)
         *         con.Text := StrUpper(con.Text)
         *         ,con.lowercase := 0
         *     else
         *         con.Text := StrLower(con.Text)
         *         ,con.lowercase := 1
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following events:  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The StatusBar is clicked.  
         * 
         *       Ctrl_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The StatusBar is double-clicked.  
         * 
         *       Ctrl_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the StatusBar or presses  
         * Menu or Shift+F10 while the StatusBar has the keyboard focus.  
         * 
         *       Ctrl_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the StatusBar's object  
         *     - `Info`: The section number of the status bar clicked  
         *     - `Item`:   
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the StatusBar's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         *   The {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|-Theme}` option {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar_Usage|is required}` to change the StatusBar background.  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class Text extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the text in the control.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust text width if needed.
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|`Text`}  
         * Set or retrieve the text in the control.  
         * Use the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Move|Move()} method to adjust text width if needed.
         * @type String
         * @example <caption>Changing text case.</caption>  
         * goo := Gui()
         * control := goo.AddText('w100 h30', 'Change Case')
         * control.case := 0
         * control.OnEvent('Click', change_text)
         * goo.Show()
         * 
         * change_text(con, info) {
         *     con.case++
         *     switch con.case {
         *         case 1: con.Text := StrLower(con.text)
         *         case 2: con.Text := StrUpper(con.text)
         *         default: con.Text := StrTitle(con.text), con.case := 0
         *     }
         * }
         */
        Text: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following events:  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The Text is clicked.  
         * 
         *       Ctrl_Click(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The Text is double-clicked.  
         * 
         *       Ctrl_DoubleClick(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the Text or presses  
         * Menu or Shift+F10 while the Text has the keyboard focus.  
         * 
         *       Ctrl_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the Text's object  
         *     - `Info`: Not used with Text controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the Text's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Left`: Left-justifies the control's text within its available width.  
         * - `Right`: Right-justifies the control's text within its available width.  
         * - `Center`: Centers the control's text within its available width.  
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
         *   the GroupBox to show through. Use `+Background` to remove this option later.  
         *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class TreeView extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following event(s). Expected callback format is included.  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Click|`Click`} - The TreeView is clicked.  
         *   
         *       TreeView_Click(GuiCtrl, ItemID)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DoubleClick|`DoubleClick`} - The TreeView is double-clicked.  
         * 
         *       TreeView_DoubleClick(GuiCtrl, ItemID)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the TreeView or presses  
         *   Menu or Shift+F10 while the TreeView has the keyboard focus.  
         * 
         *       TreeView_ContextMenu(GuiCtrl, Item, RightClick, X, Y)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Focus|`Focus`} - The TreeView gains the keyboard focus.  
         * 
         *       TreeView_Focus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#LoseFocus|`LoseFocus`} - The TreeView loses the keyboard focus.  
         * 
         *       TreeView_LoseFocus(GuiCtrl, Reserved)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemCheck|`ItemCheck`} - The TreeView item is checked or unchecked.  
         * 
         *       TreeView_ItemCheck(GuiCtrl, ItemID, IsChecked)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemEdit|`ItemEdit`} - The TreeView item's label is edited by the user.  
         *   The {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#ReadOnly|`-ReadOnly` option} must be used to edit labels.  
         * 
         *       TreeView_ItemEdit(GuiCtrl, ItemID)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemExpand|`ItemExpand`} - The TreeView item becomes expanded or collapsed.  
         * 
         *       TreeView_ItemExpand(GuiCtrl, ItemID, IsExpanded)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ItemSelect|`ItemSelect`} - A TreeView item is selected or deselected.  
         * 
         *       TreeView_ItemSelect(GuiCtrl, ItemID)
         * - Callback Params:  
         *     - `GuiCtrlObj`: Reference to the TreeView's object  
         *     - `ItemID`: Unique ID of that TreeView item  
         *     - `Item`: Item ID of clicked item or 0 if not over an item  
         *     - `IsChecked`:  
         *       - `1` = Item is checked  
         *       - `0` = Item is unchecked  
         *     _ `IsExpanded`:  
         *       - `1` = Item is set to expanded  
         *       - `0` = Item is set to collapsed  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the control's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Buttons`: Specify `-Buttons` to remove the `+` and `-` symbols from the left of each item.  
         * - `Checked`: Add a checkbox at left of each item.  
         *   When {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Add|adding an item}`, use the {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Check|Check option}` to start it checked.  
         * - `ImageList#`: Add icons to a TreeView where `#` is the {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL|ImageListID}` returned from a previous call to {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|IL_Create()}`.  
         *   This option can only be used when creating a TreeView. Use {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#SetImageList|SetImageList()}`.  
         * - `Lines`: Specify `-Lines` disables the connecting lines between parents and children.  
         *   This also prevents the `+` and `-` buttons from being shown for top-level items.  
         * - `ReadOnly`: Specify `-ReadOnly` to allow the editing of each item.  
         *   The items can be edited with F2 (see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#WantF2|WantF2}) or by clicking the label,  
         *   waiting a brief moment, then clicking again.  
         * - `WantF2`: Specify `-WantF2` to prevent F2 from editing the current selected item.  
         *   WantF2 only works if `-ReadOnly` is also in effect.  
         *  
         * **Positioning and Sizing of Controls**  
         * - `R#`: Number of rows to display where `#` is the row number. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `C#`: Set text color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional):  
         *     `C0x000000` to `CFFffFF`  
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `CDefault` or `C`  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Background#`: Sets control background color where `#` is one of the following:  
         *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
         *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
         *     |           |           |           |           |
         *     | :--       | :--       | :--       | :--       |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Silver`  | `Black`   | `White`   | `Gray`    |
         *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
         *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
         *     
         *   - Reset/Default: `BackgroundDefault` or `-Background`  
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     */
    class UpDown extends Gui.Control {
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|`Value`}  
         * Set or retrieve the new position of the control.  
         * Relative adjustment can be done with operators like: `+=`, `-=`, `++`, and `--`
         * @type String
         * @example <caption></caption>  
         */
        Value: String
        
        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
         * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
         * @param {(String)} EventName  
         * One of the following events:  
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`Change`} - The UpDown's value changes.  
         * 
         *       Ctrl_Change(GuiCtrl, Info)
         * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Ctrl-ContextMenu|`ContextMenu`} - The user right-clicks the UpDown or presses  
         * Menu or Shift+F10 while the UpDown has the keyboard focus.  
         * 
         *       Ctrl_ContextMenu(GuiCtrl, Info, RightClick, X, Y)
         * - Callback Params:
         *     - `GuiCtrlObj`: Reference to the ListView's object  
         *     - `Info`: Not used with UpDown controls  
         *     - `RightClick`: Context menu activation  
         *       - `1` = Activated by right click  
         *       - `0` = Activated by `AppsKey` or `Shift+F10`  
         *     - `X` and `Y`: Check `RightClick` param  
         *       - Right Clicked = Coords of mouse click  
         *       - Keyboard = Coords of the UpDown's upper left corner  
         * @param {(String|FuncObj)} Callback  
         * A function, method, or object that is called when the event is raised.  
         * A callback's first parameter is always the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl} that raised the event.  
         * @param {(Integer)} [AddRemove]  
         * Adjust callback order or delete callback.  
         * - `1` = Add the callback after any previously registered callbacks.  
         * - `-1` = Add the callback before any previously registered callbacks.  
         * - `0` = Remove the callback.  
         * 
         * If multiple callbacks are registered, a callback that returns  
         * a non-empty string will stop all remaining callbacks from running.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString

        /**
         * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|`Opt()`}  
         * Sets various options and styles for the appearance and behavior of the control  
         * @param {(String)} Options  
         * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
         * **Control Specific Options**  
         * - `Horz`: Arrow buttons point left/right, become wider, and show under the Buddy.  
         *   Buttons are visually disconnected from the control.  
         *   Adding option `+16` forces the buttons to attach to their original position.
         * - `Left`/`Right`: The side of the Buddy the UpDown attaches to. Right is default.  
         *   This option cannot be changed after control creation.  
         * - `RangeMIN-MAX`: Set slider value range, where `MIN` is the minimum and `MAX` is the maximum.  
         *   Default is `Range0-100`.  
         * - `Wrap`: Going past the max range causes the number to start back at minimum.  
         *   Going below minimum wraps back around to max.  
         * - `16`: Specify `-16` to detach the UpDown from its Buddy.  
         *   It can now be positioned like a standard control with `W`, `H`, `X`, `Y` options.  
         * - `0x80`: Removes the 3 digit separator from being being displayed in the Buddy.  
         *    These seperators are removed automaticlaly when value is gotten from the UpDown control.  
         *    script retrieves it from the UpDown control itself rather than the buddy control.
         * - `Increments`: {@link https://www.autohotkey.com/docs/v2/scripts/index.htm#Custom_Increments_for_UpDown_Controls|Guide to changing UpDown inc/decrementation}`
         * - `Hexadecimal Format`: To change display to hex, use this UpDown {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|Message}`:  
         * 
         *       UDM_SETBASE := 0x046D, SendMessage(UDM_SETBASE, 16, 0, "msctls_updown321")
         * 
         * **Positioning and Sizing of Controls**  
         * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
         *   `R` takes precedence over `H`.  
         * - `W#`: Width of control where `#` is a number of pixels.  
         * - `H#`: Height of control where `#` is a number of pixels.  
         * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
         *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
         * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
         * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
         *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
         * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
         * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
         *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
         * 
         * **Common Styles and Other Options**  
         * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
         * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
         *   A control's name can be used to get a reference to that control from a GUI object.  
         * 
         *         GuiControl.Opt('+VMyControl')
         *         GuiControl := Gui['MyControl']  
         * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
         * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
         *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
         *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
         * 
         *       con.Opt('+Disabled0')
         *       var := 1, con.Opt('+Disabled' var)
         * - `Hidden`: The control is initially invisible.  
         *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
         *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
         * 
         *       con.Opt('+Hidden0')
         *       var := 1, con.Opt('+Hidden' var)
         * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
         * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
         * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
         * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
         *  
         * **Uncommon Styles and Options**
         * - `Border`: Provides a thin-line border around the control. Adding a border to an  
         *   existing control might require increasing the control's width and height by 1 pixel.  
         * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
         *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
         *   Enable redraw `+Redraw` after all changes have been made.  
         * - `Theme`: Used to override the window's current theme setting for the newly created control.  
         *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
         * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
         *   followed immediately by a decimal or hexadecimal style number.  
         * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
         *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
         * @returns {(String)}  
         * An empty string is always returned.  
         * @example <caption></caption>  
         */
        Opt(Options) => EmptyString
    }
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#BackColor|`BackColor`}  
     * Retrieves or sets the background color of the window.  
     * When setting BackColor, a string or number can be used:
     *   - Hex value: String or number. `0x000000` to `0xFFFFFF`.  
     *     If value is a string, the 0x prefix is optional.  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Color name}`: Black, Silver, Gray, White, Maroon, Red, Purple, Fuchsia, Green, Lime, Olive, Yellow, Navy, Blue, Teal, Aqua
     *   - Default color: The word `default` or an empty string.  
     * When retrieving backcolor, a string containing the hex value of the current color is returned.  
     * To set the color of a One of the following event(s). Expected callback format is included. method.  
     * @type Number|String
     * @example <caption>Changing background color with Drop Down List of colors.</caption>  
     * color_list := ['Default', 'Red','Yellow','Green','Cyan','Blue','Magenta']
     * goo := Gui()
     * goo.ddl := goo.AddDDL('xm ym Choose1', color_list)
     * goo.ddl.OnEvent('Change', color_change)
     * goo.Show('w200 h100')
     * 
     * color_change(con, info) {
     *     color_map := Map('Red' ,0xFF0000 ,'Yellow',0xFFFF00 ,'Green',0xFF00
     *                     ,'Cyan',0xFFFF   ,'Magenta',0xFF00FF,'Blue',0xFF )
     *     color_map.Default := 'Default'
     *     con.gui.BackColor := color_map[con.Text]
     * }
     */
    BackColor: String
        
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#FocusedCtrl|`FocusedCtrl`}  
     * Retrieves the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl object}` of the Gui's focused control.  
     * If the window is minimized or hidden, this property may not be effective.  
     * @type GuiControl
     * @example <caption>Focusing a specific control.</caption>  
     * goo := Gui()
     * goo.btn_exit := goo.AddButton('xm ym w100', 'Exit Script')
     * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     * goo.btn_msg := goo.AddButton('xm w100', 'PopUp Msg')
     * goo.btn_msg.OnEvent('Click', (*) => MsgBox('Pop Up!'))
     * goo.btn_exit.Focus()
     * txt := 'Even though "PopUp Msg" was added last, the '
     *     . '`nFocused button was set to "' goo.FocusedCtrl.Text '"'
     * goo.AddText('xm', txt)
     * goo.Show('y200')
     */
    FocusedCtrl: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Hwnd|`Hwnd`}  
     * Retrieves the window handle (HWND) of the GUI window.  
     * @type Integer
     * @example <caption>A GUI that can be hidden and shown with F1.</caption>  
     * *F1::toggle_gui()
     * 
     * toggle_gui()
     * 
     * toggle_gui() {
     *     static goo := make_gui()
     *     if WinExist('ahk_id ' goo.hwnd)
     *         goo.Hide()
     *     else goo.Show()
     *     return
     *     
     *     make_gui() {
     *         goo := Gui()
     *         goo.AddText('xm ym w150', 'Press F1 to hide/show GUI.')
     *         goo.btn_exit := goo.AddButton('xm w150', 'Click to close Script')
     *         goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     *         return goo
     *     }
     * }
     */
    Hwnd: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|`MarginX`}  
     * Retrieves or sets the size of horizontal margins between sides and subsequently created controls.  
     * @type Integer
     * @example <caption>Showing how margin settings affect padding.</caption>  
     * goo := Gui()
     * goo.MarginX := 20
     * goo.MarginY := 20
     * loop 9
     *     if Mod(A_Index-1, 3)
     *         goo.AddButton('x+m w100', 'Button ' A_Index)
     *     else goo.AddButton('xm y+m w100', 'Button ' A_Index)
     * goo.Show()
     */
    MarginX: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|`MarginY`}  
     * Retrieves or sets the size of vertical margins between sides and subsequently created controls.  
     * @type Integer
     * @example <caption>Showing how margin settings affect padding.</caption>  
     * goo := Gui()
     * goo.MarginX := 20
     * goo.MarginY := 20
     * loop 9
     *     if Mod(A_Index-1, 3)
     *         goo.AddButton('x+m w100', 'Button ' A_Index)
     *     else goo.AddButton('xm y+m w100', 'Button ' A_Index)
     * goo.Show()
     */
    MarginY: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MenuBar|`MenuBar`}  
     * Retrieves or sets the window's menu bar.  
     * This property is not set by default and a {@link |Menu() object} must be created and assigned to it.
     * @type MenuBar
     * @example <caption>Creating a custom GUI menu.</caption>  
     * make_gui()
     * 
     * make_gui() {
     *     static goo := Gui()
     *     goo.edit := goo.AddEdit('xm ym r50 w500 -Wrap +HScroll')
     *     
     *     m_file := Menu()
     *     m_file.Add('&Open', get_file)
     *     m_file.Add()
     *     m_file.Add('E&xit', (*) => ExitApp())
     *     
     *     m_about := Menu()
     *     m_about.Add('&Website', (*) => Run('https://www.autohotkey.com'))
     *     m_about.Add('&Docs', (*) => Run('https://www.autohotkey.com/docs/v2/'))
     *     m_about.Add('&Version', (*) => MsgBox('AHK Version ' A_AhkVersion))
     *     
     *     gu_menu := MenuBar()
     *     gu_menu.Add('&File', m_file)
     *     gu_menu.Add('&About', m_about)
     *     
     *     goo.MenuBar := gu_menu
     *     
     *     goo.Show('AutoSize')
     *     return
     *     
     *     get_file(name, pos, control) {
     *         path := FileSelect(,,,'*.txt')
     *         if FileExist(path)
     *             goo.edit.Value := FileRead(path)
     *     }
     * }
     */
    MenuBar: MenuBar
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Name|`Name`}  
     * Retrieves or sets a custom name for the GUI window.  
     * @type String
     * @example <caption>Setting and retrieving a GUI name.</caption>  
     * goo := Gui()
     * goo.Name := 'Main'
     * goo.Show('w500 h200')
     * MsgBox('Gui name is: ' goo.Name)
     */
    Name: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Title|`Title`}  
     * Retrieves or sets the GUI's title.  
     * @type String
     * @example <caption>Make an edit box that lets you change the GUI title.</caption>  
     * goo := Gui()
     * goo.AddText('xm ym w400', 'Enter text to change window title:')
     * goo.Edit := goo.AddEdit('xm w400 r1 +BackgroundBlack')
     * goo.Edit.SetFont('s10 cWhite' ,'Courier New')
     * goo.Edit.OnEvent('Change', update_title)
     * goo.Show('AutoSize')
     * 
     * update_title(con, info) {
     *     if (con.Value = '')
     *         con.gui.title := A_ScriptName
     *     else con.gui.title := con.Value
     * }
     */
    Title: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#__Item|`__Item`}  
     * Is the name of  the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl object}` associated with the specified {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|name}`, {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|text}`, {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|ClassNN}` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Hwnd|HWND}`.  
     * @type GuiControl
     */
    __Item[Name] => Gui.Control
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|`GUI`}  
     * Creates a new Gui object.  
     * @param {(String)} [Options]  
     * Zero or more Gui options, separated by spaces and/or tabs.  
     * For best performance, set all options in 1 call and do so before the window is created.  
     * Use `-` before an option to remove it or `+` to add it. Using no sign is the same as using `+`.  
     * - `AlwaysOnTop`: Makes the window stay on top of all other windows. Same effect as {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop}`.  
     * - `Border`: Provides a thin-line border around the window.  
     * - `Caption`: Include the standard title bar and a thick window border/edge. If using {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|WinSetTransColor}`, remove Caption only after setting the TransColor.  
     * - `Disabled`: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Owner|Owner}`).  
     * - `DPIScale`: If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and GuiControl methods/properties are automatically scaled based on screen DPI.  
     *   {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenDPI|A_ScreenDPI} contains the system's current DPI.  
     *   DPI scaling only applies to the Gui and GuiControl methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work.  
     * - `LastFound`: Sets the window to {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|last found window}`. This is done automatically in a GUI thread to allow functions such as {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle}` and {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|WinSetTransparent}` to operate on it even if it is hidden.  
     * - `MaximizeBox`: Enables the maximize button in the title bar. This is included when the Resize option is used.  
     * - `MinimizeBox`: Enables the minimize button in the title bar.  
     * - `MaxSize` or `MinSize`: Set, adjust, or remove the minimum/maximum size of the client area of the window, such as when the user drags its edges to resize it.  
     *   `+MaxSize`/`+MinSize` uses the current window size as the maximum/minimum.  
     *   Alternatively, `+MaxSize640x480`/`+MinSize640x480` would set the max/min size to 640 pixels wide by 480 pixels tall and the width or height may be omitted, though the `x` separator must always be present.  
     * - `OwnDialogs`: Should be specified in each thread for which subsequently displayed MsgBox, InputBox, FileSelect, and DirSelect dialogs should be owned by the window.  
     *   These dialogs become modal, meaning that the user cannot interact with the Gui until the dialog box is dismissed.  
     *   ToolTip cannot become modal even though they become owned. Instead, they wilstay always on top of the owner.  
     * - `Owner`: Causes the window to be owned by another. Include the handle (HWND) to another window after the word owner to make the Gui owned by that Window.  
     *   Omitting a handle (HWND) will make the Gui owned by the script's main window.  
     * - `Parent`: Use `+Parent` immediately followed by the handle (HWND) of any window or control to use it as the parent of this window while `-Parent` will revert it back to a top-level window.  
     * - `Resize`: Makes the window resizable and enables its maximize button in the title bar. The maximize button can be removed with `-MaximizeBox`.  
     * - `SysMenu`: Adds or removes the system menu and icon in the window's upper left corner. This includes the minimize, maximize, and close buttons in the title bar.  
     * - `Theme`: If `-Theme` is used, all subsequently created controls in the window will have the Classic Theme appearance.  
     *   Theme can also be used in a control's options during its creation such as `g.AddButton('-Theme')`.  
     * - `ToolWindow`: Provides a narrower title bar, removes the taskbar button, and hides both the maximize and minimize buttons.  
     * - `0x0` Unnamed Style: Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.  
     * - `E0x0` Unnamed ExStyle: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For styles not {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|documented here}`, see {@link https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles|Extended Window Styles | Microsoft Docs}` for a complete list.  
     * @param {(String)} [Title]  
     * The window title. If omitted, it defaults to the current value of {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptName|A_ScriptName}`.  
     * @param {(Object)} [EventObj]  
     * An "event sink", or object to bind events to.  
     * If EventObj is specified, {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent()}
     * , {@link https://www.autohotkey.com/docs/v2/lib/GuiOnNotify.htm|OnNotify()}
     * , and {@link https://www.autohotkey.com/docs/v2/lib/GuiOnCommand.htm|OnCommand()}
     * can be used to register methods of EventObj to be called when an event is raised.  
     * If omitted or empty, any string passed to OnEvent's Function parameter is interpreted as a function name.
     * @returns {(Gui)}  
     * New gui object  
     * @example <caption>Basic GUI example.</caption>  
     * goo := Gui()
     * goo.btn_exit := goo.AddButton('xm ym w100', 'Exit Script')
     * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     * goo.Show('AutoSize')
     */
    Static Call([Options:='', Title:=A_ScriptName, EventObj:=unset]) => Gui
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`Add()`}  
     * Creates and adds a control to the Gui, such as text, a button, or a checkbox.  
     * Each control type has it's own `AddType()` function such as `AddButton()` or `AddText()`.
     * @param {(String)} ControlType  
     * One of the following control types:  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ActiveX|`ActiveX`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|`Button`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|`Checkbox`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|`ComboBox`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Custom|`Custom`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|`DateTime`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DropDownList|`DDL`} / {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DropDownList|`DropDownList`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|`Edit`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|`GroupBox`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Hotkey|`Hotkey`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Link|`Link`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|`ListBox`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm|`ListView`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#MonthCal|`MonthCal`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Picture|`Pic`} / {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Picture|`Picture`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Progress|`Progress`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|`Radio`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|`Slider`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|`StatusBar`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab`} / {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab2`} / {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab3`}
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|`Text`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm|`TreeView`}  
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|`UpDown`}  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     *   For a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox}`, this is the number of controls to reserve space for inside the box.  
     *   For a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DropDownList|DropDownList}`  
     *   , {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|ComboBox}`
     *   , and {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|ListBox}`
     *   , R sets number of items visible in control's list portion.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   If omitted, default values are:  
     *   - Tab: Current font size x30 plus the current {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|MarginX}` x3.  
     *   - Progress Bar (vertical): Current font size x2
     *   - Progress Bar (horizontal), Sliders (horizontal), DropDownLists/DDls,  
     *     ComboBoxes, ListBoxes, GroupBoxes, Edits, and Hotkeys: Current font size x15
     *   - GroupBoxes: Current font size x18
     *   - All others: Width is calculated automatically.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Defaults if `H` and `R` are omitted:  
     *   - DropDownList/DDL, ComboBoxes, ListBoxes, and Edit (multi-line and empty): 3 rows
     *   - GroupBoxes: 2 rows
     *   - Sliders (vertical), Progress Bars: 5 rows
     *   - Sliders (horizontal): 30px
     *   - Progress Bars (horizontal): Current font size x2
     *   - Hotkey: 1 row
     *   - Tab1/2/3: 10 rows
     *   - All others:  Height is calculated automatically.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox}` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}`.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)}` or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: Use control's alternate submit method.  
     *   DropDownList, ComboBox, ListBox, Tab: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit} uses selected item's position instead of its text.  
     *   ComboBox: If no item is selected, the text of the edit field is stored.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     *   The color option does not affect {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|buttons} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|status bars}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|DateTime},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab2},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}
     * - `Right`: Right-justifies the control's text within its available width.  
     *   For {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox} and {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio Buttons}, this also moves the box from the left side to the right.  
     *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|DateTime},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Link|Link},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab2},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}
     * - `Center`: Centers the control's text within its available width.  
     *   Applies to: {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|Button},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|Checkbox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|Edit},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|Radio},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|Slider},
     *   {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|Text}
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     *   This is enabled by default for almost all controls.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *   Note about {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|ListBoxes}: Horizontal scrolling width defaults to 3 times the ListBox's width.  
     *   To specify a different scrolling width, include a number immediately after the word HScroll.  
     *  
     * **Uncommon Styles and Options**
     * - `BackgroundTrans`: Uses a transparent background, which allows any control that lies behind  
     *   a Text, Picture, or GroupBox control to show through.  
     *   Use GuiCtrl.Opt("+Background") to remove this option later.  
     *   An error is thrown if a control type does not support this option.  
     *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String|Number|Array)} [ControlSpecific]  
     * Control specific setting.  
     * @returns {(GuiControl)}  
     * GuiControl Object
     * @example <caption>Adding an exit button to a GUI.</caption>  
     * goo := Gui()
     * btn := goo.Add('Button', 'xm ym w100', 'Exit Script')
     * btn.OnEvent('Click', (*) => ExitApp())
     * goo.Show('AutoSize')
     */
    Add(ControlType [,Options:='', ControlSpecific:=unset]) => Gui.Control
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddActiveX()`}  
     * Adds an ActiveX control to the Gui.  
     * When the control is created, the ActiveX object can be retrieved via GuiCtrl.Value
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox}` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}`.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)}` or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [ActiveXName]  
     * The ActiveX component name to add.
     * @returns {(Gui.ActiveX)}  
     * ActiveX Control Object
     * @see {@link https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752085(v=vs.85)|WebBrowser Object}
     * @example <caption>Adding an ActiveX control to a GUI.</caption>  
     * goo := Gui()
     * goo.MarginX := goo.MarginY := 0
     * goo.web := goo.AddActiveX("x0 y0 w1024 h768", "Shell.Explorer")
     * ; The ActiveX object is stored in the 'value' property
     * goo.web.value.Navigate("https://www.autohotkey.com/docs/v2/index.htm")
     * goo.Show()
     */
    AddActiveX([Options:='', ActiveXName:=unset]) => Gui.ActiveX
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddButton()`}  
     * Adds a push button, which can be pressed to trigger an action.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces or tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [BtnText]  
     * Text on buttons can include new lines `` `n ``.  
     * An ampersand `&` before a letter in the text causes `Alt` plus that letter to become a shortcut.  
     * To include a literal ampersand, use 2 ampersands in a row `&&`.
     * @returns {(Gui.Button)}  
     * Button Control Object
     * @example <caption>Adding an exit button to a GUI.</caption>  
     * goo := Gui()
     * goo.btn_exit := goo.AddButton('xm ym w100 h40', 'Exit`nScript')
     * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     * goo.Show('AutoSize')
     */
    AddButton([Options:='', BtnText:='']) => Gui.Button
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddCheckbox()`}  
     * Adds a Checkbox control that can be  
     * checked or unchecked to represent a toggleable state.  
     * If the {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#CheckBox|Check3}` option is used, checkboxes have a 3rd "graycheck" state.
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Check3`: Adds a 3rd "indeterminate" gray checkmark state to the checkbox.  
     *   This can be used to indidcate the checkbox has neither been checked or unchecked.  
     * - `Checked` or `CheckedGray`: Starts the checkbox checked or checked grey/indeterminate.  
     *   `Checked` may also be followed by a 0 (unchecked), 1 (checked), or -1 (gray checked).  
     *  
     *       goo.AddCheckBox('+Checked0')
     *       var := 1, goo.AddCheckBox('+Checked' var)
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     *   This also moves the box from the left to the right side of the control.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Label]  
     * Label to display next to the checkbox. Can include linefeeds `` `n ``.  
     * @returns {(Gui.Checkbox)}  
     * Checkbox Control Object
     * @example <caption>Make a checkbox to enable/disable a control.</caption>  
     * goo := Gui()
     * goo.cb_lock := goo.AddCheckbox('xm ym w200 Checked', 'Disable close button')
     * goo.cb_lock.OnEvent('Click', toggle_lock)
     * goo.btn_exit := goo.AddButton('xm w200 Disabled', 'Close')
     * goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     * goo.Show('AutoSize')
     * 
     * toggle_lock(ctrl, info) {
     *     ctrl.gui.btn_exit.Enabled := !ctrl.Value
     * }
     */
    AddCheckbox([Options:='', Label:='']) => Gui.Checkbox
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddCustom()`}  
     * Add a custom control that is not directly supported by AutoHotkey. To do so, include the word "Class" followed by the {@link https://learn.microsoft.com/en-us/windows/win32/controls/individual-control-info|Win32 class name}` of the desired control in the options field.  
     *  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}`.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [ControlSpecific]
     * @returns {(Gui.Custom)}  
     * Custom Control Object
     * @example <caption>Adding a ComboBoxEx to a GUI.</caption>  
     * goo := Gui()
     * goo.ComboBoxEx := goo.AddCustom('ClassComboBoxEx32')
     * goo.Show('AutoSize')
     */
    AddCustom([Options:='', ControlSpecific:='']) => Gui.Custom
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddDateTime()`}  
     * Adds a DateTime control to the Gui that provides a single-lined  
     * control for the date and/or time along with a calander dropdown button.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose`: Pre-select a date or time other than the current date/time.  
     *   Choose should be followed by a DTS in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHHMISS format}`.  
     *   When setting the time, the full date and time must be provided.  
     *   `ChooseNone` adds a checkbox to toggle usable state (similar to a checkbox greycheck).  
     * - `RangeMIN-MAX`: Sets how far back or forward you can set the DateTime control.  
     *   MIN and MAX should be dates. Omitting one leaves that side of the range unrestricted.  
     * 
     *       goo.AddDateTime('Range20220101-20221231')
     *       goo.AddDateTime('Range-20250101115959')
     * - `Right`: Right edge of drop-down calendar aligns with the right side of the control.  
     * - `Left`: Left edge of drop-down calendar aligns with the left side of the control.  
     * - `1`: Provide an up-down control to the right of the control to modify date-time values.  
     *   This replaces the button of the drop-down month calendar. Does not work with the `LongDate` option.  
     * - `2`: Provide a checkbox inside the control, similar to `CheckNone`.  
     *   When unchecked, the control is greyed out and indicates no date/time is selected.  
     *   This option cannot be added or removed after the control is created.  
     * - `Colors`: Day number colors inside the drop-down calendar obey {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#SetFont|Gui.SetFont()}` or the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|C option'}`.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   R takes precedence over H.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *     Reset color to default.  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [DateFormat]  
     * Sets the desired {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTimeFormat|display format}` of a DateTime control.
     * - `ShortDate`: Locale short date format. Example: 6/1/2005  
     * - `LongDate`: Locale long date format. Example: Wednesday, June 01, 2005  
     * - `Time`: Shows locale time only. Example: 9:37:45 PM  
     *   The date is still present in the control even though it's not shown.  
     *   It will be retrieved along with the time in the YYYYMMDDHH24MISS format.  
     * - `Custom`: Any combination of {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|date and time formats}`.  
     * @returns {(Gui.DateTime)}  
     * DateTime Control Object
     * @example <caption>Adding a DateTime control set to v2's release date.</caption>  
     * goo := Gui()
     * goo.date := goo.AddDateTime('xm ym choose20221220021600', 'LongDate')
     * goo.date := goo.AddDateTime('xm', "'Date:' MM/dd/yy 'Time:' hh:mm:ss tt")
     * goo.Show('AutoSize')
     */
    AddDateTime([Options:='', DateFormat:='ShortDate']) => Gui.DateTime
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddEdit()`}  
     * Adds a control that provides a free-form text area for the user to type in.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Limit`: Restricts input to the visible width of the edit field.  
     * - `Limit#`: Set the character limit of the control where `#` is the limit number.  
     * - `Lowercase`: The characters typed by the user are automatically converted to lowercase.  
     * - `Multi`: Allows more than one line of text.  
     * - `Number`: Allows only digits to be typed into the edit field. Non-digits can still be pasted in.  
     *   Attaching an {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|UpDown}` control also forces +Number.  
     * - `Password`: Hides the user input of a single-lined edit control.  
     *   To change the masking character, include the new char immediately after password:  
     *   
     *        goo.AddEdit('+Password*'), goo.AddButton('+Password#')
     * - `ReadOnly`: Prevent the user from changing the control's contents, but text can still be copied.  
     * - `T#`: Set tab stop distance where `#` is the amount of {@link https://learn.microsoft.com/en-us/previous-versions/windows/desktop/bb226789(v=vs.85)|dialog units}` to use (a unit determined by the OS).  
     *   A single tab stop sets the default tab distance. Default value is 32.  
     *   Multiple tab stops (up to 50) can be set to define where each tab should go to.  
     *   
     *        goo.AddEdit('T5'), goo.AddEdit('T10 T20 T50 T100')
     * - `Uppercase`: Convert all characters in the control to uppercase.  
     * - `WantCtrlA`: Allow Ctrl+A to highlight all text or `-WantCtrlA` to disable it.  
     * - `WantReturn`: Allows Enter to create a new line.  
     *   `-WantReturn` causes Enter will activate the Gui's default control.  
     *   New lines can still be added by using Ctrl+Enter.  
     * - `WantTab`: If enabled, Tab produces a tab character otherwise tab navigates to the next control.  
     *   In a multiline tab, a tab can still be produced with Ctrl+Tab.  
     * - `Wrap`: Enables word-wrapping in a multi-line edit control.  
     *   This style cannot be changed after the control has been created.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Text]  
     * The initial text of the control.  
     * @returns {(Gui.Edit)}  
     * Edit Control Object
     * @example <caption>Make an edit box that lets you change the GUI title.</caption>  
     * goo := Gui()
     * goo.AddText('xm ym w400', 'Enter text to change window title:')
     * goo.Edit := goo.AddEdit('xm w400 r1 +BackgroundBlack')
     * goo.Edit.SetFont('s10 cWhite' ,'Courier New')
     * goo.Edit.OnEvent('Change', update_title)
     * goo.Show('AutoSize')
     * 
     * update_title(con, info) {
     *     if (con.Value = '')
     *         con.gui.title := A_ScriptName
     *     else con.gui.title := con.Value
     * }
     */
    AddEdit([Options:='', Text:='']) => Gui.Edit
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddGroupBox()`}  
     * Adds a rectangular border/frame control that can  
     * be labeled and used to group related controls.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: The number of controls to reserve space for. 
     *   This number can be a float. Default: 2 rows
     * - `W#`: Width of control where `#` is a number of pixels. Default: Current font size x18  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
     *   the GroupBox to show through. Use `+Background` to remove this option later.  
     *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Label]  
     * The text label to display at the top of the GroupBox.  
     * @returns {(Gui.GroupBox)}  
     * GroupBox Control Object
     * @example <caption>Create a GUI that toggles AlwaysOnTop.</caption>  
     * goo := Gui()
     * goo.gb_radio := goo.AddGroupBox('xm ym w160 Section Center', 'Set AlwaysOnTop:')
     * goo.rad_on := goo.AddRadio('xs+10 ys+25 w60', 'Enable')
     * goo.rad_on.OnEvent('Click', set_aot)
     * goo.rad_off := goo.AddRadio('x+20 w60 Right', 'Disable')
     * goo.rad_off.OnEvent('Click', set_aot)
     * goo.Show('AutoSize')
     * 
     * set_aot(control, info) {
     *     if (control.Text = 'Enable')
     *         control.gui.Opt('+AlwaysOnTop')
     *     else control.gui.Opt('-AlwaysOnTop')
     * }
     */
    AddGroupBox([Options:='', Label:='']) => Gui.GroupBox
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddHotkey()`}  
     * Adds a Hotkey control to the Gui that looks similar  
     * to an edit control but will detect and show what keys are being pressed.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Limit#`: Restrict the types of hotkeys the user can enter where `#` is one of the following:
     *   - 1: Prevent unmodified keys  
     *   - 2: Prevent Shift-only keys  
     *   - 4: Prevent Ctrl-only keys  
     *   - 8: Prevent Alt-only keys  
     *   - 16: Prevent Shift+Ctrl keys  
     *   - 32: Prevent Shift+Alt keys  
     *   - 64: Not supported (will not behave correctly)  
     *   - 128: Prevent Shift+Ctrl+Alt keys  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels. Default is font size x15.  
     * - `H#`: Height of control where `#` is a number of pixels. Default is 1 row
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [DefaultKey]  
     * A string in {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey Format}`. See {@link https://www.autohotkey.com/docs/v2/KeyList.htm|key list}` for key names.  
     * The only supported modifiers are `+` Shift, `!` Alt, and `^` Control.  
     * 
     * @returns {(Gui.Hotkey)}  
     * Hotkey Control Object
     * @example <caption>Use Hotkey control to create a GUI close hotkey.</caption>  
     * goo := Gui()
     * goo.AddText('xm ym', 'Set a hotkey to close script:')
     * goo.Hotkey_Close := goo.AddHotkey('xm', '^+F1')
     * goo.Button_Set := goo.AddButton('xm', 'Set')
     * goo.Button_Set.OnEvent('Click', create_hotkey)
     * goo.Show()
     *  
     * create_hotkey(*) => Hotkey(goo.Hotkey_Close.Value, (*) => Exitapp())
     */
    AddHotkey([Options:='', DefaultKey:='']) => Gui.Hotkey
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddLink()`}  
     * Adds a text control that accepts hyperlinks.  
     * Use {@link https://www.w3schools.com/tags/tag_a.asp|HTML anchor tags `<a></a>`} to create a hyperlink.  
     * `<a href="http://google.com">Google Search</a>`
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Text]  
     * Text to include along with any HTML anchor tags to create the link.  
     * @returns {(Gui.Link)}  
     * Link Control Object
     * @example <caption>Adding text with a hyperlink to a GUI.</caption>  
     * goo := Gui()
     * urlv1 := 'https://www.autohotkey.com/docs/v1/'
     * urlv2 := 'https://www.autohotkey.com/docs/v2/'
     * goo.AddLink('xm ym', 'Link to ' make_url_tag(urlv1, 'v1 Docs')
     *     . '`nAnd the ' make_url_tag(urlv2, 'v2 Docs'))
     * goo.Show('w200 h100')
     * 
     * make_url_tag(url, text) => '<a href="' url '">' text '</a>'
     */
    AddLink([Options:='', Text:='']) => Gui.Link
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddListView()`}  
     * Adds an elaborate control that handles  
     * rows and columns of information in a grid. Similar to Windows Explorer in Detail View mode.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Checked`: Each row has a checkbox to the left side.  
     *   To add a row already checked, include the {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Check|Check}` option.  
     * - `Count#`: Specify an inital amount of rows where `#` is the starting amount. `Count20`  
     *   Using this option increases performance by preventing multiple row addition calls.  
     * - `Grid`: Provides visual horizontal and vertical boundaries between rows and columns.  
     * - `Hdr`: To hide the header, use `-Hdr`.  
     *   To make the header visible hte '+Hdr' option.  
     * - `Multi`: Specify `-Multi` to prevent the user from selecting more than one row at a time.  
     * - `NoSortHdr`: Makes header unclickable and take on a flat appearance.  
     *   This cannot be changed after the ListView is created.  
     * - `NoSort`: Turns off automatic sorting on column header click.  
     *   The header still behaves like a button and allows the {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ColClick|ColClick event}`  
     *   to be raised and allowing for custom sorting or other actions.  
     * - `ReadOnly`: Using `-ReadOnly` allows the first column to be editable.  
     *   The label can be edited with F2 (see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#WantF2|WantF2}`) or by clicking the label,  
     *   waiting a brief moment, then clicking again.  
     * - `R#`: Rows of height at creation, where # is the the number of rows that should be inside the control.  
     *   If the ListView is created with a view mode other than report view, the control is sized to fit rows of icons instead of rows of text.  
     *   Adding icons to a ListView's rows will increase the height of each row, which will make this option inaccurate.  
     * - `Sort`: The control is sorted alphabetically by first column contents.  
     * - `SortDesc`: The control is sorted in reverse alphabetical order by first column contents.  
     * - `WantF2`: Specify `-WantF2` to prevent F2 from editing the current selected item. WantF2 only works if `-ReadOnly` is also in effect.  
     * 
     * **View Modes**  
     * ListView has five viewing modes, of which the most common is the default `Report` view.  
     * - `Icon`: Shows a large-icon view. In this view and all the others except Report, the text in columns other than the first is not visible. To display icons in this mode, the ListView must have a large-icon ImageList assigned to it.  
     * - `Tile`: Shows a large-icon view but with ergonomic differences such as displaying each item's text to the right of the icon rather than underneath it. Checkboxes do not function in this view.  
     * - `IconSmall`: Shows a small-icon view.  
     * - `List`: Shows a small-icon view in list format, which displays the icons in columns. The number of columns depends on the width of the control and the width of the widest text item in it.  
     * - `Report`: Switches back to report view, which is the initial default. For example: LV.Opt("+Report").  
     * 
     * **Positioning and Sizing of Controls**  
     * - `W#` or `H#`: Width or Height where `#` is a number of pixels.  
     *    If omitted, width is calculated automatically.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as this control's starting `x` or `y` point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as this control's starting `x` or `y` point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefixing with `+` adds/enables an option and `-` removes it. If no sign is provided, `+` is assumed.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is an RGB hex number `c0x0` to `cFFFFFF` (0x prefix is optional) or a color string `cRed`.  
     *   {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Color word list}: Black, Silver, Gray, White, Maroon, Red, Purple, Fuchsia, Green, Lime, Olive, Yellow, Navy, Blue, Teal, Aqua  
     * - `Disabled`: Applies a disabled state to the control preventing the user from focusing or modifying its contents.  
     *   Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to enable it later.  
     *   The word `Disabled` may optionally be followed immediately by a `0` for enabled or `1` for disabled to indicate starting state.  
     * - `Hidden`: The control is initially invisible.  
     *   Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to show it later.  
     *   The word `Hidden` may optionally be followed immediately by a `0` for visible or `1` for hidden to indicate the starting state.  
     * - `Section`: Sets current control as the new section control. Used with the `XS` and `YS` positioning options.  
     * - `Tabstop`: Enable a control to be tabbed to. When tabbing to a control with `-Tabstop`, that control is skipped over.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar.  
     * - `HScroll`: Provide or remove a horizontal scroll bar.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is an RGB hex number `c0x0` to `cFFFFFF` or a color string `cRed`.  
     *   Specifying `BackgroundDefault` or `-Background` applies the system's default background color.  
     *   {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Color word list}: Black, Silver, Gray, White, Maroon, Red, Purple, Fuchsia, Green, Lime, Olive, Yellow, Navy, Blue, Teal, Aqua  
     * - `Redraw`: When used with {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Opt|Opt}, this option enables or disables redraw (visual updates) for a control by sending it a WM_SETREDRAW message.  
     *   When working with multiple controls or control elements, performance can be increased by disabling redraw: `-Redraw`  
     *   Don't forget to enable redraw when finished: `+Redraw` after all the changes are made.               
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   It has no effect when used on an existing control; however, this may change in a future version.  
     *   See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Array)} [ColumnTitles]  
     * An array of strings to use as the title/header for each column.  
     * @returns {(Gui.ListView)}  
     * ListView Control Object
     * @example <caption>Create ListView from script folder files.</caption>  
     * goo := Gui()
     * lv := goo.AddListView('xm ym w800 h400', ['Name', 'Dir', 'Extension'])
     * loop files A_ScriptDir '\*.*'
     *     lv.Add('', A_LoopFileName, A_LoopFileDir, A_LoopFileExt)
     * 
     * lv.ModifyCol()
     * 
     * goo.Show()
     */
    AddListView([Options:='', ColumnTitles:=[]]) => Gui.ListView
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddMonthCal()`}  
     * Adds a tall and wide control that displays all  
     * the days of the month in calendar format. The user may select a single date or a range of dates.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Multi`: Allows multi-select range with shift-click or click-drag to select a range of adjacent dates.  
     *   This option is forced when the control is created with the `Range` opttion.  
     *   Once the control is created, this option cannot be altered.  
     * - `RangeMIN-MAX`: Sets how far back or forward you can set the DateTime control.  
     *   MIN and MAX should be dates. Omitting one leaves that side of the range unrestricted.  
     * 
     *       goo.AddMonthCal('Range20220101-20221231')
     *       goo.AddMonthCal('Range-20250101115959')
     * - `4`: Display week numbers (1-52) to the left of each row of days.  
     *   Week 1 is defined as the first week that contains at least four days.  
     * - `8`: Prevent the circling of today's date within the control.  
     * - `16`: Prevent the display of today's date at the bottom of the control.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     *   This can also be set by the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#SetFont|GuiCtrl.SetFont()}` method.
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Integer)} [Date]  
     * Set the highlighted date. 
     * @returns {(Gui.MonthCal)}  
     * MonthCal Control Object
     * @example <caption>Adding a Month Calendar to a GUI.</caption>  
     * goo := Gui()
     * goo.txt := goo.AddText('xm ym', 'Hold shift or control to select a range of dates:')
     * goo.Cal := goo.AddMonthCal('xm Multi', 20221220)
     * goo.Show('AutoSize')
     */
    AddMonthCal([Options:='', Date:=A_Now]) => Gui.MonthCal
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddPic()`}  
     * Adds control containing an image.  
     * Types: `ICO`,`CUR`,`ANI`,`EXE`,`DLL`,`CPL`,`SCR`,`PNG`,`TIF`,`Exif`,`WMF`,`EMF`, Other Icon Resources  
     * GDIPlus (AltSubmit): `GIF`,`JPG`,`BMP`,`ICO`,`CUR`,`ANI`,`PNG`,`TIF`,`Exif`,`WMF`,`EMF`  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Icon#`: Use a specific icon from an icon group where # is the number of the icon.
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of height where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Specify `-1` to set height and keep aspect ratio
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Specify `-1` to set height and keep aspect ratio
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `AltSubmit`: Use Microsoft's GDIPlus.dll to load the image.  
     * This might result in a different appearance for GIF, BMP, and icon images.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
     *   the Picture to show through. Use `+Background` to remove this option later.  
     *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Path]  
     * Path to the image file.  
     * If a full path isn't provided, {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}` is used as the starting directory.  
     * @returns {(Gui.Pic)}  
     * Picture Control Object  
     * @example <caption>Using picture controls to view AHK's 5 built-in icons.</caption>  
     * ; Adding AHK's tray icons to a GUI
     * goo := Gui()
     * loop 5
     *     goo.AddPic('ym Icon' A_Index, A_AhkPath)
     * goo.Show()
     */
    AddPic([Options:='', Path:=A_WorkingDir]) => Gui.Pic
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddPicture()`}  
     * Adds control containing an image.  
     * Types: `ICO`,`CUR`,`ANI`,`EXE`,`DLL`,`CPL`,`SCR`,`PNG`,`TIF`,`Exif`,`WMF`,`EMF`, Other Icon Resources  
     * GDIPlus (AltSubmit): `GIF`,`JPG`,`BMP`,`ICO`,`CUR`,`ANI`,`PNG`,`TIF`,`Exif`,`WMF`,`EMF`  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Icon#`: Use a specific icon from an icon group where # is the number of the icon.
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of height where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Specify `-1` to set height and keep aspect ratio
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Specify `-1` to set height and keep aspect ratio
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `AltSubmit`: Use Microsoft's GDIPlus.dll to load the image.  
     * This might result in a different appearance for GIF, BMP, and icon images.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
     *   the Picture to show through. Use `+Background` to remove this option later.  
     *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Path]  
     * Path to the image file.  
     * If a full path isn't provided, {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}` is used as the starting directory.  
     * @returns {(Gui.Pic)}  
     * Picture Control Object  
     * @example <caption>Using picture controls to view AHK's 5 built-in icons.</caption>  
     * ; Adding AHK's tray icons to a GUI
     * goo := Gui()
     * loop 5
     *     goo.AddPicture('ym Icon' A_Index, A_AhkPath)
     * goo.Show()
     */
    AddPicture([Options:='', Path:=A_WorkingDir]) => Gui.Pic
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddProgress()`}  
     * Adds a dual-color bar that can progress from empty to full to indicate  
     * a filled range. Commonly used to show the completion status of an operation.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `RangeMIN-MAX`: Sets the minimum and maximum ends of the progress bar. Default is `Range0-100`.  
     * - `Smooth`: Displays a simple, continuous bar.  
     * - `Vertical`: Makes the bar rise or fall vertically rather than horizontally.  
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default size: Vertical - Current font size x2, Horizontal - Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default size: Vertical - 5 rows, Horizontal - Current font size x2
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Sets the color of the main bar where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets background color of the progress bar where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String|Number)} [StartingPos]  
     * Sets the starting position of the progress bar.  
     * If omitted, it starts as close to 0 as the control allows.  
     * @returns {(Gui.Progress)}  
     * Progress Control Object
     * @example <caption>Using a Progress Bar to simulate a loading bar.</caption>  
     * goo := Gui()
     * goo.btn := goo.AddButton('xm ym w100 h30 Center', 'Start')
     * goo.btn.OnEvent('Click', btn_click)
     * goo.prog_bar := goo.AddProgress('x+5 w300 h30 cLime +BackgroundBlack Smooth')
     * goo.Show()
     * 
     * btn_click(btn, info) {
     *     switch btn.Text {
     *         case 'Finished!': ExitApp()
     *         case 'Start': fill_bar(btn.gui)
     *     }
     * }
     * 
     * fill_bar(goo) {
     *     goo.prog_bar.Value += Random(2, 10)
     *     if (goo.prog_bar.Value < 100)
     *         goo.btn.Text := goo.prog_bar.Value '%'
     *         ,callback := fill_bar.Bind(goo)
     *         ,SetTimer(callback, -400)
     *     else goo.btn.Text := 'Finished!'
     * }
     */
    AddProgress([Options:='', StartingPos:=0]) => Gui.Progress
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddRadio()`}  
     * Adds a small button that can be clicked.  
     * Radio buttons are added in groups and only 1 button in the group can be active at a time.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Checked`: Starts the button in the checked/on state.
     * - `Group`: Starts a new radio group. A new group is automatically started when a non-radio control is added.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     *   This also moves the box from the left to the right side of the control.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Label]  
     * Text label to show next to the button.  
     * Text appears left of the control when the `Right` option is being used.  
     * @returns {(Gui.Radio)}  
     * Radio Control Object
     * @example <caption>Add a radio button that switches background colors.</caption>  
     * goo := Gui()
     * goo.BackColor := 0x40FF00
     * goo.rad_g := goo.AddRadio('xm w150 v0x40FF00', 'Green')
     * goo.rad_g.OnEvent('Click', color_change)
     * goo.rad_y := goo.AddRadio('xm w150 v0xFFFF00', 'Yellow')
     * goo.rad_y.OnEvent('Click', color_change)
     * goo.Show('AutoSize')
     * 
     * color_change(con, inf) => con.gui.BackColor := con.Name
     */
    AddRadio([Options:='', Label:='']) => Gui.Radio
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddSlider()`}  
     * Adds a sliding bar (Trackbar) the user can move  
     * along a vertical or horizontal track to adjust values between a defined range.  
     * Window's volume bar is an example of a commonly used slider.
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Buddy1#` and `Buddy2#`: Specify controls to automatically reposition  
     *   at the ends of the slider, where `#` is the name or HWND of the control.  
     *   The {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|control Text}` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|ClassNN}` can also be used, but only up to the first space or tab.  
     *   Buddy1 appears left/top of the slider and Buddy2 appears right/bottom of it.  
     * - `Invert`: Reverses the slider direction. Low goes on the right/bottom and high on the left/top.  
     *   This option will not work with the `ToolTip` option.  
     * - `Center`: The slider (thumb) is blunt on both ends instead of pointed at one end.  
     * - `Left`: The slider (thumb) will upward, or to the left if `Vertical`.  
     * - `NoTicks`: Omit tickmarks alongside the slider track.  
     * - `Line#`: Distance to move when an arrow key is pressed, where `#` is the number of positions.  
     * - `Page#`: Distance to move when PgUp\PgDn is pressed, where `#` is the number of positions.  
     * - `RangeMIN-MAX`: Set slider value range, where `MIN` is the minimum and `MAX` is the maximum.  
     *   Default is `Range0-100`.  
     * - `Thick#`: Set slider (thumb) thickenss where `#` is pixels.  
     * - `TickInterval#`: Add marks along the track where `#` is how often each tick should show.  
     * - `ToolTip`: When dragging the thumb, the current value is shown in a tooltip.  
     *   To adjust tooltip position, use `ToolTipTop`, `ToolTipBottom`.  
     *   `ToolTipLeft`, `ToolTipRight` are used with `Vertical` sliders.  
     *   This option does not work with the `Invert` option.  
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of space, where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default: Sliders (horizontal): Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Defaults: Sliders (vertical): 5 rows, Sliders (horizontal): 30px  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: While dragging the slider (thumb), the {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Change|`change event`} fires continuously.  
     *   Normally, the change event only fires on mouse release.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [StartingPos]  
     * Sets the starting position of the slider bar.  
     * @returns {(Gui.Slider)}  
     * Slider Control Object
     * @example <caption>Creating a volume slider GUI.</caption>  
     * goo := Gui()
     * start_vol := SoundGetVolume()
     * goo.AddText('xm ym w100', 'Volume Slider:')
     * goo.txt_vol := goo.AddText('x+10', Round(start_vol))
     * goo.sld_vol := goo.AddSlider('xm w200 AltSubmit Range0-100 cRed', start_vol)
     * goo.sld_vol.OnEvent('Change', vol_adjust)
     * goo.Show('AutoSize')
     * 
     * vol_adjust(control, *) {
     *     SoundSetVolume(control.Value)
     *     control.gui.txt_vol.Value := control.Value
     * }
     */
    AddSlider([Options:='', StartingPos:=0]) => Gui.Slider
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddStatusBar()`}  
     * Adds a row of text and/or icons to the bottom  
     * of a window and typically reports conditions and information about the GUI.
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     *   The {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|-Theme}` option {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar_Usage|is required}` to change the StatusBar background.  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Label]  
     * Sets the text for the first area of the status bar.
     * @returns {(Gui.StatusBar)}  
     * StatusBar Control Object
     * @example <caption>Creating a Status Bar to show Edit Control info.</caption>  
     * goo := Gui()
     * goo.MarginX := goo.MarginY := 0
     * goo.edit := goo.AddEdit('x0 y0 w400 h400')
     * goo.edit.OnEvent('Change', update_sb)
     * goo.sb := goo.AddStatusBar('xm ym w100')
     * goo.sb.SetParts(100, 100)
     * update_sb(goo.sb)
     * goo.Show('AutoSize')
     * 
     * update_sb(control, *) {
     *     chars := control.gui.edit.Value
     *     StrReplace(chars, '`n', '`n', 1, &lines)
     *     control.gui.sb.SetText('Total Chars: ' StrLen(chars), 1)
     *     control.gui.sb.SetText('Lines: ' (lines+1), 2)
     * }
     */
    AddStatusBar([Options:='', Label:='']) => Gui.StatusBar
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddText()`}  
     * Adds a control for text that the user cannot edit.  
     * Often used to label other controls or give details/instructions.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Left`: Left-justifies the control's text within its available width.  
     * - `Right`: Right-justifies the control's text within its available width.  
     * - `Center`: Centers the control's text within its available width.  
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `BackgroundTrans`: Applies a transparent background, allowing controls behind  
     *   the GroupBox to show through. Use `+Background` to remove this option later.  
     *   Known limitation: BackgroundTrans might not work in a Tab control that contains a ListView.  
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Text]  
     * The text to display in the control.
     * @returns {(Gui.Text)}  
     * Text Control Object
     * @example <caption>Making a scrolling ticker using a Text Control.</caption>  
     * goo := Gui()
     * text := '      Creating scrolling text.      '
     * goo.txt := goo.AddText('xm ym w200 h20 -Wrap', text)
     * goo.txt.SetFont('S10', 'Consolas')
     * ticker(goo.txt)
     * goo.Show()
     * 
     * ticker(con) {
     *     con.Text := SubStr(con.Text, 2) SubStr(con.Text, 1, 1)
     *     callback := ticker.Bind(con)
     *     SetTimer(callback, -100)
     * }
     */
    AddText([Options:='', Text:='']) => Gui.Text
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddTreeView()`}  
     * Adds a TreeView display to represent a hierarchy of items  
     * by indenting child items beneath their parents.  
     * Window's Explorer drive/folder tree is a common example of a TreeView.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Buttons`: Specify `-Buttons` to remove the `+` and `-` symbols from the left of each item.  
     * - `Checked`: Add a checkbox at left of each item.  
     *   When {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Add|adding an item}`, use the {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm#Check|Check option}` to start it checked.  
     * - `ImageList#`: Add icons to a TreeView where `#` is the {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL|ImageListID}` returned from a previous call to {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|IL_Create()}`.  
     *   This option can only be used when creating a TreeView. Use {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#SetImageList|SetImageList()}`.  
     * - `Lines`: Specify `-Lines` disables the connecting lines between parents and children.  
     *   This also prevents the `+` and `-` buttons from being shown for top-level items.  
     * - `ReadOnly`: Specify `-ReadOnly` to allow the editing of each item.  
     *   The items can be edited with F2 (see {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#WantF2|WantF2}) or by clicking the label,  
     *   waiting a brief moment, then clicking again.  
     * - `WantF2`: Specify `-WantF2` to prevent F2 from editing the current selected item.  
     *   WantF2 only works if `-ReadOnly` is also in effect.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Number of rows to display where `#` is the row number. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Text]  
     * @returns {(Gui.TreeView)}  
     * TreeView Control Object
     * @example <caption>Creating a TreeView with multiple parents and children.</caption>  
     * goo := Gui()
     * goo.tree := goo.AddTreeView('xm ym w200 h200')
     * goo.tree.OnEvent('Click', lv_click)
     * loop 3 {
     *     p_num := A_Index
     *     parent := goo.tree.Add('Parent ' p_num, 0)
     *     loop 3
     *         child := goo.tree.Add('Child ' p_num '-' A_Index, parent)
     * }
     * goo.Show('AutoSize')
     * 
     * lv_click(con, info) {
     *     con.gui.Title := con.GetText(con.GetSelection())
     * }
     */
    AddTreeView([Options:='', Text:='']) => Gui.TreeView
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddUpDown()`}  
     * Attaches a pair of clickable arrow buttons to the  
     * previous control (called a `Buddy`) that can increase or decrease the Buddy's value.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Horz`: Arrow buttons point left/right, become wider, and show under the Buddy.  
     *   Buttons are visually disconnected from the control.  
     *   Adding option `+16` forces the buttons to attach to their original position.
     * - `Left`/`Right`: The side of the Buddy the UpDown attaches to. Right is default.  
     *   This option cannot be changed after control creation.  
     * - `RangeMIN-MAX`: Set slider value range, where `MIN` is the minimum and `MAX` is the maximum.  
     *   Default is `Range0-100`.  
     * - `Wrap`: Going past the max range causes the number to start back at minimum.  
     *   Going below minimum wraps back around to max.  
     * - `16`: Specify `-16` to detach the UpDown from its Buddy.  
     *   It can now be positioned like a standard control with `W`, `H`, `X`, `Y` options.  
     * - `0x80`: Removes the 3 digit separator from being being displayed in the Buddy.  
     *    These seperators are removed automaticlaly when value is gotten from the UpDown control.  
     *    script retrieves it from the UpDown control itself rather than the buddy control.
     * - `Increments`: {@link https://www.autohotkey.com/docs/v2/scripts/index.htm#Custom_Increments_for_UpDown_Controls|Guide to changing UpDown inc/decrementation}`
     * - `Hexadecimal Format`: To change display to hex, use this UpDown {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|Message}`:  
     * 
     *       UDM_SETBASE := 0x046D, SendMessage(UDM_SETBASE, 16, 0, "msctls_updown321")
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Rows of text where `#` is the number of rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * 
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [StartingPos]  
     * Sets the starting position of the buddy control.  
     * @returns {(Gui.UpDown)}  
     * UpDown Control Object
     * @example <caption>Using UpDown controls to change window width.</caption>  
     * goo := Gui()
     * goo.AddText('xm ym w150 +Wrap', 'Adjust window width with '
     *     'up/down keys scroll wheel, or up/down control arrows.'
     *     '`nMin width: 200'
     *     '`nMax width: 300')
     * goo.edit := goo.AddEdit('xm w150 +ReadOnly')
     * goo.edit.OnEvent('Change', update_win_size)
     * goo.ud_edit := goo.AddUpDown('+Range200-300', 250)
     * goo.ud_edit.OnEvent('Change', update_win_size)
     * goo.Show('')
     * update_win_size(goo.edit)
     * 
     * update_win_size(con, *) => con.gui.Move(,,con.Value)
     */
    AddUpDown([Options:='', StartingPos:=0]) => Gui.UpDown
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddComboBox()`}  
     * Adds a control that is combination of a DropDownList  
     * and an edit control.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
     * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
     * - `Sort`: Item list is sorted alphabetically. This option also enables incremental searching.  
     *   Meaning an item can be selected by typing its name.  
     * - `Limit`: Restrict the user's input to the visible width of the ComboBox's edit field.  
     * - `Simple`: Replaces the ComboBox's DropDownList with a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|ListBox}`.  
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Max amount of items to show in the control list without needing to scroll,  
     *   where `#` is the number of visible rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default value: Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default value: 3 rows  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
     *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     *   Text color applies to the Edit field and to {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|Simple}` ListBoxes.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     *   This is enabled by default for almost all controls.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     *   Background color applies to the Edit field and to {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|Simple}` ListBoxes.  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(String)} [Text]  
     * An array of strings to populate the ComboBox.  
     * @returns {(Gui.ComboBox)}  
     * ComboBox Control Object
     * @example <caption>Showcasing different ComboBox setups.</caption>  
     * goo := Gui()
     * con_w := 250
     * item_list := ['Banana', 'Cherry', 'Apple']
     * goo.AddText('xm ym w' con_w, 'Unsorted Normal Combo Box'
     *         . '`nItem 2 pre-selected:')
     * goo.AddText('x+50 yp w' con_w, 'Sorted Simple Combo Box'
     *         . '`nItem 2 pre-selected:')
     * goo.AddComboBox('xm w' con_w ' Choose2', item_list)
     * goo.AddComboBox('x+50 w' con_w ' Choose2 Simple Sort', item_list)
     * goo.Show('AutoSize')
     */
    AddComboBox([Options:='', Text:=[]]) => Gui.ComboBox
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddDDL()`}  
     * Adds a single-lined control that, when clicked,  
     * produces a list of items to select from.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
     * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
     * - `Sort`: Item list is sorted alphabetically. 
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Max amount of items to show in the control list without needing to scroll,  
     *   where `#` is the number of visible rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default value: Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default value: 3 rows  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
     *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     *   Text color does not apply to the dropped-down list.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     *   This is enabled by default for almost all controls.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     *   Background color does not apply to the dropped-down list.  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Array)} [List]  
     * An array of strings to represent each choice in the list.  
     * @returns {(Gui.DDL)}  
     * DropDownList Control Object
     * @example <caption>Changing background color with Drop Down List of colors.</caption>  
     * color_list := ['Default', 'Red','Yellow','Green','Cyan','Blue','Magenta']
     * goo := Gui()
     * goo.ddl := goo.AddDDL('xm ym Choose1', color_list)
     * goo.ddl.OnEvent('Change', color_change)
     * goo.Show('w200 h100')
     * 
     * color_change(con, info) {
     *     color_map := Map('Red' ,0xFF0000 ,'Yellow',0xFFFF00 ,'Green',0xFF00
     *                     ,'Cyan',0xFFFF   ,'Magenta',0xFF00FF,'Blue',0xFF )
     *     color_map.Default := 'Default'
     *     con.gui.BackColor := color_map[con.Text]
     * }
     */
    AddDDL([Options:='', List:=[]]) => Gui.DDL
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddDropDownList()`}  
     * Adds a single-line control that, when clicked, drops down a list of choices to select from.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
     * - `Uppercase` or `Lowercase`: Converts all items in the list to uppercase or lowercase.  
     * - `Sort`: Item list is sorted alphabetically. 
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Max amount of items to show in the control list without needing to scroll,  
     *   where `#` is the number of visible rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default value: Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default value: 3 rows  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
     *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     *   Text color does not apply to the dropped-down list.  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     *   This is enabled by default for almost all controls.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     *   Background color does not apply to the dropped-down list.  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Array)} [List]  
     * An array of strings to represent each choice in the list.  
     * @returns {(Gui.DDL)}  
     * DropDownList Control Object
     * @example <caption>Changing background color with Drop Down List of colors.</caption>  
     * color_list := ['Default', 'Red','Yellow','Green','Cyan','Blue','Magenta']
     * goo := Gui()
     * goo.ddl := goo.AddDropDownList('xm ym Choose1', color_list)
     * goo.ddl.OnEvent('Change', color_change)
     * goo.Show('w200 h100')
     * 
     * color_change(con, info) {
     *     color_map := Map('Red' ,0xFF0000 ,'Yellow',0xFFFF00 ,'Green',0xFF00
     *                     ,'Cyan',0xFFFF   ,'Magenta',0xFF00FF,'Blue',0xFF )
     *     color_map.Default := 'Default'
     *     con.gui.BackColor := color_map[con.Text]
     * }
     */
    AddDropDownList([Options:='', List:=[]]) => Gui.DDL
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddListBox()`}  
     * Adds a box control containing a list of choices  
     * that can be chosen from. This is the same list type used with {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|Simple ComboBoxes}`.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose#`: Pre-select an item where `#` is the line number of the item.  
     * - `Multi`: Multiple items can be selected via Ctrl+Clicking and Shift+Clicking.  
     *   Using Style `+0x8` {@link https://learn.microsoft.com/en-us/windows/win32/controls/list-box-styles#LBS_MULTIPLESEL|LBS_MULTIPLESEL}`, item highlighting is toggled on clicked.  
     * - `ReadOnly`: Items will not be visibly highlighted when selected but still register  
     *   with {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit()}` and the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|Value}` and {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Text|Text}` properties.  
     * - `Sort`: Item list is sorted alphabetically. This option also enables incremental searching.  
     *   Meaning an item can be selected by typing its name.  
     * - `T#`: Sets each tab's distance, where `#` is number of dialogue units (a unit determined by the OS) to use.  
     *   If one tab stop is set, that distance is used between all tabs.  
     *   If multiple tab stops are set, each marks the distance the corresponding tab will extend to.  
     * - `0x100`: Adds the {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm#LBS_NOINTEGRALHEIGHT|LBS_NOINTEGRALHEIGHT}` style to the ListBox, preventing a partial  
     *   row from appearing at the bottom and from shrinking when the font is changed.  
     * 
     * **Positioning and Sizing of Controls**  
     * - `R#`: Max amount of items to show in the control list without needing to scroll,  
     *   where `#` is the number of visible rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default value: Current font size x15
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default value: 3 rows  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
     *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `Wrap`: Enables word-wrapping of the control's contents within its available width.  
     *   This is enabled by default for almost all controls.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Array)} [List]  
     * Array of strings to populate the ListBox.  
     * @returns {(Gui.ListBox)}  
     * ListBox Control Object
     * @example <caption>ListBox of items that adjusts GUI size.</caption>  
     * goo := Gui()
     * rez := ['Minimal', '640 x 360','640 x 480','720 x 480','1280 x 720','1920 x 1080']
     * goo.AddText('xm ym', 'Select a window size')
     * con := goo.AddListBox('xm ym w200 r' rez.Length, rez)
     * con.OnEvent('Change', update_win_size)
     * goo.Show()
     * 
     * update_win_size(con, *) {
     *     if InStr(con.Text, ' x ')
     *         rez := StrSplit(con.Text, 'x', ' ')0
     *         ,con.gui.Move(,,rez[1], rez[2])
     *     else goo.Show('AutoSize')
     * }
     */
    AddListBox([Options:='', List:=[]]) => Gui.ListBox
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`AddTab()`}  
     * Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|AddTab3()}` instead of `AddTab()`.  
     * `AddTab()` and `AddTab2()` are for backward compatibility only.  
     * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|AddTab()} adds a large control used to contain organize other controls.  
     * Each tab acts as it's own "page" of individual controls.  
     */
    AddTab([Options:='', TabTitles:=[]]) => Gui.Tab
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`AddTab2()`}  
     * Use {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|AddTab3()}` instead of `AddTab2()`.  
     * `AddTab()` was {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab_vs|retained for compatibility} but has issues.  
     * `AddTab2()` fixed those issues but {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab2_Issues|introduced new ones}.  
     */
    AddTab2([Options:='', TabTitles:=[]]) => Gui.Tab
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Add|`AddTab3()`}  
     * Adds a large control used to contain organize other controls.  
     * Each tab acts as it's own "page" of individual controls.  
     * Avoid using AddTab() and AddTab2() as they're only kept for backward compatability.  
     * @param {(String)} Options  
     * Any {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#OtherOptions|general} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|control-specific} options, separated by spaces/tabs.  
     * **Control Specific Options**  
     * - `Choose#`: Pre-select a Tab where `#` is the tab's positional number.  
     * - `Buttons`: The Tabs are replaced with clickable buttons. 
     * - `Left`/`Right`/`Bottom`: Specify the side of the control to show the tabs.  
     *   See {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm#TCS_VERTICAL|TCS_VERTICAL}` for Left/Right limitations.  
     * - `Wrap`: Specify `-Wrap` to keep all tabs on a single row. Scroll buttons are added if there are too many tabs.  
     *   If there are too many tabs, scroll buttons are added to navigate through them.  
     * - `Tab Icons`: Icons may be added next to tab's via {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage}` as demonstrated in {@link https://www.autohotkey.com/board/topic/5692-icons-in-tabs/|this post}`.  
     *  
     * **Positioning and Sizing of Controls**  
     * - `R#`: Max amount of items to show in the control list without needing to scroll,  
     *   where `#` is the number of visible rows. This number can be a float.  
     *   `R` takes precedence over `H`.  
     * - `W#`: Width of control where `#` is a number of pixels.  
     *   Default value: Current font size x30 plus the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|MarginX}` x3.  
     * - `H#`: Height of control where `#` is a number of pixels.  
     *   Default value: 10 rows  
     * - `WP+#` or `HP+#`: Use previous control's width `WP` or height `HP`.  
     *   Width or height can be adjusted by adding `+#` or `-#` where `#` is a number of pixels.  
     * - `X#` or `Y#`: Static `X` or `Y` coordinates where `#` is the pixel location on the Gui.  
     * - `X+#` or `Y+#`: Use the right edge `X+#` or bottom edge `Y+#` of the previous control as a start point.  
     *   The position can be offset with `+#` or `-#` where `#` is a number of pixels.  
     * - `XP+#` or `YP+#`: Use the left edge `XP+#` or top edge `YP+#` of the previous control as a start point.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *   Useful for aligning controls in a {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|GroupBox} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|Tab}.  
     * - `XM+#` or `YM+#`: Use Gui {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginX|left margin (MarginX)} or {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MarginY|top margin (MarginY)}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     * - `XS+#` or `YS+#`: Use the left edge `XS` or top edge `YS` of the last control marked as a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Section|Section}.  
     *   The offset can be positive `+#` or negative `-#` where `#` is a number of pixels.  
     *  
     * **Common Styles and Other Options**  
     * Prefix with `-` to disable an option and `+` (or no sign) to add an option.  
     * - `V#`: Assign a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Name|Name} to a control where `#` is a new name.  
     *   A control's name can be used to get a reference to that control from a GUI object.  
     * 
     *         GuiControl.Opt('+VMyControl')
     *         GuiControl := Gui['MyControl']  
     * - `Events`: Handled by the control's {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent() method}.  
     * - `AltSubmit`: {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|Gui.Submit}` will record the item position(s) instead of the actual text.  
     *   If no item is selected, the text of the edit field is stored, even if the string is empty.   
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `CDefault` or `C`  
     * - `Disabled`: Disables the control preventing user focus or modifications of the contents.  
     *   Control can be enabled using `-Disabled` or setting {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Enabled} to true.  
     *   A `0` for enabled or `1` for disabled can immediately follow `Disabled`.  
     * 
     *       con.Opt('+Disabled0')
     *       var := 1, con.Opt('+Disabled' var)
     * - `Hidden`: The control is initially invisible.  
     *   Use `-Hidden` or {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiCtrl.Visible} to unhide it.  
     *   A `0` for visible or `1` for hidden can immediately follow `Hidden`.  
     * 
     *       con.Opt('+Hidden0')
     *       var := 1, con.Opt('+Hidden' var)
     * - `Section`: Sets current control as the new Section for use with the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#xs|XS and YS} positioning options.  
     * - `Tabstop`: Disabling Tabstop of a control prevents the user from tabbing to that control.  
     * - `VScroll`: Provide or remove a vertical scroll bar if appropriate for this type of control.  
     * - `HScroll`: Provide or remove a horizontal scroll bar if appropriate for this type of control.  
     *  
     * **Uncommon Styles and Options**
     * - `Background#`: Sets control background color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional): `000000` to `0xFFffFf`
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default: `BackgroundDefault` or `-Background`  
     * - `Border`: Provides a thin-line border around the control. Adding a border to an  
     *   existing control might require increasing the control's width and height by 1 pixel.  
     * - `Redraw`: Enable/disable redrawing (visual updates) of a control (Uses: {@link https://learn.microsoft.com/en-us/windows/win32/gdi/wm-setredraw|WM_SETREDRAW}).  
     *   Disabling redraw `-Redraw` prior to adding multiple controls/elements can increase performance.  
     *   Enable redraw `+Redraw` after all changes have been made.  
     * - `Theme`: Used to override the window's current theme setting for the newly created control.  
     *   This setting has no effect when used on an existing control. See {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Theme|GUI's +/-Theme option} for details.  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Number} `+0x0`: Specify a plus or minus sign  
     *   followed immediately by a decimal or hexadecimal style number.  
     * - {@link https://learn.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles|ExStyle Number} `+E0x0`: Specify a plus or minus sign  
     *   followed immediately by the letter E and a decimal or hexadecimal extended style number.  
     * @param {(Array)} [TabTitles]  
     * Array of strings to use as tab titles.
     * @returns {(Gui.Tab)}  
     * Tab Control Object
     * @example <caption>Creating a gui with 3 tabs.</caption>  
     * goo := Gui()
     * goo.tabs := goo.AddTab3('xm ym w200 h100 Section', ['Tab 1', 'Tab 2', 'Tab 3'])
     * loop 3 {
     *     goo.tabs.UseTab(A_Index)
     *     goo.AddButton('x20 y30', 'Button ' A_Index)
     * }
     * goo.Show()
     */
    AddTab3([Options:='', TabTitles:=[]]) => Gui.Tab
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Destroy|`Destroy()`}  
     * Removes the window and all its controls, freeing the corresponding memory and system resources.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     * goo := Gui()
     * con := goo.AddButton('xm ym w100', 'Destroy GUI')
     * con.OnEvent('Click', destroy_gui)
     * goo.Show('AutoSize')
     * 
     * destroy_gui(con, *) {
     *     con.gui.Destroy()
     * }
     */
    Destroy() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Flash|`Flash()`}  
     * Causes the Gui's title bar and taskbar to blink.  
     * This is done by inverting their colors once per call. By calling flash multiple times, the button and window appear to "blink".  
     * @param {(Boolean)} [Blink]  
     * Any true value will cause the color inversion to continue.  
     * Setting Blink to false will reset the flash by removing the color inversion if present.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Make a flashing GUI.</caption>  
     * goo := Gui()
     * goo.AddButton('xm ym w100')
     * goo.Show('AutoSize')
     * loop 6
     *     goo.Flash()
     * goo.Flash(0)
     * MsgBox('Done flashing and flash is reset')
     */
    Flash([Blink:=1]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#GetClientPos|`GetClientPos()`}  
     * Retrieves the position and size of the window's client area.  
     * Client area is the main area of a program and it excludes the window's title bar, standard menus, and window borders.  
     * Unlike {@link https://www.autohotkey.com/docs/v2/lib/WinGetClientPos.htm|WinGetClientPos}`, this method applies {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|DPI scaling}` to width and height.  
     * @param {(VarRef)} [X]  
     * Variable to store the x coordinate of the client area. 
     * This is the left edge of the area.  
     * @param {(VarRef)} [Y]  
     * Variable to store the y coordinate of the client area. 
     * This is the top edge of the area.  
     * @param {(VarRef)} [Width]  
     * Variable to store the width of the client area. 
     * To get the right edge of the area, add width and x.  
     * @param {(VarRef)} [Height]  
     * Variable to store the height of the client area. 
     * To get the bottom edge of the area, add height and y.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Getting active info on a Window.</caption>  
     * WM_MOVE := 0x0003
     * 
     * goo := Gui('+Resize')
     * goo.txt := goo.AddText('xm ym w300 h400')
     * goo.Show('x100 y100 w300 h400')
     * 
     * callback := update_pos_info.Bind(goo)
     * callback()
     * goo.OnEvent('Size', callback)
     * OnMessage(WM_MOVE, callback)
     * 
     * update_pos_info(goo, *) {
     *     goo.GetPos(&X, &Y, &Width, &Height)
     *     ,goo.GetClientPos(&cX, &cY, &cWidth, &cHeight)
     *     ,goo.txt.Text := 'Window X: ' x '`nWindow y: ' y '`nWindow width: ' width '`nWindow height: ' height
     *         . '`nClient X: ' x '`nClient y: ' y '`nClient width: ' width '`nClient height: ' height
     * }
     */
    GetClientPos([&X, &Y, &Width, &Height]) => EmptyString  
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#GetPos|`GetPos()`}  
     * Retrieves the position and size of the window.  
     * Unlike {@link https://www.autohotkey.com/docs/v2/lib/WinGetClientPos.htm|WinGetClientPos}`, this method applies {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|DPI scaling}` to width and height.  
     * @param {(VarRef)} [X]  
     * Variable to store the x coordinate of the Gui.  
     * This is the left edge of the Gui.  
     * @param {(VarRef)} [Y]  
     * Variable to store the y coordinate of the Gui.  
     * This is the top edge of the Gui.  
     * @param {(VarRef)} [Width]  
     * Variable to store the width of the Gui.  
     * To get the right edge of the Gui, add width and x.  
     * @param {(VarRef)} [Height]  
     * Variable to store the height of the Gui.  
     * To get the bottom edge of the Gui, add height and y.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Getting active info on a Window.</caption>  
     * WM_MOVE := 0x0003
     * 
     * goo := Gui('+Resize')
     * goo.txt := goo.AddText('xm ym w300 h400')
     * goo.Show('x100 y100 w300 h400')
     * 
     * callback := update_pos_info.Bind(goo)
     * callback()
     * goo.OnEvent('Size', callback)
     * OnMessage(WM_MOVE, callback)
     * 
     * update_pos_info(goo, *) {
     *     goo.GetPos(&X, &Y, &Width, &Height)
     *     ,goo.GetClientPos(&cX, &cY, &cWidth, &cHeight)
     *     ,goo.txt.Text := 'Window X: ' x '`nWindow y: ' y '`nWindow width: ' width '`nWindow height: ' height
     *         . '`nClient X: ' x '`nClient y: ' y '`nClient width: ' width '`nClient height: ' height
     * }
     */
    GetPos([&X, &Y, &Width, &Height]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Hide|`Hide()`}  
     * Hides the Gui window from view but does not destroy it.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>A GUI that can be hidden and shown with F1.</caption>  
     * *F1::toggle_gui()
     * 
     * toggle_gui()
     * 
     * toggle_gui() {
     *     static goo := make_gui()
     *     if WinExist('ahk_id ' goo.hwnd)
     *         goo.Hide()
     *     else goo.Show()
     *     return
     *     
     *     make_gui() {
     *         goo := Gui()
     *         goo.AddText('xm ym w150', 'Press F1 to hide/show GUI.')
     *         goo.btn_exit := goo.AddButton('xm w150', 'Click to close Script')
     *         goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     *         return goo
     *     }
     * }
     */
    Hide() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Maximize|`Maximize()`}  
     * Unhides the window if hidden and then maximizes it.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>GUI with max, min, and restore buttons.</caption>  
     * goo := Gui()
     * goo.btn_max := goo.AddButton('xm ym w100', 'Maximize Window')
     * goo.btn_max.OnEvent('Click', (con, *) => con.gui.Maximize())
     * goo.btn_res := goo.AddButton('xm w100', 'Restore Window')
     * goo.btn_res.OnEvent('Click', (con, *) => con.gui.Restore())
     * goo.btn_min := goo.AddButton('xm w100', 'Minimize Window')
     * goo.btn_min.OnEvent('Click', (con, *) => con.gui.Minimize())
     * goo.Show()
     */
    Maximize() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Minimize|`Minimize()`}  
     * Unhides the window if hidden and then minimizes it.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>GUI with max, min, and restore buttons.</caption>  
     * goo := Gui()
     * goo.btn_max := goo.AddButton('xm ym w100', 'Maximize Window')
     * goo.btn_max.OnEvent('Click', (con, *) => con.gui.Maximize())
     * goo.btn_res := goo.AddButton('xm w100', 'Restore Window')
     * goo.btn_res.OnEvent('Click', (con, *) => con.gui.Restore())
     * goo.btn_min := goo.AddButton('xm w100', 'Minimize Window')
     * goo.btn_min.OnEvent('Click', (con, *) => con.gui.Minimize())
     * goo.Show()
     */
    Minimize() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Move|`Move()`}  
     * Used to adjust the poisition (x,y coords), height, and/or width of the GUI.  
     * Unlike {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove}`, this method applies {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|DPI scaling}` to width and height.  
     * @param {(Integer)} [X]  
     * New x coordinate of the Gui.  
     * @param {(Integer)} [Y]  
     * New y coordinate of the Gui.  
     * @param {(Integer)} [Width]  
     * New Gui width.  
     * @param {(Integer)} [Height]  
     * New Gui height.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Create a button to randomly move the GUI.</caption>  
     * goo := Gui()
     * goo.btn_b1 := goo.AddButton('xm w100', 'Random Position')
     * goo.btn_b1.OnEvent('Click', random_pos)
     * goo.btn_b2 := goo.AddButton('xm w100', 'Close Script')
     * goo.btn_b2.OnEvent('Click', (*) => ExitApp())
     * goo.Show()
     * 
     * random_pos(control, info) {
     *     MonitorGetWorkArea(MonitorGetPrimary(), &left, &top, &right, &bottom)
     *     x := Random(left, right)
     *     y := Random(top, bottom)
     *     control.Gui.move(x, y)
     * }
     */
    Move([X:=unset, Y:=unset, Width:=unset, Height:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Events|`OnEvent()`}  
     * Assigns a {@link https://www.autohotkey.com/docs/v2/Functions.htm|Function}, {@link https://www.autohotkey.com/docs/v2/Concepts.htm#methods|Method}, {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}, or {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc} to be called when the specified event is raised.  
     * @param {(String)} EventName  
     * One of the following event(s). Expected callback format is included.  
     * Gui Events:
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Close|`Close`} - Window is closed.  
     * 
     *       Gui_Close(GuiObj)
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#ContextMenu|`ContextMenu`} - User right-clicks within the window or presses Menu or Shift+F10.  
     * 
     *       Gui_ContextMenu(GuiObj, GuiCtrl, Item, RightClick, CX, CY)
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#DropFiles|`DropFiles`} - Files/folders are dragged and dropped onto the window.  
     * 
     *       Gui_DropFiles(GuiObj, GuiCtrl, FileArray, FX, FY)
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Escape|`Escape`} - User presses Esc while the GUI window is active.  
     * 
     *       Gui_Escape(GuiObj)
     * - {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm#Size|`Size`} - Window is resized, minimized, maximized or restored.  
     * 
     *       Gui_Size(GuiObj, MinMax, Width, Height)
     * - Callback Params:
     *     - `GuiObj`: Reference to the GUI.  
     *     - `GuiCtrl`: GUI control that received the event. Empty string of none.  
     *     - `Item`: The ListBox, ListView, or TreeView item number that was right clicked, otherwise unused.
     *     - `RightClick`: Context menu activation  
     *       - `1` = Activated by right click  
     *       - `0` = Activated by `AppsKey` or `Shift+F10`  
     *     - `CX` and `CY`: Check `RightClick` param  
     *       - Right Clicked = Coords of mouse click  
     *       - Keyboard = Coords of the Slider's upper left corner  
     *     - `FileArray`: Array containing one or more file paths.  
     *     - `FX` and `FY`: Coords where file(s) were dropped.  
     *       - Right Clicked = Coords of mouse click  
     *     - `MinMax`:
     *       - `1` = Window is maximized.
     *       - `-1` = Window is minimized.
     *       - `0` = Window is neither min or max.
     *     - `Width` and `Height`: The new width and height of the GUI.
     * @param {(String|FuncObj)} Callback  
     * The function, method, boundfunc, or object to be called when the event is raised.  
     * A callback's first parameter is the One of the following event(s). Expected callback format is included..  
     * If multiple callbacks have been registered for an event, a callback may return a non-empty string to prevent any remaining callbacks from being called.  
     * @param {(Integer)} [AddRemove=1]  
     * Adjust callback order or delete callback. If omitted, parameter defaults to 1.  
     * - `1`: Add the callback after any previously registered callbacks.  
     * - `-1`: Add the callback before any previously registered callbacks.  
     * - `0`: Remove the callback.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent()} |
     * {@link https://www.autohotkey.com/docs/v2/Functions.htm#Variadic|Variadic Functions}
     * @example <caption>Making a script exit when a GUI is closed.</caption>  
     * goo := Gui()
     * goo.OnEvent('Close', exit_script)
     * goo.OnEvent('Escape', exit_script)
     * goo.AddText('xm ym', 'To close the gui:'
     *     '`n`n- Press the "Escape" key'
     *     '`n- Close the GUI')
     * goo.Show('h100')
     * 
     * exit_script(*) => ExitApp()
     */
    OnEvent(EventName, Callback [,AddRemove:=1]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Opt|`Opt()`}  
     * Sets various options and styles for the appearance and behavior of the window.  
     * @param {(String)} ControlType  
     * One of the following control types:  
     * - **Buttons**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|`Button`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Checkbox|`Checkbox`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Radio|`Radio`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Slider|`Slider`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#UpDown|`UpDown`}
     * - **Text**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Text|`Text`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Link|`Link`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Edit|`Edit`} |
     * - **Lists and views**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ComboBox|`ComboBox`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DropDownList|`DDL`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DropDownList|`DropDownList`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab2`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Tab|`Tab3`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ListBox|`ListBox`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm|`ListView`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm|`TreeView`} |
     * - **Graphical**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Picture|`Pic`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Picture|`Picture`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Progress|`Progress`} |
     * - **Date/Time**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|`DateTime`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#MonthCal|`MonthCal`} |
     * - **Misc**
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#ActiveX|`ActiveX`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Custom|`Custom`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#GroupBox|`GroupBox`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Hotkey|`Hotkey`} |
     * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|`StatusBar`} |
     * @param {(String)} Options  
     * Zero or more Gui options, separated by spaces and/or tabs.  
     * For best performance, set all options in 1 call and do so before the window is created.  
     * Use `-` before an option to remove it or `+` to add it. Using no sign is the same as using `+`.  
     * - `AlwaysOnTop`: Makes the window stay on top of all other windows. Same effect as {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop}.  
     * - `Border`: Provides a thin-line border around the window.  
     * - `Caption`: Include the standard title bar and a thick window border/edge. If using {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|WinSetTransColor}, remove Caption only after setting the TransColor.  
     * - `Disabled`: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Owner|Owner}).  
     * - `DPIScale`: If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and GuiControl methods/properties are automatically scaled based on screen DPI.  
     *   {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenDPI|A_ScreenDPI} contains the system's current DPI.  
     *   DPI scaling only applies to the Gui and GuiControl methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work.  
     * - `LastFound`: Sets the window to {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|last found window}. This is done automatically in a GUI thread to allow functions such as {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle} and {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|WinSetTransparent} to operate on it even if it is hidden.  
     * - `MaximizeBox`: Enables the maximize button in the title bar. This is included when the Resize option is used.  
     * - `MinimizeBox`: Enables the minimize button in the title bar.  
     * - `MaxSize` or `MinSize`: Set, adjust, or remove the minimum/maximum size of the client area of the window, such as when the user drags its edges to resize it.  
     *   `+MaxSize`/`+MinSize` uses the current window size as the maximum/minimum.  
     *   Alternatively, `+MaxSize640x480`/`+MinSize640x480` would set the max/min size to 640 pixels wide by 480 pixels tall and the width or height may be omitted, though the `x` separator must always be present.  
     * - `OwnDialogs`: Should be specified in each thread for which subsequently displayed MsgBox, InputBox, FileSelect, and DirSelect dialogs should be owned by the window.  
     *   These dialogs become modal, meaning that the user cannot interact with the Gui until the dialog box is dismissed.  
     *   ToolTip cannot become modal even though they become owned. Instead, they wilstay always on top of the owner.  
     * - `Owner`: Causes the window to be owned by another. Include the handle (HWND) to another window after the word owner to make the Gui owned by that Window.  
     *   Omitting a handle (HWND) will make the Gui owned by the script's main window.  
     * - `Parent`: Use `+Parent` immediately followed by the handle (HWND) of any window or control to use it as the parent of this window while `-Parent` will revert it back to a top-level window.  
     * - `Resize`: Makes the window resizable and enables its maximize button in the title bar. The maximize button can be removed with `-MaximizeBox`.  
     * - `SysMenu`: Adds or removes the system menu and icon in the window's upper left corner. This includes the minimize, maximize, and close buttons in the title bar.  
     * - `Theme`: If `-Theme` is used, all subsequently created controls in the window will have the Classic Theme appearance.  
     *   Theme can also be used in a control's options during its creation such as `g.AddButton('-Theme')`.  
     * - `ToolWindow`: Provides a narrower title bar, removes the taskbar button, and hides both the maximize and minimize buttons.  
     * - `0x0` Unnamed Style: Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.  
     * - `E0x0` Unnamed ExStyle: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For styles not {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|documented here}, see {@link https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles|Extended Window Styles | Microsoft Docs} for a complete list.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Creating a resizeable GUI with no window.</caption>  
     * goo := Gui()
     * goo.Opt('-Caption +Border +Resize')
     * goo.btn := goo.AddButton('w100', 'Close Script')
     * goo.btn.OnEvent('Click', exit_script)
     * goo.Show('AutoSize')
     */
    Opt(Options) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Restore|`Restore()`}  
     * Unhides and restores the window, if it was minimized or maximized beforehand.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>GUI with max, min, and restore buttons.</caption>  
     * goo := Gui()
     * goo.btn_max := goo.AddButton('xm ym w100', 'Maximize Window')
     * goo.btn_max.OnEvent('Click', (con, *) => con.gui.Maximize())
     * goo.btn_res := goo.AddButton('xm w100', 'Restore Window')
     * goo.btn_res.OnEvent('Click', (con, *) => con.gui.Restore())
     * goo.btn_min := goo.AddButton('xm w100', 'Minimize Window')
     * goo.btn_min.OnEvent('Click', (con, *) => con.gui.Minimize())
     * goo.Show()
     */
    Restore() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#SetFont|`SetFont()`}  
     * Sets the typeface, size, style, and text color for subsequently created controls.  
     * @param {(String)} [Options]  
     * Zero or more options separated by spaces.  
     * Styling words are applied in order.  
     * `norm italic` would disable all options and apply only italics  
     * - `bold` - Adds a heavy weight/boldness to text.  
     * - `italic` - Italicizes text.  
     * - `strike` - Strikes out text by adding a horizontal line through it.  
     * - `underline` - Underlines text.  
     * - `norm`- Disables all aforementioned settings.
     * 
     * Other options:  
     * - `C#`: Set text color where `#` is one of the following:  
     *   - RGB hex value (0x prefix is optional):  
     *     `C0x000000` to `CFFffFF`  
     *   - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *     |           |           |           |           |
     *     | :--       | :--       | :--       | :--       |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Silver`  | `Black`   | `White`   | `Gray`    |
     *     | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *     | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *     
     *   - Reset/Default:  
     *     `CDefault` or `C`  
     *   The color option does not affect {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#Button|buttons} or {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#StatusBar|status bars}.  
     * - `S#`: Size in points where `#` is a decimal value.  
     * - `W#`: Weight/boldness where `#` is a decimal value between 1 and 1000. 400 is normal. 700 is bold.  
     * - `Q#`: {@link https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfonta|Text rendering quality} where `#` is an integer between 0 and 5.  
     *    - 0 - Window Constant: `DEFAULT_QUALITY` - Appearance of the font does not matter.  
     *    - 1 - Window Constant: `DRAFT_QUALITY` - Appearance of the font is less important than when the PROOF_QUALITY value is used.  
     *    - 2 - Window Constant: `PROOF_QUALITY` - Character quality of the font is more important than exact matching of the logical-font attributes.  
     *    - 3 - Window Constant: `NONANTIALIASED_QUALITY` - Font is never antialiased, that is, font smoothing is not done.  
     *    - 4 - Window Constant: `ANTIALIASED_QUALITY` - Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.  
     *    - 5 - Window Constant: `CLEARTYPE_QUALITY` - If set, text is rendered (when possible) using ClearType antialiasing method.  
     * @param {(String)} [FontName]  
     * the name of any font, such as one from the {@link https://www.autohotkey.com/docs/v2/misc/FontsStandard.htm|font table}.  
     * If FontName is omitted or does not exist on the system, the previous font typeface will be used, otherwise the system's default Gui typeface is used.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>Setting the default font of the </caption>  
     * goo := Gui()
     * goo.SetFont('s20 cRed italic', 'Courier New')
     * goo.SetFont('', 'Consolas')
     * goo.AddText('xm ym', 'Default text is set to:'
     *     '`n20 pt, red, with italics and Consolas font.'
     *     '`n`nCourier New is the backup font if Consolas isn`'t present.')
     * goo.Show('AutoSize')
     */
    SetFont([Options:='', FontName:=PriorFont]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Show|`Show()`}  
     * Makes the window visible, unminimizes it (if necessary) and {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|activates} it.  
     * @param {(String)} [Options]  
     * Zero or more option sseparated by spaces.  
     * If X, Y, W, and H are omitted, the Gui will retrain its previous size and position otherwise it will be auto-centered.  
     * Only decimal numbers should be used. Hex is invalid.  
     * **Options**
     * - `W#` and `H#`: The Width/Height of the window's client area in pixels. This does not include the window area, border, or title bar.  
     * - `X#` and `Y#`: The Window's X/Y position on the screen in pixels.  
     * - `Center`: Centers the window horizontally and vertically on the screen.  
     * - `xCenter`: Centers the window horizontally on the screen.  
     * - `yCenter`: Centers the window vertically on the screen.  
     * - `AutoSize`: Resizes the window to accommodate only its currently visible controls.  
     * 
     * **Only one of the following Options can be included**  
     * - `Minimize`: Minimizes the window and activates the one beneath it.  
     * - `Maximize`: Maximizes and activates the window.  
     * - `Restore`: Unminimizes or unmaximizes the window, if necessary. The window is also shown and activated, if necessary.  
     * - `NoActivate`: Unminimizes or unmaximizes the window, if necessary. The window is also shown without activating it.  
     * - `NA`: Shows the window without activating it. If the window is minimized, it will stay that way but will usually rise higher in the z-order.  
     * - `Hide`: Hides the window and activates the one beneath it. This allows a hidden window to be moved or resized without showing it.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption>A GUI that can be hidden and shown with F1.</caption>  
     * toggle_gui()
     * 
     * *F1::toggle_gui()
     * 
     * toggle_gui() {
     *     static goo := make_gui()
     *     if WinExist('ahk_id ' goo.hwnd)
     *         goo.Hide()
     *     else goo.Show()
     *     return
     *     
     *     make_gui() {
     *         goo := Gui()
     *         goo.AddText('xm ym w150', 'Press F1 to hide/show GUI.')
     *         goo.btn_exit := goo.AddButton('xm w150', 'Click to close Script')
     *         goo.btn_exit.OnEvent('Click', (*) => ExitApp())
     *         return goo
     *     }
     * }
     */
    Show([Options:='']) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Submit|`Submit()`}  
     * Collects the values from named controls and composes them into an {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object}. Optionally hides the window.  
     * @param {(Boolean)} [Hide]  
     * If omitted or true, window is hidden. If false, the window will not be hidden.  
     * @returns {(Object)}  
     * An object is returned with a property for each input-capable control.  
     * The control must be one with a {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|value property} and have been given a {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Name|name}.  
     * For DropDownList, ComboBox, ListBox, and Tab, the text of the selected item/tab is stored.  
     * If the control uses AltSubmit or if the ComboBox's text matches an item in the list, the position number is used.  
     * @example <caption>Using submit to get all the controls from a GUI.</caption>  
     * goo := Gui()
     * goo.text := goo.AddText('xm +Border', 'Basic text control')
     * goo.text.Name := 'TextControl'
     * goo.combo := goo.AddEdit('xm w100', 'Combo Box Text')
     * goo.combo.Name := 'EditControl'
     * goo.ddl := goo.AddDDL('xm choose2', ['Apple', 'Banana', 'Cherry'])
     * goo.ddl.Name := 'DDLControl'
     * goo.Show('y200 AutoSize')
     * 
     * results := goo.Submit(0)
     * str := 'Control Info`nNotice that submit doesn`'t get text controls.'
     * for name, value in results.OwnProps()
     *     str .= '`n`nControl name: ' name
     *         . '`nControl value: ' value
     * MsgBox(str)
     */
    Submit([Hide:=1]) => Object
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#__Enum|`__Enum()`}  
     * Creates an {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|enumerator object} that iterates through each control of the GUI.  
     * This method is typically not called but instead is used by a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to get each control and its index number.
     * @returns {(Enumerator)}  
     * Enumerable function object.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator Object}
     * @example <caption>For-looop through all controls using GUI enumerator.</caption>  
     * 
     * goo := Gui()
     * goo.text := goo.AddText('xm +Border', 'Basic text control')
     * goo.text.Name := 'TextControl'
     * goo.combo := goo.AddEdit('xm w100', 'Combo Box Text')
     * goo.combo.Name := 'EditControl'
     * goo.ddl := goo.AddDDL('xm choose2 AltSubmit', ['Apple', 'Banana', 'Cherry'])
     * goo.ddl.Name := 'DDLControl'
     * goo.Show('y200 AutoSize')
     * 
     * str := 'Control Info'
     * for hwnd, control in goo
     *     str .= '`n`nName: ' control.Name
     *         . '`nHandle: ' hwnd
     *         . '`nText: ' control.Text
     * MsgBox(str)
     */
    __Enum() => Enumerator
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#__New|`__New()`}  
     * Constructs a new Gui instance.  
     * @param {(String)} [Options]  
     * Zero or more Gui options, separated by spaces and/or tabs.  
     * For best performance, set all options in 1 call and do so before the window is created.  
     * Use `-` before an option to remove it or `+` to add it. Using no sign is the same as using `+`.  
     * - `AlwaysOnTop`: Makes the window stay on top of all other windows. Same effect as {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop}.  
     * - `Border`: Provides a thin-line border around the window.  
     * - `Caption`: Include the standard title bar and a thick window border/edge. If using {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|WinSetTransColor}, remove Caption only after setting the TransColor.  
     * - `Disabled`: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Owner|Owner}).  
     * - `DPIScale`: If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and GuiControl methods/properties are automatically scaled based on screen DPI.  
     *   {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenDPI|A_ScreenDPI} contains the system's current DPI.  
     *   DPI scaling only applies to the Gui and GuiControl methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work.  
     * - `LastFound`: Sets the window to {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|last found window}. This is done automatically in a GUI thread to allow functions such as {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle} and {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|WinSetTransparent} to operate on it even if it is hidden.  
     * - `MaximizeBox`: Enables the maximize button in the title bar. This is included when the Resize option is used.  
     * - `MinimizeBox`: Enables the minimize button in the title bar.  
     * - `MaxSize` or `MinSize`: Set, adjust, or remove the minimum/maximum size of the client area of the window, such as when the user drags its edges to resize it.  
     *   `+MaxSize`/`+MinSize` uses the current window size as the maximum/minimum.  
     *   Alternatively, `+MaxSize640x480`/`+MinSize640x480` would set the max/min size to 640 pixels wide by 480 pixels tall and the width or height may be omitted, though the `x` separator must always be present.  
     * - `OwnDialogs`: Should be specified in each thread for which subsequently displayed MsgBox, InputBox, FileSelect, and DirSelect dialogs should be owned by the window.  
     *   These dialogs become modal, meaning that the user cannot interact with the Gui until the dialog box is dismissed.  
     *   ToolTip cannot become modal even though they become owned. Instead, they wilstay always on top of the owner.  
     * - `Owner`: Causes the window to be owned by another. Include the handle (HWND) to another window after the word owner to make the Gui owned by that Window.  
     *   Omitting a handle (HWND) will make the Gui owned by the script's main window.  
     * - `Parent`: Use `+Parent` immediately followed by the handle (HWND) of any window or control to use it as the parent of this window while `-Parent` will revert it back to a top-level window.  
     * - `Resize`: Makes the window resizable and enables its maximize button in the title bar. The maximize button can be removed with `-MaximizeBox`.  
     * - `SysMenu`: Adds or removes the system menu and icon in the window's upper left corner. This includes the minimize, maximize, and close buttons in the title bar.  
     * - `Theme`: If `-Theme` is used, all subsequently created controls in the window will have the Classic Theme appearance.  
     *   Theme can also be used in a control's options during its creation such as `g.AddButton('-Theme')`.  
     * - `ToolWindow`: Provides a narrower title bar, removes the taskbar button, and hides both the maximize and minimize buttons.  
     * - `0x0` Unnamed Style: Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.  
     * - `E0x0` Unnamed ExStyle: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For styles not {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|documented here}, see {@link https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles|Extended Window Styles | Microsoft Docs} for a complete list.  
     * @param {(String)} [Title]  
     * The window title. If omitted, it defaults to the current value of {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptName|A_ScriptName)}.  
     * @param {(Object)} [EventObj]  
     * An "event sink", or object to bind events to.  
     * If EventObj is specified, {@link https://www.autohotkey.com/docs/v2/lib/GuiOnEvent.htm|OnEvent()}, {@link https://www.autohotkey.com/docs/v2/lib/GuiOnNotify.htm|OnNotify} and {@link https://www.autohotkey.com/docs/v2/lib/GuiOnCommand.htm|OnCommand} can be used to register methods of EventObj to be called when an event is raised.  
     * If omitted or empty, any string passed to OnEvent's Function parameter is interpreted as a function name.  
     * @returns {(Gui)}  
     * New gui object
     * @example <caption>?</caption>  
     */  
    __New([Options, Title, EventObj]) => Gui
}

/**
 * {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook}  
 * An object which can be used to collect or intercept keyboard input.  
 * @property {(String)} EndKey - Returns the name of the end key which was pressed to terminate the Input.
 * @property {(String)} EndMods - Returns a string of the modifiers which were logically down when Input was terminated.
 * @property {(String)} EndReason - Returns an EndReason string indicating how Input was terminated.
 * @property {(Boolean)} InProgress - Returns 1 (true) if the Input is in progress, otherwise 0 (false).
 * @property {(String)} Input - Returns any text collected since the last time Input was started.
 * @property {(String)} Match - Returns the MatchList item which caused the Input to terminate.
 * @property {(FuncObj)} OnEnd - Retrieves or sets the function object which is called when Input is terminated.
 * @property {(FuncObj)} OnChar - Retrieves or sets the function object which is called after a character is added to the input buffer.
 * @property {(FuncObj)} OnKeyDown - Retrieves or sets the function object which is called when a notification-enabled key is pressed.
 * @property {(FuncObj)} OnKeyUp - Retrieves or sets the function object which is called when a notification-enabled key is released.
 * @property {(Boolean)} BackspaceIsUndo - Controls whether the Backspace key removes the most recently pressed character from the end of the Input buffer.
 * @property {(Boolean)} CaseSensitive - Controls whether MatchList is case-sensitive.
 * @property {(Boolean)} FindAnywhere - Controls whether each match can be a substring of the input text.
 * @property {(Integer)} MinSendLevel - Retrieves or sets the minimum send level of input to collect.
 * @property {(Boolean)} NotifyNonText - Controls whether the OnKeyDown and OnKeyUp callbacks are called whenever a non-text key is pressed.
 * @property {(Float)} Timeout - Retrieves or sets the timeout value in seconds.
 * @property {(Boolean)} VisibleNonText - Controls whether keys or key combinations which do not produce text are visible (not blocked).
 * @property {(Boolean)} VisibleText - Controls whether keys or key combinations which produce text are visible (not blocked).
 */
class InputHook extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndKey|`EndKey`}  
     * The normalized name of the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndKeys|end key} pressed to terminate the InputHook.  
     * EndKey is empty if {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|`EndReason`} is not `EndKey`.  
     * @type String  
     * @example <caption></caption>  
     */
    EndKey: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndMods|`EndMods`}  
     * Returns a string of the modifiers which were logically down when InputHook was terminated.  
     * Expected modifiers: `<^ >^ <! >! <+ >+ <# >#`  
     * @type String  
     * @example <caption></caption>  
     */
    EndMods: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|`EndReason`}  
     * The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReasons|EndReason string} indicating how InputHook was terminated.  
     * - Empty String = The InputHook is still in progress.  
     * - `Stopped ` = The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Stop|Stop()} method has not been called since the last {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Start|Start()}.  
     * - `Max` = Maximum allowed length has been reached.  
     * - `Timeout` = 
     * - `Match` = 
     * - `EndKey` = 
     * @type String
     * @example <caption></caption>  
     */
    EndReason: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#InProgress|`InProgress`}  
     * The current progress status.  
     * `1` if the InputHook is in progress, otherwise `0`.
     * @type Boolean  
     * @example <caption></caption>  
     */
    InProgress: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Input|`Input`}  
     * Any text collected since the last time the InputHook was started.  
     * Can be used while in progrss.  
     * @type String
     * @example <caption></caption>  
     */
    Input: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Match|`Match`}  
     * Returns the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#MatchList|MatchList} word that caused the InputHook to terminate.  
     * @type String
     * @example <caption></caption>  
     */
    Match: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnEnd|`OnEnd`}  
     * Retrieves or sets the {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} called when InputHook is terminated.  
     * Expected callback format:
     * 
     *     IH_OnEnd(InputHookObj)
     * @type FuncObj
     * @example <caption></caption>  
     */
    OnEnd: Func
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnChar|`OnChar`}  
     * Retrieves or sets the {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} called when a character is added to the InputHook buffer.  
     * This callback is not activated on an EndKey press.  
     * Expected callback format:
     * 
     *     IH_OnChar(InputHookObj, Char)
     * @type FuncObj
     * @example <caption></caption>  
     */
    OnChar: Func
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyDown|`OnKeyDown`}  
     * Retrieves or sets the {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} called when a notification-enabled key is pressed.  
     * Notification is enabled with {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#KeyOpt|KeyOpt()} or the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#NotifyNonText|NotifyNonText} property.  
     * Expected callback format:
     * 
     *     IH_OnKeyDown(InputHookObj, VirtualKey, ScanCode)
     * @type FuncObj
     * @example <caption></caption>  
     */
    OnKeyDown: Func
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyUp|`OnKeyUp`}  
     * Retrieves or sets the {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} called when a notification-enabled key is released.  
     * Notification is enabled with {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#KeyOpt|KeyOpt()} or the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#NotifyNonText|NotifyNonText} property.  
     * Expected callback format:
     * 
     *     IH_OnKeyUp(InputHookObj, VirtualKey, ScanCode)
     * @type FuncObj
     * @example <caption></caption>  
     */
    OnKeyUp: Func
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#BackspaceIsUndo|`BackspaceIsUndo`}  
     * Controls whether Backspace removes the most recent character from the end of the InputHook buffer.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    BackspaceIsUndo: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#CaseSensitive|`CaseSensitive`}  
     * Controls whether {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#MatchList|MatchList} is case-sensitive.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    CaseSensitive: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#FindAnywhere|`FindAnywhere`}  
     * Controls whether a match can happen in the middle of other text.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    FindAnywhere: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#MinSendLevel|`MinSendLevel`}  
     * Retrieves or sets the minimum {@link https://www.autohotkey.com/docs/v2/lib/SendLevel.htm|send level} of input to collect.  
     * This should be an integer between `0` and `101`
     * @type Integer
     * @example <caption></caption>  
     */
    MinSendLevel: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#NotifyNonText|`NotifyNonText`}  
     * Controls whether {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyDown|OnKeyDown} and {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyUp|OnKeyUp} callbacks are called when a non-text key is pressed.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    NotifyNonText: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Timeout|`Timeout`}  
     * Retrieves or sets the timeout value, in seconds, to wait after starting an InputHook.  
     * Use `0` for no timeout.  
     * @type Float
     * @example <caption></caption>  
     */
    Timeout: Float
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleNonText|`VisibleNonText`}  
     * Controls whether keys or combinations which do not produce text are visible/allowed.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    VisibleNonText: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleText|`VisibleText`}  
     * Controls whether keys or combinations which produce text are visible/allowed.  
     * `1` for enabled, otherwise `0`.  
     * @type Boolean
     * @example <caption></caption>  
     */
    VisibleText: Integer

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|`Call()`}  
     * @param {(String)} [Options]  
     * A string of zero or more options, with optional spaces between:  
     * - `B` = Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#BackspaceIsUndo|BackspaceIsUndo} property to `0`. Backspace is ignored. 
     * - `C` = Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#CaseSensitive|CaseSensitive} property to `1`, making the MatchList parameter case-sensitive.  
     * - `E` = Handle single-character end keys by character code instead of by keycode.  
     *   That can provide more consistent results in some cases.  
     * - `I#` = Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#MinSendLevel|MinSendLevel} property, where `#` is the new {@link https://www.autohotkey.com/docs/v2/lib/SendLevel.htm|send level}.  
     * - `L#` = Sent maximum length of InputHook, where `#` is the max amount of characters to capture.  
     *   If max length is reached, {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|EndReason} is set to `Max`.  
     *   Max length is 1023.  
     * - `M` = Ctrl+a through ctrl+z keystrokes are transcribed to ASCII characters if they have an associated value.  
     * - `T#` = Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Timeout|timeout} property, in seconds, to wait after starting an InputHook.  
     *   This number can be a float.  
     * - `V` = Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleText|VisibleText} and {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleNonText|VisibleNonText} properties to `1`.  
     *   Sends the user's keystrokes through instead of blocking them when captured.  
     * - `*` = Wildcard. Sets the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#FindAnywhere|FindAnywhere} property to `1`.  
     *   Allows matches to found at any point during Input.  
     * @param {(String)} [EndKeys]  
     * List of zero or more keys that will end the running InputHook.  
     * The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#FindAnywhere|EndReason} property is set to `EndKey`.  
     * The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndKey|EndKey} property is set to the name of the key pressed.  
     * A list of keys. Use braces to enclose key names/virtual codes/scan codes.  
     * Literal braces should be enclosed in braces: `{{}` `{}}`
     * Use `{All}` to apply `KeyOptions` to all VK and all SC.  
     * @param {(String)} [MatchList]  
     * A comma-separatted list of words that will terminate the InputHook.  
     * Use 2 commas in a row to indicate a literal comma: `,,`  
     * The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|EndReason} property is set to `Match`.  
     * @returns {(InputHook)}  
     * An InputHook object is returned.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
     * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
     * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::}
     * @example <caption></caption>  
     */
    static Call([Options, EndKeys, MatchList]) => InputHook
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#KeyOpt|`KeyOpt()`}  
     * Sets options for a key or list of keys.  
     * @param {(String)} Keys  
     * A list of keys.  
     * Use braces to enclose key names/virtual codes/scan codes.  
     * Literal braces should be enclosed in braces: `{{}` `{}}`
     * Use `{All}` to apply `KeyOptions` to all VK and all SC.  
     * @param {(String)} KeyOptions  
     * One or more of the following, separated by spaces/tabs.  
     * Use `-` to remove options and `+` to add them:  
     * - `E` = Set End key to terminate InputHook.  
     *   Sets {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|EndReason} prop to the word `EndKey`.  
     *   The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndKey|EndKey} property is set to the keys normalized name.  
     * - `I` = Ignore. This key's text is ignored and treated like {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleNonText|nonvisible text}.  
     * - `N` = Notify. {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyDown|OnKeyDown} and {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#OnKeyUp|OnKeyUp} callbacks are called on key press.  
     * - `S` = Suppress. Blocks key after processing it.  
     *   Overrides {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleText|VisibleText} and {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleNonText|VisibleNonText} properties until `-S` is used.  
     *   `+S` implies `-V`
     * - `V` = Visible. Prevents a key from being suppressed.  
     *   Overrides {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleText|VisibleText} and {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#VisibleNonText|VisibleNonText} properties until `-S` is used.  
     *   `+V` implies `-S`
     * @returns {(String)} An empty string is always returned.  
     * @see @example <caption></caption>  
     */
    KeyOpt(Keys, KeyOptions) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Start|`Start()`}  
     * Starts collecting input and has no effect if already started.  
     * Newly started InputHooks are placed on top of the {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#stack|InputHook stack}.  
     * @returns {(String)} An empty string is always returned.  
     * @example <caption></caption>  
     */
    Start() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Stop|`Stop()`}  
     * Terminates the InputHook and sets {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|EndReason} property to `Stopped`.  
     * @returns {(String)} An empty string is always returned.  
     * @example <caption></caption>  
     */
    Stop() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#Wait|`Wait()`}  
     * Waits until the InputHook is terminated.  
     * Same as {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#InProgress|InProgress} property being false.  
     * @prop {(Float)} MaxTime -  The maximum number of seconds to wait.  
     * If omitted, wait time is indefinite.  
     * @returns {(String)} The {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm#EndReason|EndReason}.  
     * @example <caption></caption>  
     */
    Wait([MaxTime:=unset]) => String
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm|`Map`}  
 * An object that stores data using an associated key.  
 * Keys can be strings, integers, or object references.  
 * @property {(Integer)} Count - Retrieves the number of key-value pairs present in a map.
 * @property {(Integer)} Capacity - Retrieves or sets the current capacity of a map.
 * @property {(Integer)} CaseSense - Retrieves or sets a map's case sensitivity setting.
 * @property {(Any)} Default - Defines the default value returned when a key is not found.
 */
class Map extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Count|`Count`}  
     * Retrieves the number of key-value pairs in a map.  
     * @type Integer
     * @example <caption></caption>  
     */
    Count: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Capacity|`Capacity`}  
     * Retrieves or sets the current capacity of a map.  
     * The maximum amount of key-value pairs it can hold before expansion is needed.  
     * @type Integer
     * @example <caption></caption>  
     */
    Capacity: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#CaseSense|`CaseSense`}  
     * Retrieves or sets a map's case sensitivity setting.  
     * `1` or `On` to enable case sensitivity, otherwise `0` or `Off`.  
     * @type String|Integer
     * @example <caption></caption>  
     */
    CaseSense: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Default|`Default`}  
     * Defines the default value returned when a key is not found.  
     * This also prevents an {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#UnsetError|UnsetItemError} from being thrown when a key cannot be found.  
     * @type Any  
     * @example <caption></caption>  
     */
    Default: Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#__Item|`__Item`}  
     * Retrieves or sets the value of a key-value pair.  
     * Returns the {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Default|Default} property if key is not found.  
     * @type Any
     * @example <caption></caption>  
     */
    __Item[Key] => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Call|`Map()`}  
     * Creates a new Map object and optionally populates it.  
     * @param {(String|Integer|Object)} [KeyN]  
     * The identifying key of the value.  
     * Any number of `Key, Value,` pairs can be added.  
     * @param {(Any)} [ValueN]  
     * The value to associate with the key.  
     * Any number of `Key, Value,` pairs can be added.  
     * @example <caption></caption>  
     * empty_map := Map()
     * phonetic_map := Map('a', 'Alpha', 'b', 'Bravo', )
     * MsgBox('b is pronounced: ' phonetic_map['b'])
     */
    static Call([KeyN, ValueN], *) => Map
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Clear|`Clear()`}  
     * Removes all key-value pairs from a map.  
     * @returns {(String)} An empty string is always returned.  
     * @example <caption></caption>  
     */
    Clear() => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Clone|`Clone()`}  
     * Returns a shallow copy of the map.  
     * Each property or method owned by the object is copied into the clone.  
     * Shallow copy means:  
     * - Primitive values are copied
     * - Object **references** are copied. The objects themselves are not duplicated.  
     *   Meaning the original and clone will reference the same objects.  
     * - Dynamic properties are copied but not invoked.   
     * @returns {(Map)}  
     * A shallow copy of the map is returned.  
     * @example <caption></caption>  
     */
    Clone() => Map
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Delete|`Delete()`}  
     * Removes a key-value pair from a map.  
     * @param {(String|Integer|Object)} Key  
     * The identifying key of the key-value pair to delete.  
     * @returns {(Any)}  
     * The removed map element value is returned.  
     * @throws UnsetItemError - The map does not contain the specified key or a defined {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Default|Default} property.  
     * @example <caption></caption>  
     */
    Delete(Key) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Get|`Get()`}  
     * Returns the value associated with a key, or a default value if one is provided.  
     * @param {(String|Integer|Object)} Key  
     * The identifying key of the key-value pair to delete.  
     * @param {(Any)} [Default]  
     * A default value to use if the provided Key is not found.  
     * @returns {(Any)}  
     * The value associated with Key.  
     * Otherwise, the provided Default parameter is used.  
     * Otherwise, the defined {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Default} property is used.  
     * Otherwise, an UnsetItemError is thrown.  
     * @throws UnsetItemError - Value not set, no default parameter provided, and default property not defined.  
     * @example <caption></caption>  
     */
    Get(Key [,Default:=unset]) => Any
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Has|`Has()`}  
     * Returns true if the specified key has an associated value within a map.  
     * @param {(String|Integer|Object)} Key  
     * The identifying key of the key-value pair to delete.  
     * @returns {(Boolean)}  
     * `1` if the map contains the provided key, otherwise `0`.  
     * @example <caption></caption>  
     */
    Has(Key) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Set|`Set()`}  
     * Sets zero or more key-value pairs.  
     * If all parameters are omitted, Capacity is autom
     * @param {(String|Integer|Object)} [KeyN]  
     * The identifying key of the value.  
     * Any number of `Key, Value,` pairs can be added.  
     * @param {(Any)} [ValueN]  
     * The value to associate with the key.  
     * Any number of `Key, Value,` pairs can be added.  
     * @returns {(Map)}  
     * A reference to the map is always returned.  
     * @example <caption></caption>  
     */
    Set([KeyN, ValueN], *) => Map
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#__Enum|`__Enum()`}  
     * Creates an {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|enumerator object} that iterates through each key-value pair of the map.  
     * This method is typically not called but instead is used by a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to get each value and its index number.
     * @returns {(Enumerator)}  
     * Enumerable function object.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator Object}
     * @example <caption>Manually using an enumerator.</caption>  
     * mapo := Map('v1.0', 'Good', 'v1.1', 'Great', 'v2.0', 'Best')
     * 
     * For key, value in mapo
     *     MsgBox('key: ' key '`nvalue: ' value)
     * 
     * enum := mapo.__Enum()
     * While enum(&key, &value)
     *     MsgBox('Key: ' key '`nValue: ' value)
     */
    __Enum() => Enumerator
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#__New|`__New()`}  
     * Sets items. Equivalent to {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Set|Set}.  
     * This method exists to support {@link https://www.autohotkey.com/docs/v2/lib/Map.htm#Call|Call()}, and is not intended to be called directly.
     * @param {(String|Integer|Object)} [KeyN]  
     * The identifying key of the value.  
     * Any number of `Key, Value,` pairs can be added.  
     * @param {(Any)} [ValueN]  
     * The value to associate with the key.  
     * Any number of `Key, Value,` pairs can be added.  
     */
    __New([KeyN, ValueN], *) => Map
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|`Menu`}  
 * An object used to define, modify, and display popup menus.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Call|Menu()}, {@link https://www.autohotkey.com/docs/v2/lib/MenuFromHandle.htm|MenuFromHandle()} and {@link https://www.autohotkey.com/docs/v2/Variables.htm#TrayMenu|A_TrayMenu} return an object of this type.  
 * @property {(Integer)} ClickCount - Retrieves or sets how many times the tray icon must be clicked to select its default menu item.
 * @property {(Any)} Default - Retrieves or sets the default menu item.
 * @property {(Integer)} Handle - Retrieves the menu's Win32 handle.
 */
class Menu extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#ClickCount|`ClickCount`}  
     * Get or set the number of times the {@link https://www.autohotkey.com/docs/v2/Program.htm#tray-icon|tray icon} must be clicked to activate the {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Default|default} menu item.  
     * This value must be a `1` or `2` and is 2 by default.  
     * @type Integer  
     * @throws ValueError - A number other than 1 or 2 was assigned  
     * @example <caption></caption>  
     */
    ClickCount: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Default|`Default`}  
     * Get or set the default menu item.  
     * When no Default is set, this is an empty string.  
     * @type Menu|String  
     * @example <caption></caption>  
     */
    Default: Menu | String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Handle|`Handle`}  
     * Retrieves the menu's {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Win32_Menus|Win32 handle}.  
     * @type Integer  
     * @example <caption></caption>  
     */
    Handle: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Handle|`Menu()`}  
     * Creates a new Menu object.  
     * @returns {(Menu)}  
     * A new menu object.  
     */
    static Call() => Menu
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Add|`Add()`}  
     * Add or modify a menu item.  
     * To add a menu separator, omit all parameters.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the menu text to display or the position of an existing item to modify.  
     * Names are limited to 260 characters.  
     * @param {(FuncObj|Menu)} [CallbackOrSubmenu]  
     * A callback or submenu item to call as a new {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread}.  
     * Can be omitted when updating an existing item.  
     * Expected callback format:  
     * 
     *     menu_callback(ItemName, ItemPos, MenuRef)
     * @param {(String)} [Options]  
     * Zero or more of the following options, separated by spaces/tabs.  
     * If omitted, no options are used.  
     * - `P#`  
     *   Set {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread priority}, where `#` is the new priority level.  
     *   This is 0 by default.  
     * - `Radio`  
     *   Uses a radio button instead of a checkbox.  
     * - `Right`  
     *   The string is right-justified.  
     *   Only applies to {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MenuBar|menu bars}.  
     * - `Break`  
     *   The item begins a new column in a popup menu.  
     * - `BarBreak`  
     *   Same as the `Break` option with a dividing line added between columns.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Add([MenuItemName:=unset, CallbackOrSubmenu:=unset, Options:=unset]) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#AddStandard|`AddStandard()`}  
     * Adds the standard tray menu items.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     * ; _______________________
     * ;| &Open            | 1  |
     * ;| &Help            | 2  |
     * ;| ---------------- | 3  |
     * ;| &Window Spy      | 4  |
     * ;| &Reload Script   | 5  |
     * ;| &Edit Script     | 6  |
     * ;| ---------------- | 7  |
     * ;| &Suspend Hotkeys | 8  |
     * ;| &Pause Script    | 9  |
     * ;| E&xit            | 10 |
     * ;|__________________|____|
     */
    AddStandard() => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Check|`Check()`}  
     * Adds a visible checkmark next to a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to check.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Check(MenuItemName) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Delete|`Delete()`}  
     * Deletes one or all menu items.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to delete.  
     * If omitted, all menu items are deleted.  
     * To delete a separator, use its position number.  
     * 
     *     ; If 3rd item is a separator
     *     menu_ref.Delete('&3')
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Delete([MenuItemName:=unset]) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Disable|`Disable()`}  
     * Grays out a menu item to indicate that the user cannot select it.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to disable.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Disable(MenuItemName) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Enable|`Enable()`}  
     * Allows the user to once again select a menu item if it was previously disabled (grayed out).  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to enable.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Enable(MenuItemName) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Insert|`Insert()`}  
     * Inserts a new item at the specified location, moving all other items down.  
     * Omit all parameters to insert a menu separator.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to insert an item at.  
     * If omitted, item will be added to the bottom of the menu.  
     * @param {(String)} [Item]  
     * The name of a new menu item.  
     * A new item is always created, even if the item already exists.  
     * @param {(FuncObj|Menu)} [CallbackOrSubmenu]  
     * A callback or submenu item to call as a new {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread}.  
     * Can be omitted when updating an existing item.  
     * Expected callback format:  
     * 
     *     menu_callback(ItemName, ItemPos, MenuRef)
     * @param {(String)} [Options]  
     * Zero or more of the following options, separated by spaces/tabs.  
     * If omitted, no options are used.  
     * - `P#`  
     *   Set {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread priority}, where `#` is the new priority level.  
     *   This is 0 by default.  
     * - `Radio`  
     *   Uses a radio button instead of a checkbox.  
     * - `Right`  
     *   The string is right-justified.  
     *   Only applies to {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MenuBar|menu bars}.  
     * - `Break`  
     *   The item begins a new column in a popup menu.  
     * - `BarBreak`  
     *   Same as the `Break` option with a dividing line added between columns.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Insert([MenuItemName:=unset, Item:=unset, CallbackOrSubmenu:=unset, Options:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Rename|`Rename()`}  
     * Renames a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to rename.
     * @param {(String)} [NewName]  
     * The new menu name.  
     * If omitted, menu item is converted to a menu separator.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Rename(MenuItemName [,NewName:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#SetColor|`SetColor()`}  
     * Changes the background color of the menu.  
     * @param {(String|Integer)} ColorValue  
     * An RGB hex value or a color name:  
     * - RGB hex value (0x prefix is optional):  
     *   `C0x000000` to `CFFffFF`  
     * - {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name}:  
     *   |           |           |           |           |
     *   | :--       | :--       | :--       | :--       |
     *   | `Silver`  | `Black`   | `White`   | `Gray`    |
     *   | `Silver`  | `Black`   | `White`   | `Gray`    |
     *   | `Olive`   | `Yellow`  | `Lime`    | `Green`   |
     *   | `Teal`    | `Aqua`    | `Navy`    | `Blue`    |
     *   |           |           |           |           |
     *   | :--       | :--       | :--       | :--       |
     * @param {(Boolean)} ApplyToSubmenus  
     * `1` = Color is applied to all menu submenus.  
     * `0` = Color only applied to the specified menu.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    SetColor([ColorValue:='Default', ApplyToSubmenus:=1]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#SetIcon|`SetIcon()`}  
     * Sets the icon to be displayed next to a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item.  
     * @param {(String)} FileName  
     * The path to an icon, image file, {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|bitmap, or icon handle}.  
     * Supported types: .ICO .CUR .ANI .EXE .DLL .CPL .SCR {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|Icon Handle "HICON:"} or another icon resource  
     * Use a `*` or an empty string to remove the icon from the menu.  
     * @param {(Integer)} [IconNumber]  
     * The icon number of the icon group from FileName.  
     * If omitted, `1` is used.  
     * @param {(Integer)} [IconWidth]  
     * The desired icon width.  
     * If `0` is used, the original width is applied.  
     * If omitted, the OS default small icon width is used, usually 16 pixels.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    SetIcon(MenuItemName, FileName [,IconNumber:=1, IconWidth:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Show|`Show()`}  
     * Displays the menu.  
     * @param {(Integer)} [X]  
     * The x coordinate of the menu's upper left corner.  
     * If omitted, the mouse's x coord is used.  
     * @param {(Integer)} [Y]  
     * The y coordinate of the menu's upper left corner.  
     * If omitted, the mouse's y coord is used.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Show([X, Y]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#ToggleCheck|`ToggleCheck()`}  
     * Toggles the checkmark next to a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    ToggleCheck(MenuItemName) => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#ToggleEnable|`ToggleEnable()`}  
     * Enables or disables a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    ToggleEnable() => EmptyString

    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Uncheck|`Uncheck()`}  
     * Removes the checkmark (if there is one) from a menu item.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to uncheck.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Uncheck() => EmptyString
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|`MenuBar`}  
 * An object used to define and modify a Gui's menu bar through the {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#MenuBar|Gui.MenuBar property}.  
 * @property {(Integer)} ClickCount - Retrieves or sets how many times the tray icon must be clicked to select its default menu item.
 * @property {(Any)} Default - Retrieves or sets the default menu item.
 * @property {(Integer)} Handle - Retrieves the menu's Win32 handle.
 */
class MenuBar extends Menu {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Handle|`Menu()`}  
     * Creates a new MenuBar object.  
     * @returns {(Menu)}  
     * A new MenuBar object.  
     */
    static Call() => MenuBar
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Add|`Add()`}  
     * Add or modify a menu bar item.  
     * To add a menu separator, omit all parameters.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the menu text to display or the position of an existing item to modify.  
     * Names are limited to 260 characters.  
     * @param {(FuncObj|Menu)} [CallbackOrSubmenu]  
     * A callback or submenu item to call as a new {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread}.  
     * Can be omitted when updating an existing item.  
     * Expected callback format:  
     * 
     *     menu_callback(ItemName, ItemPos, MenuRef)
     * @param {(String)} [Options]  
     * Zero or more of the following options, separated by spaces/tabs.  
     * If omitted, no options are used.  
     * - `P#`  
     *   Set {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread priority}, where `#` is the new priority level.  
     *   This is 0 by default.  
     * - `Radio`  
     *   Uses a radio button instead of a checkbox.  
     * - `Right`  
     *   The string is right-justified.  
     * - `Break`  
     *   The item begins a new column in a popup menu.  
     * - `BarBreak`  
     *   Same as the `Break` option with a dividing line added between columns.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Add([MenuItemName:=unset, CallbackOrSubmenu:=unset, Options:=unset]) => EmptyString
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Insert|`Insert()`}  
     * Inserts a new item at the specified location, moving all other items down.  
     * Omit all parameters to insert a menu separator.  
     * @param {(String)} [MenuItemName]  
     * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#MenuItemName|MenuItemame} is the name or the position of an existing item to insert an item at.  
     * If omitted, item will be added to the bottom of the menu.  
     * @param {(String)} [Item]  
     * The name of a new menu item.  
     * A new item is always created, even if the item already exists.  
     * @param {(FuncObj|Menu)} [CallbackOrSubmenu]  
     * A callback or submenu item to call as a new {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread}.  
     * Can be omitted when updating an existing item.  
     * Expected callback format:  
     * 
     *     menu_callback(ItemName, ItemPos, MenuRef)
     * @param {(String)} [Options]  
     * Zero or more of the following options, separated by spaces/tabs.  
     * If omitted, no options are used.  
     * - `P#`  
     *   Set {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread priority}, where `#` is the new priority level.  
     *   This is 0 by default.  
     * - `Radio`  
     *   Uses a radio button instead of a checkbox.  
     * - `Right`  
     *   The string is right-justified.  
     * - `Break`  
     *   The item begins a new column in a popup menu.  
     * - `BarBreak`  
     *   Same as the `Break` option with a dividing line added between columns.  
     * @returns {(String)}  
     * An empty string is always returned.  
     * @example <caption></caption>  
     */
    Insert([MenuItemName:=unset, Item:=unset, CallbackOrSubmenu:=unset, Options:=unset]) => EmptyString
    
    /**
     * An error is thrown when a MenuBar object tries to use the `Show()` method.  
     */
    Show() => Error
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObjec|`RegExMatchInfo`}  
 * An object with multiple properties containing information about a {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|RegExMatch()} result.  
 * @property {(Integer)} Count - Returns the total number of captured subpatterns.
 * @property {(Integer)} Len - The length of the overall match or a captured subpattern.
 * @property {(Integer)} Mark - Returns the NAME of the last encountered `(*MARK:NAME)`, when applicable.
 * @property {(Integer)} Match - Returns the overall match or a captured subpattern.
 * @property {(Integer)} Name - The name of the overall match or a captured subpattern, if it has one.
 */
class RegExMatchInfo extends Object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Count`}  
     * Returns the total number of captured subpatterns.  
     * This is also the max number [N] can be for any other method or property calls.  
     * @type Integer
     * @example <caption></caption>  
     */
    Count: Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Len[]`}  
     * The length of the overall match or a captured subpattern.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * @type Integer  
     * @example <caption></caption>  
     */
    Len[N:=0] => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|Mark}  
     * Returns the NAME of the last encountered `(*MARK:NAME)`, when applicable.  
     * Mark can be used for internal engine backtracking.  
     * @type String  
     * @example <caption></caption>  
     */
    Mark: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Match`}  
     * Returns the overall match or a captured subpattern.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * As a shorthand method, the word Match can be omitted if there is no space in the subpattern name.  
     * 
     *     rgxobj.Match['Something'] => 'Some value'
     *     rgxobj.Something => 'Some value'
     * @type Integer
     * @example <caption></caption>  
     */
    Match[N:=0] => String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Name[]`}  
     * The name of the overall match or a captured subpattern, if it has one.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * @type String  
     * @example <caption></caption>  
     */
    Name[N:=0] => String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Pos[]`}  
     * The string position of the overall match or a captured subpattern.  
     * @param {(Integer|String)} [N]  
     * The name or number of a captured subpattern.  
     * If omitted or `0`, the overall match is returned.  
     * @type Integer  
     * @example <caption></caption>  
     */
    Pos[N:=0] => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Len()`}  
     * The length of the overall match or a captured subpattern.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * @returns {(Integer)}  
     * The length of the specified subpattern or overall match.  
     * @example <caption></caption>  
     */
    Len([N:=0]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Name()`}  
     * Returns the name of the given subpattern, if it has one.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * @returns {(String)}  
     * The captured text.  
     * @example <caption></caption>  
     */
    Name([N:=0]) => String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|`Pos()`}  
     * The string position of the overall match or a captured subpattern.  
     * @param {(Integer|String)} [N]  
     * The number of a captured subpattern.  
     * Named subpatterns can be referenced by number or name.  
     * If omitted or `0`, the overall match is returned.  
     * @returns {(Integer)}  
     * The string position of the specified subpattern or overall match.  
     * @example <caption></caption>  
     */
    Pos([N:=0]) => Integer
}

class Primitive extends Any {
    
}

Class String extends Primitive {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/String.htm|`String()`}  
     * Converts a value to string type.  
     * @param {(String|Number|Object)} Value  
     * Dependent on object type:  
     * - `String` = No conversion happens.
     * - `Number` = Converted using {@link https://www.autohotkey.com/docs/v2/Concepts.htm#number-default-format|default decimal formatting}.  
     * - `Object` = Uses a user-defined `ToString()` method.  
     *   If ToString() has not been defined, an error is thrown.  
     * @returns {(String)}  
     * The value converted to a string  
     * @throws MethodError - Invalid value type  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float()} |
     * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
     * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
     * @example <caption></caption>  
     */
    static Call(Value) => String
}

class Number extends Primitive {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/String.htm|`String()`}  
     * Converts a numeric string to a pure integer or float type.  
     * @param {(String)} Value  
     * A string representing a number.  
     * @returns {(Integer|Float)}  
     * An integer or float version of value.  
     * @throws TypeError - Value cannot be converted  
     * To prevent this, use {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#number|IsNumber()} first.
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float()} |
     * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
     * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
     * @example <caption></caption>  
     */
    static Call(Value) => Number
}

Class Float extends Number {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|`Float()`}  
     * Converts a numeric string or integer value to a float type.  
     * @param {(String|Integer)} Value  
     * A string or integer to convert to float type.  
     * @returns {(Float)}  
     * The numerical version of value.  
     * @throws TypeError - Value cannot be converted  
     * To prevent this, use {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#number|IsNumber()} first.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Number.htm|Number()} |
     * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
     * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
     * @example <caption></caption>  
     */
    static Call(Value) => Float
}

Class Integer extends Number {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|`Float()`}  
     * Converts a numeric string or float value to an integer type.  
     * @param {(String|Float)} Value  
     * A string or integer to convert to float type.  
     * @returns {(Integer)}  
     * The numerical version of value.  
     * @throws TypeError - Value cannot be converted  
     * To prevent this, use {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#number|IsNumber()} first.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Number.htm|Number()} |
     * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
     * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions} |
     * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
     * @example <caption></caption>  
     */
    static Call(Value) => Integer
}

class VarRef extends Any {
    
}

/**
 * @description 
 */
class ComValue extends Any {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|`ComValue`}  
     * Wraps a value, SafeArray or COM object for use by the script or for passing to a COM method.  
     * @param {(Integer)} VarType  
     * An integer to incidcate the {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|type of value}.  
     * \- `0` VT_EMPTY = No value  
     * \- `1` VT_NULL = SQL-style Null  
     * \- `2` VT_I2 = 16-bit signed int  
     * \- `3` VT_I4 = 32-bit signed int  
     * \- `4` VT_R4 = 32-bit floating-point number  
     * \- `5` VT_R8 = 64-bit floating-point number  
     * \- `6` VT_CY = Currency  
     * \- `7` VT_DATE = Date  
     * \- `8` VT_BSTR = COM string (Unicode string with length prefix)  
     * \- `9` VT_DISPATCH = COM object  
     * \- `0xA` VT_ERROR = Error code (32-bit integer)  
     * \- `0xB` VT_BOOL = Boolean True (-1) or False (0)  
     * \- `0xC` VT_VARIANT = VARIANT (used with VT_ARRAY or VT_BYREF)  
     * \- `0xD` VT_UNKNOWN = IUnknown interface pointer  
     * \- `0xE` VT_DECIMAL = (not supported)  
     * \- `0x10` VT_I1 = 8-bit signed int  
     * \- `0x11` VT_UI1 = 8-bit unsigned int  
     * \- `0x12` VT_UI2 = 16-bit unsigned int  
     * \- `0x13` VT_UI4 = 32-bit unsigned int  
     * \- `0x14` VT_I8 = 64-bit signed int  
     * \- `0x15` VT_UI8 = 64-bit unsigned int  
     * \- `0x16` VT_INT = Signed machine int  
     * \- `0x17` VT_UINT = Unsigned machine int  
     * \- `0x24` VT_RECORD = User-defined type -- NOT SUPPORTED  
     * \- `0x2000` VT_ARRAY = SAFEARRAY  
     * \- `0x4000` VT_BYREF = Pointer to another type of value  
     * @param {(Any)} Value - The value to wrap.  
     * @param {(Integer)} [Flags] - {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|Flags} affecting the behaviour of the wrapper object.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/ComObjFromPtr.htm|ComObjFromPtr()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm|ComObjConnect()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|ComObjFlags()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ObjAddRef.htm|ObjAddRef()/ObjRelease()} |
     * {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|ComObjQuery()} |
     * {@link https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-getactiveobject|GetActiveObject (Microsoft Docs)}
     * @returns {(Object)}  
     * A wrapper object containing the {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|variant type}
     */
    static Call(VarType, Value [,Flags:=unset]) => Object
}

/**
 * @description 
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm|ComObjType} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjValue.htm|ComObjValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|ComObjActive} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|ComObjFlags} |
 * {@link https://learn.microsoft.com/previous-versions/windows/desktop/automat/array-manipulation-functions|Array Manipulation Functions (Microsoft Docs)}
 */
class ComObjArray extends ComValue {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|`ComValue()`}  
     * @param {(Integer)} VarType  
     * An integer to incidcate the {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|type of value}.  
     * \- `0` VT_EMPTY = No value  
     * \- `1` VT_NULL = SQL-style Null  
     * \- `2` VT_I2 = 16-bit signed int  
     * \- `3` VT_I4 = 32-bit signed int  
     * \- `4` VT_R4 = 32-bit floating-point number  
     * \- `5` VT_R8 = 64-bit floating-point number  
     * \- `6` VT_CY = Currency  
     * \- `7` VT_DATE = Date  
     * \- `8` VT_BSTR = COM string (Unicode string with length prefix)  
     * \- `9` VT_DISPATCH = COM object  
     * \- `0xA` VT_ERROR = Error code (32-bit integer)  
     * \- `0xB` VT_BOOL = Boolean True (-1) or False (0)  
     * \- `0xC` VT_VARIANT = VARIANT (used with VT_ARRAY or VT_BYREF)  
     * \- `0xD` VT_UNKNOWN = IUnknown interface pointer  
     * \- `0xE` VT_DECIMAL = (not supported)  
     * \- `0x10` VT_I1 = 8-bit signed int  
     * \- `0x11` VT_UI1 = 8-bit unsigned int  
     * \- `0x12` VT_UI2 = 16-bit unsigned int  
     * \- `0x13` VT_UI4 = 32-bit unsigned int  
     * \- `0x14` VT_I8 = 64-bit signed int  
     * \- `0x15` VT_UI8 = 64-bit unsigned int  
     * \- `0x16` VT_INT = Signed machine int  
     * \- `0x17` VT_UINT = Unsigned machine int  
     * \- `0x24` VT_RECORD = User-defined type -- NOT SUPPORTED  
     * \- `0x2000` VT_ARRAY = SAFEARRAY  
     * \- `0x4000` VT_BYREF = Pointer to another type of value  
     * @param {(Integer)} ArrSize1  
     * The size of the first array.  
     * @param {(Integer)} [ArrSize2to8]  
     * The size of each additiona array dimension.  
     * Up to 8 dimensions are supported.  
     * @returns {(ComObjArray)}  
     * A wrapper object containing a new SafeArray.
     */
    Call(VarType, ArrSize1 [,ArrSize2to8*]) => ComObjArray
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjArray.htm#Methods|`MaxIndex()`}  
     * Returns the upper bound of the dimension.  
     * @param [ArrDim]  
     * The dimension (depth) of the array to use.  
     * If ArrDim is omitted, it defaults to 1.
     * @returns {(Integer)}  
     */
    MaxIndex([ArrDim:=1]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjArray.htm#Methods|`MinIndex()`}  
     * Returns the lower bound of the nth dimension. If n is omitted, it defaults to 1.  
     * @param [ArrDim]  
     * The dimension (depth) of the array to use.  
     * If ArrDim is omitted, it defaults to 1.
     * @returns {(Integer)}  
     * 
     */
    MinIndex([ArrDim:=1]) => Integer
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjArray.htm#Methods|`Clone()`}  
     * Returns a copy of the array.  
     * @returns {(ComObjArray)}  
     * A copy of the current ComObjArray.  
     */
    Clone() => ComObjArray
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjArray.htm#Methods|`__Enum()`}  
     * Creates an {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|enumerator object} that iterates through each element pair of the SafeArray.  
     * This method is typically not called but instead is used by a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to get each element and its index number.  
     * @returns {(Enumerator)}  
     * Enumerable function object.  
     * @see {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator Object}
     */
    __Enum() => Enumerator
}

/**
 * @description 
 */
class ComObject extends ComValue {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|`ComObject`}  
     * Creates a COM object.  
     * @param {(String)} CLSID  
     * CLSID or human-readable Prog ID of the COM object to create.
     * @param {(String)} [IID]  
     * Specify the identifier of the interface to return.  
     * If omitted, it defaults to IID_IDispatch:  
     * `{00020400-0000-0000-C000-000000000046}`
     * @returns {(Object)}  
     * A COM wrapper object. Type is dependent on the IID parameter.  
     * \- IID_IDispatch = {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} = VT_DISPATCH (9)  
     * \- Any other IID = {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} = VT_UNKNOWN (13)  
     * @example <caption>Toggle active window taskbar button.</caption>  
     * $F1::toggle_taskbutton('hide')
     * $F2::toggle_taskbutton('show')
     * 
     * toggle_taskbutton(opt:='') {
     *     ; ITaskbarList
     *     ; https://learn.microsoft.com/windows/win32/api/shobjidl_core/nn-shobjidl_core-itaskbarlist
     *     CLSID_TaskbarList := '{56FDF344-FD6D-11d0-958A-006097C9A090}'
     *     IID_ITaskbarList  := '{56FDF342-FD6D-11d0-958A-006097C9A090}'
     *     tbl := ComObject(CLSID_TaskbarList, IID_ITaskbarList)
     *     activeHwnd := WinExist('A')
     *     ComCall(3, tbl)
     *     switch opt {
     *         case 'hide': ComCall(5, tbl, 'ptr', activeHwnd)
     *         case 'show': ComCall(4, tbl, 'ptr', activeHwnd)
     *     }
     *     tbl := ''
     * }
     */
    static Call(CLSID [,IID:='{00020400-0000-0000-C000-000000000046}']) => Object
}

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|`ComValueRef`}
 * Used for VT_BYREF com values.  
 */
class ComValueRef extends ComValue {
}
;@endregion

;@region typedef
class $InputBoxObject extends object {
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm#return|`Result`}  
     * Indicates how the InputBox was closed:  
     * - `OK` = OK was pressed.  
     * - `Cancel` = Cancel or the window X was pressed.  
     * - `Timeout` = InputBox window timed out.  
     * @type String
     */
    Result: String
    
    /**
     * @description {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm#return|`Value`}  
     * The text entered by the user.  
     * @type String
     */
    Value: String
}
;@endregion

;@region functions
/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Abs|`Abs()`}  
 * Returns the absolute value of the specified number.  
 * Absolute value is the greatest magnitude of the number regardless of its sign.  
 * @param {(Number)} Num  
 * Number to get absolute value of.
 * @returns {(Number)}  
 * Absolute value of number
 * @example <caption>Absolute value examples.</caption>  
 * x := Abs(-50)   ; => 50
 * y := Abs(15)    ; => 15
 * z := Abs(-5.5)  ; => 5.5
 * MsgBox(x '`n' y '`n' z)
 */
Abs(Num) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#ASin|`ASin()`}  
 * Returns the arcsine in radians.  
 * Arcsine is the inverse trigonometric function of the sine function.  
 * @param {(Number)} Num  
 * The sine number. Must be between 1 and -1.  
 * @returns {(Number)}  
 * Arcsine in radians.  
 * @example <caption></caption>  
 * ASin(0.2) ; => 0.201358
 * ASin(0) ; => 0.0
 * ASin(1) ; => 1.570796
 */
ASin(Num) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#ACos|`ACos()`}  
 * Returns the arccosine in radians.  
 * Arccosine is the inverse trigonometric function of the cosine function.  
 * @param {(Number)} Num  
 * The cosine number. This must be between 1 and -1.  
 * @returns {(Number)}  
 * Arccosine in radians.  
 * @example <caption></caption>  
 * ACos(0.2) ; => 1.369438
 * ACos(0) ; => 1.570796
 * ACos(1) ; => 0.0
 */
ACos(Num) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#ATan|`ATan()`}  
 * Returns the arctangent in radians.  
 * Arctangent is the inverse trigonometric function of the tangent function.  
 * @param {(Number)} Num  
 * The tangent number.  
 * @returns {(Number)}  
 * Arctangent in radians.  
 * @example <caption></caption>  
 * ATan(1.2) ; => 0.876058
 * ATan(0) ; => 0.0
 * ATan(1) ; => 1.557408
 */
ATan(Num) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|`BlockInput()`}  
 * Disables or enables the user's  
 * ability to interact with the computer via keyboard and mouse.  
 * @param {(String|Integer)} [Mode]  
 * A mode from one of the the 3 groups.  
 * Each of the 3 groups operate independently of each other.  
 * - OnOff Group:
 *   - `1` or `On` = Mouse and keyboard input is disabled.  
 *   - `0` or `Off` = Mouse and keyboard input is enabled.  
 * 
 * - SendMouse Group:
 *   - `Send` = Keyboard and mouse input is disabled while a {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent} is running, preventing disruption of keys being sent.  
 *   - `Mouse` = Keyboard and mouse input is disabled while {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()}, or {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} is running and prevents user input from disrupting mouse events.  
 *   - `SendAndMouse` = Enables both `Send` and `Mouse` modes.  
 *   - `Default` = Disables both `Send` and `Mouse` modes if they're on.  
 *     This is the "Off" setting for SendMouse modes.  
 * 
 * - MouseMove Group:
 *   - `MouseMove` = User mouse movement is disabled.  
 *     DirectInput applications are a possible exception.  
 *   - `MouseMoveOff` = Disables `MouseMove` if it's enabled.  
 *     This is the "Off" setting for Mouse modes.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @example <caption>Hotkey to toggle keyboard and mouse input on/off.</caption>  
 * *F1:: {
 *     Static lock := 0
 *     lock := !lock
 *     TrayTip(lock)
 *     if lock
 *         BlockInput(1)
 *     else BlockInput('Off')
 * }
 */
BlockInput([Mode]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|`CallbackCreate()`}  
 * Creates a machine-code address that when called,  
 * redirects the call to a function in the script.  
 * @param {(FuncObj)} Function  
 * A {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call when  
 * the created callback address is called.  
 * @param {(String)} Options  
 * 
 * - Empty String = A new {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread} is created.  
 * - `Fast` or `F` = Avoid starting a new thread each time the Function Object is called.  
 * - `CDecl` or `C` = Causes address to conform to the 'C' calling convention.  
 *   Typically omitted because standard calling is much more common for callbacks.  
 * - `&` = Causes the address of the parameter list to be passed to Function.  
 *   Parameter values can be retrieved using NumGet. 
 *   When using the standard 32-bit calling convention, 
 *   ParamCount must specify the size of the parameter list in DWORDs (the number of bytes divided by 4).
 * @param {(Integer)} ParamCount  
 * If omitted, {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MinParams|Function.MinParams} is used.  
 *  Otherwise, the number of parameters that Address' caller will pass to it.  
 *  In either case, ensure that the caller passes exactly this number of parameters
 * @returns {(Integer)}  
 * A machine code address.  
 * @example <caption>Enumerating through all windows.</caption>  
 * enumerate_windows()
 * 
 * enumerate_windows() {
 *     output := 'HWND`tTitle`tClass`n'
 *     callback := CallbackCreate(EnumWindowsProc, 'Fast')
 *     DetectHiddenWindows(true)
 *     DllCall('EnumWindows', 'Ptr', callback, 'Ptr')
 *     MsgBox(Output)
 *     CallbackFree(callback)
 *     return
 *     
 *     EnumWindowsProc(hwnd, lParam){
 *         win_title := WinGetTitle(hwnd)
 *         if win_title
 *             Output .= 'HWND: ' hwnd
 *                 . '`tTitle: ' win_title
 *                 . '`tClass: ' WinGetClass(hwnd) '`n'
 *         return true
 *     }
 * }
 */
CallbackCreate(Function [,Options:='', ParamCount:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm#CallbackFree|`CallbackFree()`}  
 * Frees a callback created by {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm#CallbackFree|CallbackCreate()}.  
 * @param {(Integer)} Address  
 * A callback address.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @example <caption>Enumerating through all windows.</caption>  
 * enumerate_windows()
 * 
 * enumerate_windows() {
 *     output := 'HWND`tTitle`tClass`n'
 *     callback := CallbackCreate(EnumWindowsProc, 'Fast')
 *     DetectHiddenWindows(true)
 *     DllCall('EnumWindows', 'Ptr', callback, 'Ptr')
 *     MsgBox(Output)
 *     CallbackFree(callback)
 *     return
 *     
 *     EnumWindowsProc(hwnd, lParam){
 *         win_title := WinGetTitle(hwnd)
 *         if win_title
 *             Output .= 'HWND: ' hwnd
 *                 . '`tTitle: ' win_title
 *                 . '`tClass: ' WinGetClass(hwnd) '`n'
 *         return true
 *     }
 * }
 */
CallbackFree(Address) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/CaretGetPos.htm|`CaretGetPos()`}  
 * Retrieves the current position of the text caret.  
 * @param {(VarRef)} [CaretX]  
 * The variable to store the caret's X client coordinate (if provided).  
 * @param {(VarRef)} [CaretY]  
 * The variable to store the caret's Y client coordinate (if provided).  
 * @returns {(Boolean)}  
 * `1` if caret found, else `0`  
 * @example <caption>Show caret position at all times.</caption>  
 * SetTimer(WatchCaret, 100)
 * 
 * WatchCaret() {
 *     if CaretGetPos(&x, &y)
 *         ToolTip('x' x ', y' y, x, y - 20)
 *     else ToolTip('No caret')
 * }
 */
CaretGetPos([&CaretX, &CaretY]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Ceil|`Ceil()`}  
 * Rounds a number up to the nearest integer.  
 * @param {(Number)} Num  
 * The number to round up.  
 * @returns {(Integer)}  
 * The rounded up integer.  
 * @example <caption></caption>  
 * Ceil(1.1) ; => 2
 * Ceil(1.9) ; => 2
 * Ceil(1.0) ; => 1
 * Ceil(-4.5) ; => -4
 * Ceil(9.0001) ; => 10
 */
Ceil(Num) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Chr.htm|`Chr()`}  
 * Returns the string (usually a single character) corresponding to the character code indicated by the specified number.  
 * @param {(Integer)} UnicodeNumber  
 * A Unicode number between 0x0 and 0x10FFFF.  
 * Numbers in the range 0x10000 to 0x10FFFF produce 2 characters.  
 * 0 produces a binary null character, not an empty string.  
 * @returns {(String)}  
 * The character(s) of the UnicodeNumber.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Ord.htm|Ord()} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#string-encoding|String Encoding} |
 * {@link https://raw.githubusercontent.com/GroggyOtter/GroggyRepo/master/AHK/Groggy's%20ASCII%20Tables.txt|ASCII Table}
 * @example <caption>Convert char codes to characters.</caption>  
 * MsgBox(Chr(65) Chr(72) Chr(75)) ; => AHK
 * MsgBox(Chr(0xCA0) '_' Chr(0xCA0)) ; => ಠ_ಠ
 */
Chr(UnicodeNumber) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|`Click()`}  
 * Sends a click event to a specified cooridnate.  
 * Alternatively, all options can be passed in as a single string.  
 * If 3 numbers are passed, the first two are X and Y and the last is Count.  
 * Omit all parameters to send a single left click.  
 * @param {(String)} [Button]  
 * Mouse button to click.  
 * - `Left` or `L`
 * - `Right` or `R`
 * - `Middle` or `M`
 * - `X1` (Mouse4)
 * - `X2` (Mouse5)
 * - `WheelUp` or `WU`
 * - `WheelDown` or `WD`
 * - `WheelRight` or `WR`
 * - `WheelLeft` or `WL`
 * 
 * If omitted, `Left` is used.
 * @param {(String|Integer)} [X]  
 * The X coordinate to click at.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts.  
 * Client is usually the best choice.  
 * If the `Relative` param is used, x0 y0 starts at the mouse cursor.  
 * If omitted, the mouse's current X value is used.  
 * @param {(String|Integer)} [Y]  
 * The Y coordinate to click at  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts.  
 * Client is usually the best choice.  
 * If the `Relative` param is used, x0 y0 starts at the mouse cursor.  
 * If omitted, the mouse's current Y value is used.  
 * @param {(String|Integer)} [Count]  
 * Number of clicks to send  
 * If omitted, `1` is used  
 * @param {(String)} [State]  
 * Set the button's logical state to down (held) or up (released).  
 * - Omit = A full click (down then up) is sent.  
 * - `D` or `Down` = The button is logically held down.  
 * - `U` or `Up` = The button is logically released.  
 * @param {(String)} [Relative]  
 * - `Rel` or `Relative` = Click relative to the mouse cursor.  
 *   Mouse cursor becomes x0 y0.  
 *   `X` and `Y` parameters are offsets from there.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlClick.htm|ControlClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()}
 * @example <caption>Different Click() examples.</caption>  
 * ; Left click
 * Click()
 * 
 * ; Right click
 * Click('R')
 * 
 * ; Double left click
 * Click('Left', 2)
 * 
 * ; Hold down XButton1
 * Click('X1 D')
 * 
 * ; Move cursor without clicking
 * Click('100 500 0')
 * 
 * ; Left click 10 pixels rigth and 10 pixels up from cursor
 * Click(10, -10, 'Rel')
 * 
 * ; Move cursor 50 pixels to the right
 * Click('0 50 0 Rel')
 * 
 * ; Hotkey for multiple mouse scrolls
 * $WheelUp::Click('WU', 5)
 * $WheelDown::Click('WD', 5)
 * 
 * ; Multiple parameters or one string can be used:
 * Click('Right', '50', 20, 'Down', 'Rel')
 * Click('Right 50 20 Down Rel')
 */
Click([Button:='L', X:=unset, Y:=unset, Count:=1, State:=unset, Relative:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ClipWait.htm|`ClipWait()`}  
 * Waits until the clipboard contains data.  
 * Clear the clipboard proior to using ClipWait() `A_Clipboard := 0`  
 * @param {(Number)} [TimeoutInSec]  
 * Time to wait in seconds.  
 * This can be a float fractions of a second.  
 * If omitted, function will wait indefinitely.  
 * @param {(Integer)} [WaitForType]  
 * Type of data to check for:  
 * - `0` = Wait for text  
 * - `1` = Wait for any type of data  
 * @returns {(Boolean)}  
 * `0` if timed out, otherwise `1`. 
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()}
 * @example <caption>Copy highlighted text to variable.</caption>  
 * *F1:: {
 *     str := save_clip()
 *     MsgBox(str)
 * }
 * 
 * save_clip() {
 *     backup := ClipboardAll()
 *     A_Clipboard := ''
 *     Send('^c')
 *     if !ClipWait(1, 1)
 *         return (A_Clipboard := backup)
 *     txt := A_Clipboard
 *     A_Clipboard := backup
 *     return txt
 * }
 */
ClipWait([TimeoutInSec:=unset, WaitForType:=0]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComCall.htm|`ComCall()`}  
 * Calls a native COM interface method by index.  
 * @param {(Integer)} Index  
 * The zero-based index of the method  
 * within the virtual function table. Corresponds to the method's  
 * position within the original interface definition.  
 * An invalid index can cause undefined behaviour, up to program termination.
 * @param {(Integer|Object)} ComObj  
 * The target COM object.  
 * Pointer value can be passed directly or encapsulated within an object  
 * with the Ptr property, such as a {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} with variant type VT_UNKNOWN.
 * @param {(String|Integer)} [TypeN]  
 * Arg's data type.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#str|`String`}: `Str`, `WStr`, `AStr`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#Int|`Integer`}: `Int64`, `Int`, `Short`, `Char`  
 * - `Float`: `Float`, `Double`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|`Unsigned numbers`}: `UInt`, `UShort`, `UChar`, `UPtr` (only 32-bit pointers)
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#ptr|`Pointer`}: `Ptr`, `* or P [suffix]`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#HRESULT|`COM`}: `HRESULT`  
 * 
 * There can be be multiple `type, arg` parameter pairs listed subsequently.  
 * 
 *       ComCall(5, some_com, 'int', width, 'int', height)
 * @param {(String)} [ArgN]  
 * The argument being passed.  
 * There can be be multiple `type, arg` parameter pairs listed subsequently.  
 * 
 *       ComCall(5, some_com, 'int', width, 'int', height)
 * @param {(String)} [ReturnType]  
 * If omitted, return type defaults to {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#HRESULT|HRESULT}  
 * If there is no return type (such as C's `void`), specify `Int` or another numeric type.  
 * `Cdecl` is supported but is generally not used by COM interface methods.
 * @returns {(String|Integer)}  
 * The actual value returned by the method  
 * @throws OSError - Any result indicating failure
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|ComObjQuery()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()}
 * @example <caption>Toggle active window taskbar button.</caption>  
 * $F1::toggle_taskbutton('hide')
 * $F2::toggle_taskbutton('show')
 * 
 * toggle_taskbutton(opt:='') {
 *     ; ITaskbarList
 *     ; https://learn.microsoft.com/windows/win32/api/shobjidl_core/nn-shobjidl_core-itaskbarlist
 *     static CLSID_TaskbarList := '{56FDF344-FD6D-11d0-958A-006097C9A090}'
 *         , IID_ITaskbarList  := '{56FDF342-FD6D-11d0-958A-006097C9A090}'
 *     tbl := ComObject(CLSID_TaskbarList, IID_ITaskbarList)
 *     activeHwnd := WinExist('A')
 *     ComCall(3, tbl)
 *     switch opt {
 *         case 'hide': ComCall(5, tbl, 'ptr', activeHwnd)
 *         case 'show': ComCall(4, tbl, 'ptr', activeHwnd)
 *     }
 *     tbl := ''
 * }
 */
ComCall(Index, ComObj [,TypeN:=unset, ArgN:=unset, ReturnType:='HRESULT'], *) => Primitive

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|`ComObjActive()`}  
 * Retrieves a registered COM object.  
 * @param {(String)} CLSID  
 * CLSID or human-readable Prog ID of the COM object to retrieve.  
 * @returns {(ComObject)}  
 * A COM wrapper object with the {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|variant type VT_DISPATCH (9)}.
 * @throws {{Error}} - An exception is thrown on failure.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|ComObjFlags()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm|ComObjConnect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ObjAddRef.htm|ObjAddRef()/ObjRelease()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|ComObjQuery()} |
 * {@link https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-getactiveobject|GetActiveObject (Microsoft Docs)}
 * @example <caption>Use {@link https://learn.microsoft.com/office/vba/api/Word.Application|`Word COM`} to view the current opened MS Word doc.</caption>  
 * word_com := ComObjActive('Word.Application')
 * if !word_com
 *     MsgBox("Word isn't open.")
 * else
 *     MsgBox(word.ActiveDocument.FullName)
 */
ComObjActive(CLSID) => ComObject

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm|`ComObjConnect()`}  
 * Connects a COM object's event source to the script, enabling events to be handled.  
 * @param {(ComObject)} ComObj  
 * An object which raises events.  
 * An error is shown if the object does not support {@link https://learn.microsoft.com/en-us/windows/win32/api/ocidl/nn-ocidl-iconnectionpointcontainer|IConnectionPointContainer}.
 * @param {(String|Object)} PrefixOrSink  
 * If omitted, the object is "disconnected".  
 * Otherwise, specify a string to prefix to the event name to determine which  
 * global function to call when an event occurs.  
 * Or an {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm#event-sink|event sink object} with static methods for each event handler.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|ComObjActive()} |
 * {@link https://learn.microsoft.com/previous-versions/ccxe1xe6(v=vs.85)|WScript.ConnectObject (Microsoft Docs)}
 * @example <caption></caption>  
 */
ComObjConnect(ComObj [,PrefixOrSink:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|`ComObjFlags()`}  
 * Retrieves or changes flags which  
 * control a COM wrapper object's behaviour.  
 * @param {(Object)} ComObj  
 * A COM wrapper object. See {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue}.  
 * @param {(Integer)} NewFlags  
 * New values for the flags identified by Mask, or flags to add or remove.  
 * - `1` = F_OWNVALUE
 *   - SafeArray = SafeArray is destroyed when wrapper object is freed.  
 *   - BSTR = BSTR is freed when wrapper object is freed.  
 * @param {(Integer)} Mask  
 * A bitmask of flags to change.  
 * @returns {(Integer)}  
 * New flags of the specified COM object  
 * @throws TypeError - If `ComObj` not a valid COM wrapper object  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|ComObjActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjArray.htm|ComObjArray()}
 * @example <caption>Checks for the F_OWNVALUE flag.</caption>  
 * arr := ComObjArray(0xC, 1)
 * if ComObjFlags(arr) & 1
 *     MsgBox('arr will be automatically destroyed.')
 * else
 *     MsgBox('arr will not be automatically destroyed.')
 */
ComObjFlags(ComObj [,NewFlags:=unset, Mask:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjFromPtr.htm|`ComObjFromPtr()`}  
 * Wraps a raw {@link https://learn.microsoft.com/windows/win32/api/oaidl/nn-oaidl-idispatch|IDispatch} pointer  
 * (COM object) for use by the script.  
 * @param {(Integer)} DispPtr  
 * A non-null interface pointer  
 * for IDispatch or a derived interface.  
 * @returns {(ComObject)}  
 * A wrapper object containing the  
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|variant type VT_DISPATCH} and the given pointer  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm|ComObjConnect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjFlags.htm|ComObjFlags()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ObjAddRef.htm|ObjAddRef()/ObjRelease()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|ComObjQuery()} |
 * {@link https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-getactiveobject|GetActiveObject (Microsoft Docs)}
 * @example <caption></caption>  
 */
ComObjFromPtr(DispPtr) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|`ComObjGet()`}  
 * Returns a reference to an  object  
 * provided by a COM component.  
 * @param {(String)} Name  
 * The display name of the object to be retrieved.  
 * See: {@link https://learn.microsoft.com/windows/win32/api/objbase/nf-objbase-mkparsedisplayname|MkParseDisplayName (Microsoft Docs)}  
 * @returns {(ComObject)}  
 * A new COM wrapper object with  
 * the {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|variant type VT_DISPATCH (9)}.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|ComObjActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjConnect.htm|ComObjConnect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|ComObjQuery()} |
 * {@link https://learn.microsoft.com/windows/win32/api/objbase/nf-objbase-cogetobject|CoGetObject (Microsoft Docs)}
 * @example <caption>Hotkey to show launch command line</caption>  
 * +Esc:: {
 *     pid := WinGetPID('A')
 *     wmi := ComObjGet('winmgmts:')
 *     query := 'Select * from Win32_Process where ProcessId=' pid
 *     queryEnum := wmi.ExecQuery(query)._NewEnum()
 *     if queryEnum(&proc)
 *         MsgBox(proc.CommandLine, 'Command line', 0)
 *     else
 *         MsgBox('Process not found!')
 * }
 */
ComObjGet(Name) => ComObject

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjQuery.htm|`ComObjQuery()`}  
 * Queries a COM object for an interface or service.  
 * @param {(Object|Integer)} ComObj  
 * A COM wrapper object, interface pointer,  
 * or object with a Ptr property which returns an interface pointer.  
 * GUID format: `{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}`  
 * @param {(String)} IIDorSID  
 * Either an interface identifier (GUID) or a  
 * service identifier. If this is a service identifier, an interface  
 * identifier must be passed into the 3rd param.  
 * @param {(String)} IID  
 * A service identifier in the same form as IID.  
 * @returns {(Object)}  
 * A COM wrapper object based on the IID  
 * - `IID_IDispatch` => ({@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject}) VT_Dispatch (9)  
 *   The script can call properties/methods using normal {@link https://www.autohotkey.com/docs/v2/Objects.htm#Usage_Objects|object syntax}.
 * - `Any other IID` => ({@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue}) - VT_UNKNOWN (13)  
 *   Provides a `Ptr` property that can be passed to {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} or {@link https://www.autohotkey.com/docs/v2/lib/ComCall.htm|ComCall}.
 * @throws Error - Any failure, such as "interface not supported."
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()}
 * {@link https://www.autohotkey.com/docs/v2/lib/ComCall.htm|ComCall()}
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjActive.htm|ComObjActive()}
 * @example <caption></caption>  
 * @returns {string} 
 */
ComObjQuery(ComObj, IIDorSID, IID) => Object

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm|`ComObjType()`}  
 * Retrieves type information from a COM object.  
 * @param {(Object)} ComObj  
 * A wrapper object containing a  
 * COM object or typed value. See {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} for details.
 * @param {(String)} [InfoType]
 * - Omitted = Integer {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm#vt|variant type code} indicating COM type is retrieved.  
 * - `Name` = Name of the object's default interface.  
 * - `IID` = Object's default interface GUID.  
 * - `Class` = Object's class name (Not the same as Prog ID)
 * - `CLSID` = Object's class GUID.  
 * @returns {(Integer|String)}  
 * Return value depnds on InfoType  
 * Empty string is returned if param is invalid or info can't be retrieved.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjValue.htm|ComObjValue()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()}
 * @example <caption></caption>  
 * d := ComObject('Scripting.Dictionary')
 * MsgBox('Variant type:`t' ComObjType(d)
 *     '`nInterface name:`t' ComObjType(d, 'Name')
 *     '`nInterface ID:`t' ComObjType(d, 'IID')
 *     '`nClass name:`t' ComObjType(d, 'Class')
 *     '`nClass ID (CLSID):`t' ComObjType(d, 'CLSID')
 * )
 */
ComObjType(ComObj [,InfoType:=unset]) => Primitive

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ComObjValue.htm|`ComObjValue()`}  
 * Retrieves the value or pointer stored in a COM wrapper object.  
 * @param {(Object)} ComObj  
 * A wrapper object containing a  
 * COM object or typed value. See {@link https://www.autohotkey.com/docs/v2/lib/ComValue.htm|ComValue} for details.
 * @returns {(Integer)}  
 * A 64-bit signed integer
 * @throws TypeError - `ComObj` is not a COM wrapper object
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjType.htm|ComObjType()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComObjGet.htm|ComObjGet()}
 * @example <caption></caption>  
 */
ComObjValue(ComObj) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlAddItem.htm|`ControlAddItem()`}  
 * Adds the specified string as a new entry  
 * at the bottom of a ListBox or ComboBox.  
 * @param {(String)} Str  
 * String to add.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * Index of the new item  
 * @throws TargetError - Window or control could not be found  
 * Or control's class does not contain `Combo` or `List`
 * @throws Error|OSError - Item could not be added  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlDeleteItem.htm|ControlDeleteItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlFindItem.htm|ControlFindItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Add|GuiControl.Add()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Adding an item to a ListBox.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_add','Add Item')
 * goo['btn_add'].OnEvent('Click', add_item)
 * goo.AddListBox('x+5 ym vListBox', ['Alpha', 'Bravo'])
 * goo.Show('w200 h100')
 * 
 * add_item(control, info) {
 *     ib := InputBox('Item to add to ListBox:',,,'Charlie')
 *     if (ib.Result = 'OK')
 *         ControlAddItem(ib.Value, control.gui['ListBox'])
 * }
 */
ControlAddItem(Str, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseIndex.htm|`ControlChooseIndex()`}  
 * Sets the selection in a ListBox,  
 * ComboBox or Tab control to specified index.  
 * @param {(Integer)} N  
 * The index number to select.  
 * 0 deselects all entries of a Listbox or ComboBox.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetIndex.htm|ControlGetIndex()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseString.htm|ControlChooseString()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|GuiControl.Choose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Selecting item(s) in a ListBox.</caption>  
 * items := ['Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo']
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_add','Select Item(s)')
 * goo['btn_add'].OnEvent('Click', choose_item)
 * goo.AddListBox('x+5 ym vListBox Multi r5', items)
 * goo.Show('w250 h100')
 * 
 * choose_item(control, info) {
 *     ib := InputBox('One or more numbers separated by spaces:')
 *     if (ib.Result = 'OK')
 *         loop parse ib.value, ' '
 *             ControlChooseIndex(A_LoopField, control.gui['ListBox'])
 * }
 */
ControlChooseIndex(N, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseString.htm|`ControlChooseString()`}  
 * Sets the selection in a ListBox or ComboBox  
 * to be the first entry that matches the specified string.  
 * @param {(String)} Str  
 * The string to choose. This is not case-sensitive. 
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The index of the chosen item.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseIndex.htm|ControlChooseIndex()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetChoice.htm|ControlGetChoice()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|GuiControl.Choose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Choosing ListBox string(s).</caption>  
 * items := ['Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo']
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_add','Select Item(s)')
 * goo['btn_add'].OnEvent('Click', choose_item)
 * goo.AddListBox('x+5 ym vListBox Multi r5', items)
 * goo.Show('w250 h100')
 * 
 * choose_item(control, info) {
 *     ib := InputBox('One or more strings separated by commas:')
 *     if (ib.Result = 'OK')
 *         loop parse ib.value, ',', ' '
 *             ControlChooseString(A_LoopField, control.gui['ListBox'])
 * }
 */
ControlChooseString(Str, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlClick.htm|`ControlClick()`}  
 * Sends a mouse button or mouse wheel event to a control.  
 * @param {(String|Integer|Object)} [ConOrPos]  
 * - Omitted: The target window itself is clicked.  
 * - Position: Specify an x and y value separated by a space/tab.  
 * 
 *       ControlClick('x100 y200')
 * - Control: A control's ClassNN, Text, HWND (handle),  
 *   or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}  
 * 
 *       ControlClick('Button2')
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [Button]  
 * If omitted, defaults to left click.  
 * `L`/`Left`, `R`/`Right`, `M`/`Middle`, `X1` (XButton1), `X2` (XButton2)  
 * `WU`/`WheelUp`, `WD`/`WheelDown`, `WR`/`WheelRight`, `WL`/`WheelLeft`  
 * @param {(Integer)} [Count]  
 * Number of times to click. Defaults to 1.  
 * @param {(String)} [Options]  
 * 
 * - Omitted: Down and then up events are sent to the middle of the control.  
 * - `NA`: May improve {@link https://www.autohotkey.com/docs/v2/lib/ControlClick.htm#Reliability|reliability}.  
 * - `D`: Set mouse button state to Down (hold).  
 * - `U`: Set mouse button state to Up (release).  
 * - `Pos`: Forces the `ConOrPos` variable to be Position (coordinates).  
 * - `X`\`Y`: Set the X and Y position of the click on the control itself.  
 *   The coordinates of a control start at the upper left corner of it (0,0).  
 *   Coordinates must be in decimal format.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - The target window or target control could not be found.  
 * @throws OSError - X and Y coords were omited and control's position was undetermined.  
 * @throws ValueError|TypeError - Invalid parameters were detected.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 * ; Click on the 2nd edit field of the active window
 * ControlClick('Edit2', 'A')
 * ; Click at x200 y300 in My Program
 * ControlClick('x200 y300', 'My Program ahk_exe myprog.exe')
 * ; Send a double click to the target window
 * ControlClick( , 'ahk_class my_prog', , 'Left', 2)
 * ; Click and hold right mouse button on the first radio
 * ControlClick('Radio1', 'A', , 'Right', , 'D')
 * ; Click the upperleft-most part of the AHK GUI's button
 * ControlClick(goo['BtnName'], , , , , , 'x0 y0')
 */
ControlClick([ConOrPos:=unset, WinTitle:='', WinText:='', Button:='Left', Count:=1, Options:=unset, NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlDeleteItem.htm|`ControlDeleteItem()`}  
 * Deletes the specified entry number from a ListBox or ComboBox.  
 * @param {(Integer)} N  
 * The index of the item to delete.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * Or control's class does not contain `Combo` or `List`
 * @throws Error|OSError - Item could not be added  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlAddItem.htm|ControlAddItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlFindItem.htm|ControlFindItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Delete|GuiControl.Delete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Adding an item to a ListBox.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_add','Delete Item(s)')
 * goo['btn_add'].OnEvent('Click', delete_item)
 * goo.AddListBox('x+5 ym vListBox', ['Alpha', 'Bravo', 'Charlie'])
 * goo.Show('h100')
 * 
 * delete_item(control, info) {
 *     ib := InputBox('Item index to delete:',,,'2')
 *     if (ib.Result = 'OK')
 *         ControlDeleteItem(ib.Value, control.gui['ListBox'])
 * }
 */
ControlDeleteItem(N, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlFindItem.htm|`ControlFindItem()`}  
 * Returns the entry number of a ListBox or ComboBox  
 * that is a complete match for the specified string.  
 * @param {(String)} Str  
 * The string to find. This is not case-sensitive.  
 * The entire text must match, not just the leading part.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The index of the found item.  
 * If no match is found, an exception is thrown.  
 * @throws TargetError - Window or control could not be found  
 * Or control's class does not contain `Combo` or `List` 
 * @throws Error - Item could not be found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlAddItem.htm|ControlAddItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlDeleteItem.htm|ControlDeleteItem()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Checking a ListBox for a specific string.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_add','Check for item')
 * goo['btn_add'].OnEvent('Click', check_item)
 * goo.AddListBox('x+5 ym vListBox', ['Alpha', 'Bravo', 'Charlie'])
 * goo.Show('h100')
 * 
 * check_item(control, info) {
 *     ib := InputBox('Item index to delete:',,,'2')
 *     pos := 0
 *     if (ib.Result = 'OK') {
 *         try pos := ControlFindItem(ib.Value, control.gui['ListBox'])
 *         if pos
 *             MsgBox(ib.Value ' was found at position ' pos '.')
 *         else MsgBox(ib.Value ' was not found...')
 *     }
 * }
 */
ControlFindItem(Str, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlFocus.htm|`ControlFocus()`}  
 * Sets input focus to a given control on a window.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The index of the found item.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetFocus.htm|ControlGetFocus()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @throws TargetError - Window or control could not be found  
 * @example <caption></caption>  
 * goo := Gui()
 * loop 3 {
 *     opt := 'xm vrad_' A_Index
 *     con := goo.AddRadio(opt, 'Focus Button ' A_Index)
 *     con.target := 'btn_' A_Index
 *     con.OnEvent('Click', focus_btn)
 * }
 * 
 * btn_w := 70
 * loop 3 {
 *     opt := 'x+5 ym w' btn_w ' vbtn_' A_Index
 *     goo.AddButton(opt, 'Button ' A_Index)
 * }
 * con := goo.AddButton('xp y+5 w' btn_w, 'Quit')
 * con.OnEvent('Click', (*) => ExitApp())
 * goo.Show()
 * 
 * focus_btn(con, info) => ControlFocus(con.gui[con.target])
 */
ControlFocus(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetChecked.htm|`ControlGetChecked()`}  
 * Returns a non-zero value if the checkbox or radio button is checked.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Boolean)}  
 * `1` if checkbox/radio is checked, else `0`  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - Message could not be sent to the control  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetChecked.htm|ControlSetChecked()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|GuiControl.Value} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Checkbox to verify script exit.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_close', 'Exit Script')
 * goo['btn_close'].OnEvent('Click', exit_script)
 * goo.AddCheckbox('x+10 ym vcb_close checked', 'Verify exit')
 * goo.Show('w200')
 * 
 * exit_script(control, info) {
 *     if !ControlGetChecked(control.gui['cb_close'])
 *         ExitApp()
 *     if (MsgBox('Do you want to exit?', , 'Y/N') = 'Yes')
 *         ExitApp()
 * }
 */
ControlGetChecked(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetChoice.htm|`ControlGetChoice()`}  
 * Returns the name of the currently selected entry in a ListBox or ComboBox.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The name of the selected entry in a ListBox or ComboBox  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseIndex.htm|ControlChooseIndex()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseString.htm|ControlChooseString()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|GuiControl.Choose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|GuiControl.Value} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_choice', 'Get choice')
 * goo['btn_choice'].OnEvent('Click', get_choice)
 * goo.AddListBox('x+5 ym vListBox Multi', ['Alpha', 'Bravo', 'Charlie'])
 * goo.Show('h100')
 * 
 * get_choice(control, info) {
 *     Try MsgBox(ControlGetChoice(control.gui['ListBox']))
 *     catch
 *         MsgBox('No entry selected.')
 * }
 */
ControlGetChoice(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetClassNN.htm|`ControlGetClassNN()`}  
 * Returns the ClassNN of the specified control.  
 * This is the name of the control class followed by its sequence number.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The ClassNN of the control  
 * @throws TargetError - A problem determining the target window or control
 * @throws Error|OSError - ClassNN could not be determined
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetControls.htm|WinGetControls()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|GuiControl.ClassNN} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Controls named after their ClassNN.</caption>  
 * goo := Gui()
 * loop 2
 *     con := goo.AddButton('xm w80')
 *     ,con.Text := ControlGetClassNN(con)
 * loop 2
 *     con := goo.AddEdit('xm w80')
 *     ,con.Text := ControlGetClassNN(con)
 * loop 2
 *     con := goo.AddText('xm w80')
 *     ,con.Text := ControlGetClassNN(con)
 * loop 2
 *     con := goo.AddRadio('xm w80')
 *     ,con.Text := ControlGetClassNN(con)
 * con := goo.AddDropDownList('xm')
 * con.Add([ControlGetClassNN(con)])
 * con.Choose(1)
 * loop 2
 *     con := goo.AddCheckbox('xm w80')
 *     ,con.Text := ControlGetClassNN(con)
 * goo.Show()
 */
ControlGetClassNN(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetEnabled.htm|`ControlGetEnabled()`}  
 * Returns a non-zero value if the specified control is enabled.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Boolean)}  
 * `1` if control is enabled, otherwise `0`  
 * @throws TargetError - The window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetEnabled.htm|ControlSetEnabled()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetEnabled.htm|WinSetEnabled()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Enabled|GuiControl.Enabled} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Report all disabled controls in a GUI.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn1 w80 +Disabled', 'Alpha')
 * goo.AddButton('ym vbtn2 w80', 'Bravo')
 * goo.AddButton('ym vbtn3 w80 +Disabled', 'Charlie')
 * con := goo.AddButton('xm w260 vcheck_btn', 'Check Button States')
 * con.OnEvent('Click', check_buttons)
 * goo.Show()
 * 
 * check_buttons(control, info) {
 *     str := 'Disabled controls:'
 *     for _, c in control.gui
 *         if !ControlGetEnabled(c)
 *             str .= '`n' c.Text ' ' c.Type
 *     MsgBox(str)
 * }
 */
ControlGetEnabled(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetFocus.htm|`ControlGetFocus()`}  
 * Retrieves the focused control of the target window, if any.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|handle (HWND)} of the focused control.  
 * `0` if none of the controls have focus.  
 * @throws TargetError - Problem determining the target window or control  
 * @throws OSError - Problem determining the control focus
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlFocus.htm|ControlFocus()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Show focused control HWND in statusbar.</caption>  
 * goo := Gui()
 * loop 3
 *     goo.AddButton('ym vbtn' A_Index, 'Button ' A_Index)
 * goo.AddStatusBar('vstatus')
 * goo.Show()
 * callback := sb_refresh.Bind(goo)
 * SetTimer(callback, 500)
 * 
 * sb_refresh(guiobj) {
 *     con := ControlGetFocus('ahk_id ' guiobj.hwnd)
 *     guiobj['status'].Text := 'Focused control HWND: ' con
 * }
 */
ControlGetFocus([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetHwnd.htm|`ControlGetHwnd()`}  
 * Returns the unique ID number (handle) of the specified control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * Specify the letter `A` to use the active window.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|handle (HWND)} of the specified control.  
 * @throws TargetError - The target window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Hwnd|GuiControl.Hwnd} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 * ; Get HWND of the first button on the active window
 * hwnd := ControlGetHwnd('Button1', 'A')
 * ; Get HWND of the checkbox from an AHK GUI
 * hwnd := ControlGetHwnd(GuiObj['my_checkbox'])
 * ; Get HWND of Notepad's main Edit window
 * hwnd := ControlGetHwnd('Edit1', 'ahk_class Notepad')
 */
ControlGetHwnd(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetIndex.htm|`ControlGetIndex()`}  
 * Returns the index of the current selected entry/tab of a ListBox, ComboBox or Tab control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The index of the tab or the ListBox/ComboBox selected entry.  
 * `0` if no tab/entry is selected.  
 * @throws TargetError - The window or control could not be found  
 * Or the control's class name does not contain "Combo", "List" or "Tab"
 * @throws OSError - Message could not be sent to the control  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseIndex.htm|ControlChooseIndex()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetChoice.htm|ControlGetChoice()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlChooseString.htm|ControlChooseString()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|GuiControl.Value} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Choose|GuiControl.Choose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption>Get the index of a selected ListBox item.</caption>  
 * goo := Gui()
 * goo.AddButton('xm ym vbtn_choice', 'get_choice')
 * goo['btn_choice'].OnEvent('Click', get_choice)
 * goo.AddListBox('x+5 ym vListBox Multi', ['Alpha', 'Bravo', 'Charlie'])
 * goo['ListBox'].Choose(2)
 * goo.Show('h100')
 * 
 * get_choice(control, info) {
 *     Try MsgBox('Index position: ' ControlGetIndex(control.gui['ListBox']))
 *     catch
 *         MsgBox('No entry selected.')
 * }
 */
ControlGetIndex(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetItems.htm|`ControlGetItems()`}  
 * Returns an array of items/rows from a  ListBox, ComboBox, or DropDownList.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Array)}  
 * An array containing the text of each item or row.  
 * @throws TargetError - The window or control could not be found  
 * Or the control's class name does not contain "Combo" or "List"  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ListViewGetContent.htm|ListViewGetContent()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetList.htm|WinGetList()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetItems(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetPos.htm|`ControlGetPos()`}  
 * Retrieves the position and size of a control.  
 * @param {(VarRef)} [OutX]  
 * The x coordinate of the control's upper left corner.  
 * Coordinates are relative to the {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm#Client|client area}.  
 * @param {(VarRef)} [OutY]  
 * The y coordinate of the control's upper left corner.  
 * Coordinates are relative to the {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm#Client|client area}.  
 * @param {(VarRef)} [OutWidth]  
 * Width of the control in pixels.  
 * @param {(VarRef)} [OutHeight]  
 * Height of the control in pixels.  
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the main window is targeted.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - The window or control could not be found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlMove.htm|ControlMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetPos([&OutX, &OutY, &OutWidth, &OutHeight, Control:=unset, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|`ControlGetStyle()`}  
 * Gets a conrol's style number.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {{Integer}} The controls' style number.
 * @throws TargetError - Window or control could not be found
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|ControlSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles Table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetStyle(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|`ControlGetExStyle()`}  
 * Gets a conrol's extended style number.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {{Integer}} The controls' style number.
 * @throws TargetError - Window or control could not be found
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|ControlSetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles Table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetExStyle(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|`ControlGetText()`}  
 * Retrieves text from a control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The text from the specified control.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetText.htm|ControlSetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetText(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlGetVisible.htm|`ControlGetVisible()`}  
 * Returns a non-zero value if the specified control is visible.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {{Boolean}} `1` if control is visible, otherwise `0`
 * @throws TargetError - The window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlHide.htm|ControlHide()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlShow.htm|ControlShow()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiControl.Visible} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlGetVisible(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlHide.htm|`ControlHide()`}  
 * Hides the specified control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - The window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlShow.htm|ControlShow()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetVisible.htm|ControlGetVisible()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinHide.htm|WinHide()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiControl.Visible} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlHide(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlHideDropDown.htm|`ControlHideDropDown()`}  
 * Hides the drop-down list of a ComboBox control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - The window or control could not be found  
 * @throws OSError - Message could not be sent to the control
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlShowDropDown.htm|ControlShowDropDown()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlHideDropDown(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlMove.htm|`ControlMove()`}  
 * Moves or resizes a control.  
 * @param {(Integer)} [X]  
 * The new x coordinate of the control's upper left corner.  
 * Coordinates are relative to the {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm#Client|client area}.  
 * @param {(Integer)} [Y]  
 * The new y coordinate of the control's upper left corner.  
 * Coordinates are relative to the {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm#Client|client area}.  
 * @param {(Integer)} [Width]  
 * The new width of the control.  
 * @param {(Integer)} [Height]  
 * The new height of the control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - Control's current position could not be determined  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetPos.htm|ControlGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlMove([X, Y, Width, Height, Control, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|`ControlSend()`}  
 * Sends simulated keystrokes to a window or control.  
 * @param {(String)} Keys  
 * The keystrokes to send to the specified control.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} syntax is used, including {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw|Raw}, {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Text|Text}, and {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Blind|Blind} modes.
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the main window is targeted.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Winamp.htm|Automating Winamp} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape Sequences} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSend(Keys [,Control:=unset, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|`ControlSendText()`}  
 * Sends simulated text to a window or control.  
 * Keystrokes are sent explicitly because [`{Text}` mode](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is enforced.  
 * @param {(String)} Keys  
 * The keystrokes to send to the specified control.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} syntax is not supported due to {Text} mode being enforced.  
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the main window is targeted.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Winamp.htm|Automating Winamp} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape Sequences} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSendText(Keys [,Control:=unset, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSetChecked.htm|`ControlSetChecked()`}  
 * Turns on/checks or  
 * turns off/unchecks a checkbox or radio button.  
 * @param {(Integer)} NewSetting  
 * Sets new checkbox/radio state.  
 * - `1` = Turn on/check
 * - `0` = Turn off/uncheck
 * - `-1` = Toggle/opposite of current state
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - A message could not be sent to the control
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetChecked.htm|ControlGetChecked()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Value|GuiControl.Value} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSetChecked(NewSetting, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSetEnabled.htm|`ControlSetEnabled()`}  
 * Enables or disables the specified control.  
 * @param {(Integer)} NewSetting  
 * Sets new checkbox/radio state.  
 * - `1` = Turn on/enable
 * - `0` = Turn off/disable
 * - `-1` = Toggle/opposite of current state
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetEnabled.htm|ControlGetEnabled()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetEnabled.htm|WinSetEnabled()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Enabled|GuiControl.Enabled} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSetEnabled(NewSetting, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|`ControlSetStyle()`}  
 * Changes the style of the specified control.  
 * @param {(Integer|String)} Value  
 * Pass a positive integer to completely  
 * overwrite/set the window's style. {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Table}.
 * - `+` Add: '+0x80' = `NewStyle := CurrentStyle | Value`
 * - `-` Remove: '-0x80' = `NewStyle := CurrentStyle & ~Value`
 * - `^` Toggle: '^0x80' = `NewStyle := CurrentStyle ^ Value`
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - The style could not be changed  
 * Partial change is considered a success.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles Table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSetStyle(Value, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|`ControlSetExStyle()`}  
 * Changes the extended style of the specified control.  
 * @param {(Integer|String)} Value  
 * Pass a positive integer to completely  
 * overwrite/set the window's style. {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Style Table}.
 * - `+` Add: '+0x80' = `NewStyle := CurrentStyle | Value`
 * - `-` Remove: '-0x80' = `NewStyle := CurrentStyle & ~Value`
 * - `^` Toggle: '^0x80' = `NewStyle := CurrentStyle ^ Value`
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - The style could not be changed  
 * Partial change is considered a success.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles Table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSetExStyle(Value, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlSetText.htm|`ControlSetText()`}  
 * Changes the text of a control.  
 * @param {(String)} NewText  
 * Text to assign to the control.  
 * A blank line can be used to clear the control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlSetText(NewText, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlShow.htm|`ControlShow()`}  
 * Shows the specified control if it was previously hidden.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlHide.htm|ControlHide()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetVisible.htm|ControlGetVisible()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinShow.htm|WinShow()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#Visible|GuiControl.Visible} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlShow(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ControlShowDropDown.htm|`ControlShowDropDown()`}  
 * Shows the drop-down list of a ComboBox control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - Message could not be sent to the control
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlHideDropDown.htm|ControlHideDropDown()}
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
ControlShowDropDown(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|`CoordMode()`}  
 * Determines where x0/y0 starts for various  
 * built-in functions. Relative to Client, Window, or Screen.  
 * {@link https://i.imgur.com/bZXILwM.png|Image showing each coordmode x0 y0 start point}  
 * Orange is screen, blue is window, green is client area
 * @param {(String)} TargetType  
 * Set group type:  
 * - `ToolTip` = Affects: {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|`ToolTip()`}
 * - `Pixel` = Affects: {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|`PixelGetColor()`}, {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|`PixelSearch()`}, {@link https://www.autohotkey.com/docs/v2/lib/ImageSearch.htm|`ImageSearch()`}  
 * - `Mouse` = Affects: {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|`MouseGetPos()`}, {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|`Click()`}, {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|`MouseMove()`}, {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|`MouseClick()`}, {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|`MouseClickDrag()`}  
 * - `Caret` = Affects: {@link https://www.autohotkey.com/docs/v2/lib/CaretGetPos.htm|`CaretGetPos()`}  
 * - `Menu` = Affects: {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Show|`Menu.Show()`}  
 * @param {(String)} [RelativeTo]  
 * Set x0 y0 position:  
 * - `Client`: Upper left of main window area of the program.  
 *   This is usually the best choice.
 * - `Window`: Upper left corner of the Window.  
 *   Window is the area around the client, including the  
 *   title bar and border around the client.  
 * - `Screen`: Upper left corner of the primary monitor.  
 *   Rarely the best choice. Screen should be used  
 *   when working with the desktop or arranging windows.  
 * - Omitted: Defaults to `Screen`  
 * @returns {(String)}  
 * Previous setting is always returned  
 * Can be `Client`, `Window`, or `Screen`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|PixelGetColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|PixelSearch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu.Show()} |
 * @example <caption></caption>  
 */
CoordMode(TargetType [,RelativeTo:='Screen']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Cos|`Cos()`}  
 * Returns the trigonometric cosine of the number.  
 * Convert radians to degrees: `Value * 180/pi` (180/pi = ~57.29578) 
 * Convert degrees to radians: `Value * pi/180` (pi/180 = ~0.01745329252)
 * @param {(Number)} Num  
 * The number to get the cosine value of.  
 * Must be expressed in radians.  
 * @returns {(Float)}  
 * Cosine of `Num`.  
 * @example <caption>Cosine Example.</caption>  
 * Cos(1.2) => 0.362358
 */
Cos(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|`Critical()`}  
 * Enables or disables {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread}  
 * the ability to interrupt other threads.
 * @param {(String)} [Setting]  
 * New critical setting:  
 * - `On` = Current thread is set to critical.  
 *   It cannot be interrupted by another thread.
 * - `Off` = Current thread immediately becomes interruptible.  
 *   This is regardless of the {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm#Interrupt|Thread Interrupt} settings.  
 *   See {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm#Off|"Critical Off"} for details.
 * - Positive Number = Enables Critical and uses the number as  
 *   milliseconds between {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm#Interval|Message Checks}.  
 * - `0` = Turns off critical.  
 * - `-1` = Turns on critical but disables {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm#Interval|internal message checking}.  
 *   Message checking still occurs during sleeps, delays, and waits.  
 * @returns {(Integer)}  
 * The previous setting is always returned.  
 * `0` for off, otherwise an integer greater than 0.
 * @see {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|Thread()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu Object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsPerHotkey.htm|#MaxThreadsPerHotkey} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsBuffer.htm|#MaxThreadsBuffer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|SetTimer()}
 * @example <caption></caption>  
 */
Critical([Setting:='On']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|`DateAdd()`}  
 * Adds or subtracts time from a date-time value.  
 * @param {(String)} DateTime  
 * A date-time stamp in the {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS date-time stamp} format.
 * @param {(Number)} Time  
 * Amount of time to add or subtract.  
 * @param {(String)} TimeUnits  
 * The type of time unit used in the `Time` parameter.  
 * - `S` / `Seconds`  
 * - `M` / `Minutes`  
 * - `H` / `Hours`  
 * - `D` / `Days`  
 * @returns {(String)}  
 * The `DateTime` after alteration in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} format.  
 * @throws ValueError - `DateTime` is invalid or prior to 1601  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|DateDiff()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()}
 * @example <caption></caption>  
 */
DateAdd(DateTime, Time, TimeUnits) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|`DateDiff()`}  
 * Compares two {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|date-time values} and returns the difference.  
 * Values are always rounded down to the nearest integer.  
 * For higher precision, use `Seconds` and divide by 60/3600/86400 for minutes/hours/days (respectively).  
 * @param {(String)} [DateTime1]  
 * First {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS date-time stamp} to compare.  
 * If omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#Now|A_Now} (current date-time) is used.  
 * @param {(String)} [DateTime2]  
 * Second {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS date-time stamp} to compare.  
 * If omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#Now|A_Now} (current date-time) is used.  
 * @param {(String)} TimeUnits  
 * Unit of time to get the difference in.  
 * - `S` / `Seconds`  
 * - `M` / `Minutes`  
 * - `H` / `Hours`  
 * - `D` / `Days`  
 * @returns {(Integer)}  
 * Difference between the two timestamps in the units requested.  
 * The difference is negative if DateTime1 is earlier than DateTime2.  
 * @throws ValueError - If a date-time stamp is invalid or year is prior to 1601  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|DateAdd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()}
 * @example <caption></caption>  
 */
DateDiff(DateTime1, DateTime2, TimeUnits) => Integer 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|`DetectHiddenText()`}  
 * Determines whether invisible text in a window is "seen" for the purpose of finding the window. This affects windowing functions such as WinExist and WinActivate.  
 * By default, this is on.  
 * @param {(Boolean)} NewSetting 
 * - `1` = Hidden text detected.  
 * - `0` = Hidden text ignored.  
 * @returns {(Boolean)}  
 * Previous setting, `0` or `1`  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()}
 * @example <caption></caption>  
 */
DetectHiddenText(NewSetting) => Integer 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|`DetectHiddenWindows()`}  
 * Determines whether invisible windows are "seen" by the script.  
 * By default, this is off.  
 * @param {(Boolean)} NewSetting 
 * - `1` = Hidden windows are detected.  
 * - `0` = Hidden windows are ignored.  
 * @returns {(Boolean)}  
 * Previous setting, `0` or `1`  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()}
 * @example <caption></caption>  
 */
DetectHiddenWindows(NewSetting) => Integer 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirCopy.htm|`DirCopy()`}  
 * Copies a folder along with all its sub-folders and files (similar to xcopy).  
 * @param {(String)} Source  
 * Path to source directory.  
 * If a full path isn't used, Source is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} Dest  
 * Path to destination directory.  
 * If a full path isn't used, Dest is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(Integer)} [Overwrite]  
 * Overwrite if destination already exists  
 * - `0` = Do not overwrite existing files.  
 * - `1` = Overwrite existing files.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown if any error occurs  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirMove.htm|DirMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()}
 * @example <caption></caption>  
 */
DirCopy(Source, Dest [,Overwrite:=0]) => EmptyString 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirCreate.htm|`DirCreate()`}  
 * Creates a folder.  
 * @param {(String)} DirName  
 * Path to directory.  
 * If a full path isn't used, DirName is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Any errors occur.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirDelete.htm|DirDelete()}  
 * @example <caption></caption>  
 */
DirCreate(DirName) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirDelete.htm|`DirDelete()`}  
 * Deletes a folder.  
 * @param {(String)} DirName  
 * Path to directory.  
 * If a full path isn't used, DirName is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(Boolean)} Recurse  
 * Recursively remove sub-contents:  
 * - `1` = The directory, all files, and subdirectories are removed.  
 *   Similar to cmd's {@link https://www.computerhope.com/rmdirhlp.htm#syntax|`rmdir /S`}  
 * - `0` = If directory contains anything (files or sub-directories), directory is not deleted.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Any errors occur.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirCreate.htm|DirCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()}
 * @example <caption></caption>  
 */
DirDelete(DirName [,Recurse:=0]) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirExist.htm|`DirExist()`}  
 * Checks for the existence of a folder and returns its attributes.  
 * @param {(String)} FilePattern  
 * Directory path or name to check.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * A string of all attributes found for the direcotry.  
 * - Empty String = The directory wasn't found
 * - `R` = ReadOnly
 * - `A` = Archive
 * - `S` = System
 * - `H` = Hidden
 * - `D` = Directory
 * - `O` = Offline
 * - `C` = Compressed
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileExist.htm|FileExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
DirExist(FilePattern) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirMove.htm|`DirMove()`}  
 * Moves a folder along with all its sub-folders and files.  
 * Can also be used to rename a folder.  
 * @param {(String)} Source  
 * Path to source directory.  
 * If a full path isn't used, Source is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} Dest  
 * Path to destination directory.  
 * If a full path isn't used, Dest is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} [OverwriteRename]  
 * 
 * - `0` = Do not overwrite exiting files.  
 *   Function fails if Dest already exists.  
 * - `1` = Overwrite with limitation.  
 *   Files/Folders in the Dest folder are overwritten only if Source has the same files/folders.  
 * - `2` = Overwrite explicitly.  
 *   All files/folders are overwritten.  
 * - `R` = Rename instead of moving.  
 *   Renaming is all-or-none and cannot be partially successful.  
 *   The function fails if Dest already exists.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown if any error occurs.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirCopy.htm|DirCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()}
 * @example <caption></caption>  
 */
DirMove(Source, Dest [,OverwriteOrRename:=0]) => EmptyString 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|`DirSelect()`}  
 * Displays a standard dialog that allows the user to select a folder.  
 * @param {(String)} [StartingFolder]  
 * Directory to start in.  
 * The path to a directory. `C:\Some\Path`  
 * Include an asterisk `*` before the path to allow the users to navigate upward. `*c:\some\path`  
 * To set limit to how far upward the user can navigate, include the folder before it. `c:\some *c:\some\path`  
 * A CLSID folder can be used such as `::{20D04FE0-3AEA-1069-A2D8-08002B30309D}`  
 * @param {(Integer)} [Options]
 * - `0` = All options disabled.  
 * - `1` = A "New Folder" button is provided.  
 * - `+2` = Add 2 to provide an edit field for typing the name of a folder.  
 * - `+4` = Add 4 to omit the BIF_NEWDIALOGSTYLE style.  
 *   This removes the "make new folder" button but ensures DirSelect works in PEs.
 * @param {(String)} [Prompt]  
 * Instruction text to display.  
 * @returns {(String)}  
 * Full path to the selected folder.  
 * An empty string is returned if the users cancels.  
 * Root directories include the trailing backslash `C:\` and can be removed with RTrim(path, )  
 * 
 *     path := RTrim(path, '\')
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUI} |
 * {@link https://www.autohotkey.com/docs/v2/misc/CLSID-List.htm|CLSID List} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirCopy.htm|DirCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirMove.htm|DirMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()}
 * @example <caption></caption>  
 */
DirSelect([StartingFolder:=A_MyDocuments, Options:=1, Prompt:='Select Folder - ' A_ScriptName]) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|`DllCall()`}  
 * Calls a function inside a DLL, such as a standard Windows API function.  
 * @param {(String|Integer|Object)} DLLNameOrPath  
 * Path to DLL or EXE, backslash, and function name.  
 * If a full path isn't used, DLLNameOrPath is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * Path can be omitted when using `User32.dll`, `Kernel32.dll`, `ComCtl32.dll`, or `Gdi32.dll`.  
 * A `W` (unicode) prefix is added if no function can be found.  
 * Performance can be increased by {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#load|preloading DLLs}. 
 * An integer function address can be used.  
 * If an object is passed, the `Ptr` property value is used.  
 * @param {(String|Integer)} [TypeN]  
 * Multiple Type/Arg pairs can be included.  
 * Arg's data type.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#str|`String`}: `Str`, `WStr`, `AStr`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#Int|`Integer`}: `Int64`, `Int`, `Short`, `Char`  
 * - `Float`: `Float`, `Double`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|`Unsigned numbers`}: `UInt`, `UShort`, `UChar`, `UPtr` (only 32-bit pointers)
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#ptr|`Pointer`}: `Ptr`, `* or P [suffix]`  
 * - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#HRESULT|`COM`}: `HRESULT`  
 * 
 * @param {(String)} [ArgN]  
 * The argument being passed.  
 * Multiple `Type`/`Arg` pairs can be included.  
 * @param {(String)} [ReturnType]  
 * Specify the expected returned data type.  
 * ReturnType can be omitted if the return type is `Int`, `BOOL`, or nothing,  
 * `Cdecl` can be be included before the return type for C calling conventions, but this only works on 32-bit versions of AHK.  
 * Most C++ object-oriented functions use `thiscall` which is NOT supported by AHK.  
 * @param {(String)} [ReturnType]  
 * If omitted, return type defaults to {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#HRESULT|HRESULT}  
 * If there is no return type (such as C's `void`), specify `Int` or another numeric type.  
 * `Cdecl` is supported but is generally not used by COM interface methods.
 * @throws PropertyError - An object passed to DLLNameOrPath is missing or has an invalid `Ptr` property  
 * @throws OSError - {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#HRESULT|HRESULT} type used and function {@link https://learn.microsoft.com/windows/win32/api/winerror/nf-winerror-failed|returned error}.  
 * @throws TypeError - The DLLNameOrPath parameter is a floating point number. A string or positive integer is required.  
 * @throws TypeError - An argument was passed a value of an unexpected type.  
 * @throws ValueError - The {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|return type} or one of the specified {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|arg types} is invalid.  
 * @throws Error - The specified DllFile could not be accessed or loaded.  
 * @throws Error - The specified function could not be found inside the DLL.  
 * @throws Error - The function was called but it aborted with a fatal exception.  
 * The {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} property contains the exception code.  
 * @throws Error - Too many or too few arguments were passed to the function.  
 * The {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} property contains the number of bytes the data type was off by.  
 * @returns {(Primitive)}  
 * The value returned by Function.  
 * If Function return type does not return a value, the result is an undefined value of ReturnType.  
 * @see {@link https://www.autohotkey.com/docs/v2/Compat.htm#DllCall|Binary Compatibility} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ComCall.htm|ComCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm|Functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_DllLoad.htm|#DllLoad} |
 * {@link https://learn.microsoft.com/windows/win32/apiindex/windows-api-list|Windows API Index}
 * @example <caption></caption>  
 */
DllCall(DLLNameOrPath [,Type1, Arg1, ReturnType:='Int'], *) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Download.htm|`Download()`}  
 * Downloads a file from the Internet.  
 * Any proxies configured for IE are used.  
 * @param {(String)} URL  
 * URL to download.  
 * FTP and Gopher URLS are supported.  
 * @param {(String)} SaveFile  
 * Path to save downloaded file.  
 * If a full path isn't used, SaveFile is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * To download to a variable, see {@link https://www.autohotkey.com/docs/v2/lib/Download.htm#ExWHR|this example}.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown on failure.  
 * Note that a download may seem successful only because an "error page" is returned.  
 * That error page is what gets saved.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()}
 * @example <caption></caption>  
 */
Download(URL, SaveFile) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveEject.htm|`DriveEject()`}  
 * Ejects the tray of the specified CD/DVD drive, or ejects a removable drive.  
 * This function waits fo the ejection or retraction to completel before continuing.  
 * @param {(String)} [Drive]  
 * The path to an optical drive.  
 * Drive letter can be used. `:` and `\` are optional. `E`, `E:`, `E:\`  
 * Device paths can be used and gotten from {@link https://learn.microsoft.com/windows-server/administration/windows-commands/mountvol|mountvol}. `\\?\Volume{...}`
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - No drive was found  
 * The underlying system functions do not always report failure.  
 * An exception may or may not be thrown.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions}
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveGetStatusCD.htm|DriveGetStatusCD()} |
 * @example <caption></caption>  
 */
DriveEject([Drive:=unset]) => EmptyString 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetCapacity.htm|`DriveGetCapacity()`}  
 * Returns the total capacity of the drive which contains the specified path, in megabytes.  
 * @param {(String)} Path  
 * Any path contained by the drive.  
 * May work with UNC paths and mapped drives.  
 * @returns {(Integer)}  
 * Total capacity of the drive in megabytes.  
 * @throws Error - An exception is thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveGetSpaceFree.htm|DriveGetSpaceFree()}
 * @example <caption></caption>  
 */
DriveGetCapacity(Path) => Integer 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetFileSystem.htm|`DriveGetFileSystem()`}  
 * Returns the type of the specified drive's file system.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * @returns {(String)}  
 * The file system type for the provided Drive.  
 * Including (but not limited to): `NTFS`, `HPFS`, `FAT32`, `FAT`, `CDFS`, `UDF`
 * @throws Error - An exception is thrown on failure
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions}
 * @example <caption></caption>  
 */
DriveGetFileSystem(Drive) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetLabel.htm|`DriveGetLabel()`}  
 * Returns the volume label of the specified drive.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * UNC names are allowed. `\srv1\dir1`  
 * @returns {(String)}  
 * - Volume name of Drive
 * @throws Error - An exception is thrown on failure
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveSetLabel.htm|DriveSetLabel()}
 * @example <caption></caption>  
 */
DriveGetLabel(drive) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetList.htm|`DriveGetList()`}  
 * Returns a string of letters.  
 * There is no separators between characters.  
 * @param {(String)} [DriveType]  
 * Omit DriveType to retrieve all types.  
 * Or use one of the following words:  
 * - `CDROM`
 * - `REMOVABLE`
 * - `FIXED`
 * - `NETWORK`
 * - `RAMDISK`
 * - `UNKNOWN`
 * @returns {(String)}  
 * String of drive letters.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * @example <caption>Show all system drive letters.</caption>  
 * List := DriveGetList()
 * MsgBox(list)
 */
DriveGetList([DriveType:=unset]) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetSerial.htm|`DriveGetSerial()`}  
 * Returns the volume serial number of the specified drive.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * UNC names are allowed. `\srv1\dir1`  
 * @returns {(Integer)}  
 * Drive's volume serial.  
 * To convert to hex, use {@link https://www.autohotkey.com/docs/v2/lib/Format.htm|Format()}. See example below.  
 * @throws Error - An exception is thrown on failure
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * @example <caption></caption>  
 * serial := DriveGetSerial('C:')
 * hex_serial := Format('{:X}', serial)
 * MsgBox('Serial: ' serial '`nHex: ' hex_serial)
 */
DriveGetSerial(Drive) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetSpaceFree.htm|`DriveGetSpaceFree()`}  
 * Returns the free disk space of the drive which contains the specified path, in megabytes.  
 * @param {(String)} Path  
 * Any path contained by the drive.  
 * May work with UNC paths and mapped drives.  
 * @returns {(Integer)}  
 * The free amount of disk space on the drive Path belongs to in megabytes.  
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveGetCapacity.htm|DriveGetCapacity()}
 * @example <caption></caption>  
 */
DriveGetSpaceFree(Path) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetStatus.htm|`DriveGetStatus()`}  
 * Returns the status of the drive which contains the specified path.  
 * @param {(String)} Path  
 * Any path contained by the drive.  
 * May work with UNC paths and mapped drives.  
 * @returns {(String)}  
 * The status of the drive that Path belongs to.  
 * - `Ready` = This is the most common.
 * - `NotReady` = Typical for removable drives that don't contain media.
 * - `Unknown` = Might indicate unformatted/RAW file system.
 * - `Invalid` = Path does not exist or is a network drive that is presently inaccessible, etc.
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions}
 * @example <caption></caption>  
 */
DriveGetStatus(Path) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetStatusCD.htm|`DriveGetStatusCD()`}  
 * Returns the media status of the specified CD/DVD drive.  
 * @param {(String)} [Drive]  
 * Drive letter followed by a colon.  
 * If omitted, the default CD/DVD drive will be used.  
 * @returns {(String)}  
 * The media status of Drive
 * - `not ready` = The drive is not ready to be accessed or is busy.  
 *   Known limitation: Can occur when drive contains a DVD instead of a CD.  
 * - `open` = The drive contains no disc, or the tray is ejected.  
 * - `playing` = The drive is playing a disc.  
 * - `paused` = The previously playing audio or video is now paused.  
 * - `seeking` = The drive is seeking.  
 * - `stopped` = The drive contains a CD but is not currently accessing it.  
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveEject.htm|DriveEject()}
 * @example <caption></caption>  
 */
DriveGetStatusCD([Drive:=unset]) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveGetType.htm|`DriveGetType()`}  
 * Returns the type of the drive which contains the specified path.  
 * @param {(String)} Path  
 * Any path contained by the drive.  
 * May work with UNC paths and mapped drives.  
 * @returns {(String)}  
 * The type of drive that Path belongs to.  
 * An empty string is returned if Path is invalid. Otherwise: 
 * - `Unknown`
 * - `Removable`
 * - `Fixed`
 * - `Network`
 * - `CDROM`
 * - `RAMDisk`
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * @example <caption></caption>  
 */
DriveGetType(Path) => String 

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveLock.htm|`DriveLock()`}  
 * Prevents the eject feature of the specified drive from working.  
 * To unlock a drive, call {@link https://www.autohotkey.com/docs/v2/lib/DriveUnlock.htm|DriveUnlock()}.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * May work with UNC paths and mapped drives.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Drive does not exist or does not support the locking feature  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveUnlock.htm|DriveUnlock()}
 * @example <caption></caption>  
 */
DriveLock(Drive) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveEject.htm|`DriveEject()`}  
 * Ejects the tray of the specified CD/DVD drive, or ejects a removable drive.  
 * This function waits fo the ejection or retraction to completel before continuing.  
 * @param {(String)} [Drive]  
 * The path to an optical drive.  
 * Drive letter can be used. `:` and `\` are optional. `E`, `E:`, `E:\`  
 * Device paths can be used and gotten from {@link https://learn.microsoft.com/windows-server/administration/windows-commands/mountvol|mountvol}. `\\?\Volume{...}`
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - No drive was found  
 * The underlying system functions do not always report failure.  
 * An exception may or may not be thrown.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions}
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveGetStatusCD.htm|DriveGetStatusCD()} |
 * @example <caption></caption>  
 */
DriveRetract([Drive:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveSetLabel.htm|`DriveSetLabel()`}  
 * Changes the volume label of the specified drive.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * May work with UNC paths and mapped drives.  
 * @param {(String)} [NewLabel]  
 * New drive label.  
 * If omitted, drive label is blanked.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveGetLabel.htm|DriveGetLabel()}  
 * @example <caption></caption>  
 */
DriveSetLabel(Drive [,NewLabel:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/DriveUnlock.htm|`DriveUnlock()`}  
 * Restores the eject feature of the specified drive.  
 * This may need to be called multiple times if the drive was locked multiple times.  
 * @param {(String)} Drive  
 * Drive letter followed by a colon. Backslash is optional.  
 * May work with UNC paths and mapped drives.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Drive.htm|Drive functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DriveLock.htm|DriveLock()}
 * @example <caption></caption>  
 */
DriveUnlock(Drive) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Edit.htm|`Edit()`}  
 * Opens the current script for editing in the default editor.  
 * Uses the associated "edit" verb in the registry. Notepad by default.  
 * Registry location: `HKCU\Software\Classes\AutoHotkeyScript\shell\edit\command`  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Reload.htm|Reload()} |
 * {@link https://www.autohotkey.com/docs/v2/Program.htm#edit|How to edit a script} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Editors.htm|Editors with AutoHotkey support}
 * @example <caption></caption>  
 */
Edit() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentCol.htm|`EditGetCurrentCol()`}  
 * Returns the column number in an Edit control where the caret (text insertion point) resides.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title must not contain this text.  
 * @param {(String)} [NoWinText]  
 * Window text must not contain this text.
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The column number in the Edit control where the caret resides.  
 * @throws Error - Window or control could not be found
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentLine.htm|EditGetCurrentLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLineCount.htm|EditGetLineCount()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLine.htm|EditGetLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetSelectedText.htm|EditGetSelectedText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|EditPaste()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
EditGetCurrentCol(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentLine.htm|`EditGetCurrentLine()`}  
 * Returns the line number in an Edit control where the caret (text insert point) resides.  
 * @param {(String|Integer|Object)} Control - A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The line number in the Edit control where the caret resides.  
 * @throws Error - Window or control could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentCol.htm|EditGetCurrentCol()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLineCount.htm|EditGetLineCount()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLine.htm|EditGetLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetSelectedText.htm|EditGetSelectedText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|EditPaste()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
  * @example <caption></caption>  
 */
EditGetCurrentLine(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditGetLine.htm|`EditGetLine()`}  
 * Returns the text of the specified line in an Edit control.  
 * @param {(Integer)} N  
 * Number of the line to get.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * Text from line N of the Edit control.  
 * May end in `` `r `` or `` `r`n ``, depending on the control.  
 * @throws TargetError - Window or control could not be found  
 * @throws ValueError - N is out of range or otherwise invalid  
 * @throws OSError - Message could not be sent to the control  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentCol.htm|EditGetCurrentCol()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentLine.htm|EditGetCurrentLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLineCount.htm|EditGetLineCount()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetSelectedText.htm|EditGetSelectedText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|EditPaste()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
EditGetLine(N, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditGetLineCount.htm|`EditGetLineCount()`}  
 * Returns the number of lines in an Edit control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The number of lines in an Edit control.  
 * All Edit controls have at least 1 line, even if it has no text. 
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - Message could not be sent to the control  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentCol.htm|EditGetCurrentCol()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentLine.htm|EditGetCurrentLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLine.htm|EditGetLine()}
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetSelectedText.htm|EditGetSelectedText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|EditPaste()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
EditGetLineCount(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditGetSelectedText.htm|`EditGetSelectedText()`}  
 * Returns the selected text in an Edit control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The selected text in the Edit control.  
 * An empty string is returned if no text is selected.  
 * @throws TargetError - Window or control could not be found  
 * @throws Error|OSError - There was a problem retrieving the text  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentCol.htm|EditGetCurrentCol()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetCurrentLine.htm|EditGetCurrentLine()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLine.htm|EditGetLine()}
 * {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|EditPaste()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/EditGetLineCount.htm|EditGetLineCount()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
EditGetSelectedText(Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EditPaste.htm|`EditPaste()`}  
 * Pastes the specified string at the caret in an Edit control.  
 * @param {(String)} Text  
 * String to paste into Edit control.  
 * @param {(String|Integer|Object)} Control  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - A message could not be sent to the control  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetText.htm|ControlSetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
EditPaste(Text, Control [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EnvGet.htm|`EnvGet()`}  
 * Retrieves an environment variable.  
 * @param {(String)} EnvVar  
 * Name of the environment variable.
 * @returns {(String)}  
 * The value of EnvVar.  
 * An empty string is returned if EnvVar has no value.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EnvSet.htm|EnvSet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|RunWait()}
 * @example <caption></caption>  
 */
EnvGet(EnvVar) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/EnvSet.htm|`EnvSet()`}  
 * Writes a value to a variable contained in the environment.  
 * @param {(String)} EnvVar  
 * Name of the environment variable.  
 * @param {(String)} [Value]  
 * Value to write.  
 * Omitting value deletes the variable.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Any failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/EnvGet.htm|EnvGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|RunWait()}
 * @example <caption></caption>  
 */
EnvSet(EnvVar [,Value:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|`Exit()`}  
 * Exits the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread}.  
 * If the script isn't {@link https://www.autohotkey.com/docs/v2/lib/Persistent.htm|Persistent}, Exit() acts as {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()} as killing the thread also kills the script.  
 * @param {(Integer)} [ExitCode]  
 * Any integer between -2147483648 and 2147483647.  
 * This code is accessible to any program that spawned the script.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Return.htm|Return()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Persistent.htm|Persistent()}
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm|Functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * @example <caption></caption>  
 */
Exit([ExitCode:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|`ExitApp()`}  
 * Terminates the script.  
 * @param {(Integer)} [ExitCode]  
 * Any integer between -2147483648 and 2147483647.  
 * This code is accessible to any program that spawned the script.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|Exit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Persistent.htm|Persistent()}
 * @example <caption>Example of a kill switch.</caption>  
 * ; Extremely useful to have a way to always end the script
 * *Esc::ExitApp()
 */
ExitApp([ExitCode:=0]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Exp|`Exp()`}  
 * Returns the result of raising e/Euler's number (2.71828182845905) to the Nth power.  
 * This is not for exponents. See the {@link https://www.autohotkey.com/docs/v2/Variables.htm#pow|`**` exponent operator}.  
 * @param {(Number)} N  
 * The power to raise e to.  
 * N can be negative.  
 * @returns {(Number)}  
 * Result of calculation.  
 * @example <caption></caption>  
 */
Exp(N) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileAppend.htm|`FileAppend()`}  
 * Writes text or binary data to the end of a file.  
 * File is created first if it does not exist.  
 * To overwrite a file, use {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()}.  
 * @param {(String|Object)} Text  
 * Text to append to file.  
 * If no text is provided, a new, blank file is still created.  
 * A {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|`buffer-like`} object can be passed to append raw binary data.  
 * Any object using {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} properties can be used.  
 * BOM (byte order mark) is only written if `UTF-8` or `UTF-16` encoding is used.  
 * @param {(String)} [Filename]  
 * Name of the file to be appended.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * Use an asterisk `*` as the Filename to send Text to standard out (stdout).  
 * FileName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @param {(String)} [Options]  
 * Zero or more options separated by spaces/tabs.  
 * - `Encoding` = Any of the {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm#Parameters|FileEncoding()} names.
 *   - `CP0`: The system default ANSI code page.
 *   - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).
 *   - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.
 *   - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).
 *   - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.
 *   - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 *   - `nnn`: A numeric code page identifier.
 * - `RAW` = Write the Text bytes to the file as-is, without any conversion.  
 * - `` `n ``=  Inserts a carriage return `` `r `` before all linefeeds `` `n ``.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|FileOpen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OutputDebug.htm|OutputDebug()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniWrite.htm|IniWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} |
 * {@link https://www.autohotkey.com/docs/v2/lib/File.htm|File Object} |
 * {@link https://www.autohotkey.com/docs/v2/Scripts.htm#continuation|Continuation Sections}
 * @example <caption></caption>  
 */
FileAppend(Text [,Filename:=unset, Options:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|`FileCopy()`}  
 * Copies one or more files.  
 * @param {(String)} SourcePattern  
 * Name of a file, a folder, or a wildcard `*` pattern.  
 * If a full path isn't used, SourcePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * All AHK files: `'folder\*.ahk'`  
 * All files that start with Project: `folder\project*.*`  
 * @param {(String)} DestPattern  
 * Name or pattern of the destination.  
 * If a full path isn't used, DestPattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * An asterisk before the file ext dot will be replaced with the SourcePattern's file name.  
 * An asterisk after the file ext dot will be replaced with the SourcePattern's file ext.  
 * A simple 1:1 copy while retaining the original:
 * 
 *     FileCopy('D:\Scripts\*.ahk', 'D:\Scripts\backup\*.*')
 * @param {(Integer)} [Overwrite]
 * - `0` = Do not overwrite existing files.  
 * - `1` = Overwrite existing files.  
 *   If DestPattern doesn't have a complimentary file/subfolder in SourcePattern, it will not be deleted.  
 * 
 * Other values are reserved for future use.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - If any files failed to be copied.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} is set to the number of failures.  
 * @throws Error - The specific file was not found.  
 * Patterns using broad matching with `?` and `*` do not error on match failure.  
 * @throws Error - Copying a file over itself, even with a OverWrite set to 1.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirCopy.htm|DirCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirMove.htm|DirMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()}
 * @example <caption></caption>  
 */
FileCopy(SourcePattern, DestPattern [,Overwrite:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileCreateShortcut.htm|`FileCreateShortcut()`}  
 * Creates a shortcut (.lnk) file.  
 * @param {(String)} File  
 * File to create a shortcut for.  
 * File path might not be needed if file is part of the PATH {@link https://www.autohotkey.com/docs/v2/Concepts.htm#environment-variables|environment variable}.  
 * @param {(String)} Link  
 * Name of the new shortcut link.  
 * @param {(String)} [WorkingDir]  
 * Dirctory for File's current working directory.  
 * If blank or omitted, the new shortcut has a blank "Start in" field.  
 * @param {(String)} [Args]  
 * Parameters to be passed to Link when launched.  
 * If blank or omitted, Link launches File with no parameters.  
 * @param {(String)} [Description]  
 * Comments describing the new Link.  
 * If blank of omitted, shortcut will have no description.  
 * @param {(String)} [IconFile]  
 * Full path and name of the icon to use for shortcut.  
 * If blank of omitted, shortcut will use File's icon.  
 * @param {(String)} [ShortcutKey]  
 * A single letter, number, or key name from the {@link https://www.autohotkey.com/docs/v2/KeyList.htm|key list} to launch the Link.  
 * If blank or omitted, no shortcut key is assigned.  
 * All shortcuts use the `Ctrl+Alt` modifiers and cannot be changed.  
 * @param {(Integer)} [IconNumber]  
 * The number of the icon to use from IconFile.  
 * If blank or omitted, it defaults to 1.  
 * @param {(Integer)} [RunState]  
 * Window state when Link is launched:  
 * - `1` = Normal
 * - `3` = Maximized
 * - `7` = Minimized
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Any failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileGetShortcut.htm|FileGetShortcut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileAppend.htm|FileAppend()}
 * @example <caption></caption>  
 */
FileCreateShortcut(File, LinkFile [,WorkingDir:=A_WorkingDir, Args:=unset, Description:='', IconFile:='', ShortcutKey:='', IconNumber:=1, RunState:=1]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|`FileDelete()`}  
 * Deletes one or more files.  
 * To delete an entire folder/subfolders, use {@link https://www.autohotkey.com/docs/v2/lib/DirDelete.htm|DirDelete()}. 
 * @param {(String)} FilePattern  
 * Name of a file or a wildcard `*` pattern.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Any files failed to delete.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} is set to the number of failures.  
 * Patterns using broad matching with `?` and `*` do not error on match failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileRecycle.htm|FileRecycle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirDelete.htm|DirDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()}
 * @example <caption></caption>  
 */
FileDelete(FilePattern) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|`FileEncoding()`}  
 * Sets the default encoding for {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()}, {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Read}, {@link https://www.autohotkey.com/docs/v2/lib/FileAppend.htm|FileAppend()}, and {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|FileOpen()}.  
 * @param {(String)} Encoding  
 * One of the following values:  
 * - `Encoding` = Any of the {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm#Parameters|FileEncoding()} names.
 *   - `CP0`: The system default ANSI code page.
 *   - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).
 *   - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.
 *   - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).
 *   - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.
 *   - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 *   - `nnn`: A numeric code page identifier.
 * - `RAW` = Write the Text bytes to the file as-is, without any conversion.  
 * - `` `n ``=  Inserts a carriage return `` `r `` before all linefeeds `` `n ``.  
 * @returns {(String)}  
 * The previous setting.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|FileOpen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|StrGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm#Binary|Reading Binary Data}
 * @example <caption></caption>  
 */
FileEncoding(Encoding) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileExist.htm|`FileExist()`}  
 * Checks for the existence of a file or folder and returns its attributes.  
 * @param {(String)} FilePattern  
 * The path, filename, or file pattern to check.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * A string of all attributes found for file or direcotry.  
 * - Empty String = No file or folder was found.  
 * - `R` = ReadOnly  
 * - `A` = Archive  
 * - `S` = System  
 * - `H` = Hidden  
 * - `N` = Normal  
 * - `D` = Directory  
 * - `O` = Offline  
 * - `C` = Compressed  
 * - `T` = Temporary  
 * - `L` = REPARSE_POINT (typically a symbolic link)  
 * - `X` = File has no attributes (rare)
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirExist.htm|DirExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileExist(FilePattern) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileInstall.htm|`FileInstall()`}  
 * Includes the specified file inside the {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe|compiled version} of the script.  
 * @param {(String)} Source  
 * Name of a single file to add to the EXE.  
 * Source must be a string, cannot be a variable of any type, and must be on the same line as the FileInstall() function.  
 * If a full path isn't used, Source is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} Dest  
 * Name of the file when it is extracted from the EXE.  
 * If a full path isn't used, Dest is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * The destination directory *must* already exist.  
 * @param {(Integer)} [Overwrite]  
 * If omitted, 0 is used.  
 * - `0` = Do not overwrite existing files. The operation fails.  
 * - `1` = Overwrite existing files.  
 * 
 * Other values are reserved for future use.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown on failure  
 * @throws Error - Any case where the file cannot be written to the destination  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_Include.htm|#Include}
 * @example <caption></caption>  
 */
FileInstall(Source, Dest [,Overwrite:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|`FileGetAttrib()`}  
 * Reports the attributes of a file or folder.  
 * @param {(String)} [Filename]  
 * Name of the file to be appended.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * FileName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @returns {(String)}  
 * A string of all attributes found for file or direcotry.  
 * - Empty String = No file or folder was found.  
 * - `R` = ReadOnly  
 * - `A` = Archive  
 * - `S` = System  
 * - `H` = Hidden  
 * - `N` = Normal  
 * - `D` = Directory  
 * - `O` = Offline  
 * - `C` = Compressed  
 * - `T` = Temporary  
 * - `L` = REPARSE_POINT (typically a symbolic link)  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileExist.htm|FileExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirExist.htm|DirExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|FileSetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|FileSetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|FileGetVersion()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileGetAttrib([Filename]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileGetShortcut.htm|`FileGetShortcut()`}  
 * Retrieves information about a shortcut (.lnk) file, such as its target file.  
 * @param {(VarRef)} LinkFile  
 * Name of the shortcut file to be analyzed. Include the `.lnk` ext.  
 * If a full path isn't used, LinkFile is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(VarRef)} [OutFile]  
 * Get target file of the shortcut.  
 * @param {(VarRef)} [OutDir]  
 * Get LinkFile's working directory.  
 * @param {(VarRef)} [OutArgs]  
 * Get function arguments for LinkFile.  
 * @param {(VarRef)} [OutDesc]  
 * Get LinkFile's description.  
 * @param {(VarRef)} [OutIcon]  
 * Get icon file for LinkFile.  
 * @param {(VarRef)} [OutIconNum]  
 * Get the icon number used with the icon file.  
 * Normally, this is 1.  
 * @param {(VarRef)} [OutState]  
 * Get window launch state of LinkFile.  
 * - `1` = Normal
 * - `3` = Maximized
 * - `7` = Minimized
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileCreateShortcut.htm|FileCreateShortcut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()}
 * @example <caption></caption>  
 */
FileGetShortcut(LinkFile [,&OutFile, &OutDir, &OutArgs, &OutDesc, &OutIcon, &OutIconNum, &OutState]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|`FileGetSize()`}  
 * Retrieves the size of a file.  
 * @param {(String)} [Filename]  
 * Name of the file to get the size of.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * FileName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @param {(String)} [Units]  
 * Unit type to return:  
 * - `B` or Omitted = Bytes
 * - `K` = Kilobytes
 * - `M` = Megabytes
 * @returns {(Integer)}  
 * The size of the specified file, rounded down to the nearest whole number.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|FileSetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|FileSetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|FileGetVersion()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files} |
 * @example <caption></caption>  
 */
FileGetSize([Filename:=unset, Units:='B']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|`FileGetTime()`}  
 * Retrieves the datetime stamp of a file or folder.  
 * @param {(String)} [Filename]  
 * Name of the file to get the size of.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * FileName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @param {(String)} [TimeType]  
 * Speicfy which time type to change:  
 * - `M` or Omitted = Modification time
 * - `C` = Creation time
 * - `A` = Last Access time
 * @returns {(String)}  
 * Get file time in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} format.  
 * Time is in local time, not UTC/GMT.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|FileSetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|FileSetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|FileGetVersion()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|DateAdd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|DateDiff()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileGetTime([Filename:=unset, TimeType:='M']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|`FileGetVersion()`}  
 * Retrieves the version of a file.  
 * @param {(String)} [Filename]  
 * Name of the file to get the version of.  
 * If a full path isn't used, this function uses the search sequence specified by the system {@link https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya|LoadLibrary} function.  
 * FileName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @returns {(String)}  
 * Version number of the specified file
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|FileSetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|FileSetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileGetVersion([Filename]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|`FileMove()`}  
 * Moves or renames one or more files.  
 * @param {(String)} SourcePattern  
 * Name of a file or a wildcard `*` pattern.  
 * If a full path isn't used, SourcePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} DestPattern  
 * Name or pattern of the destination.  
 * If a full path isn't used, DestPattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * An asterisk before the file ext dot will be replaced with the SourcePattern's file name.  
 * An asterisk after the file ext dot will be replaced with the SourcePattern's file ext.  
 * A simple 1:1 move retaining the original file names:
 * 
 *     FileMove('D:\Scripts\*.ahk', 'D:\Scripts\backup\*.*')
 * @param {(Integer)} [Overwrite]
 * - `0` = Do not overwrite existing files.  
 * - `1` = Overwrite existing files.  
 *   If DestPattern doesn't have a complimentary file/subfolder in SourcePattern, it will not be deleted.  
 * 
 * Other values are reserved for future use.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - If any files failed to be moved.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} is set to the number of failures.  
 * Patterns using broad matching with `?` and `*` do not error on match failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirCopy.htm|DirCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirMove.htm|DirMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()}
 * @example <caption></caption>  
 */
FileMove(SourcePattern, DestPattern [,Overwrite:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|`FileOpen()`}  
 * Opens a file to read specific content from it and/or to write new content into it.  
 * @param {(String)} Filename  
 * The path of the file to open.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * To used stdin, stdout, or stderr:  
 * - `stdin` Standard In:
 * 
 *       FileOpen('*', 'r')`
 * - `stdout` Standard Out:
 * 
 *       FileOpen('*', 'w')
 * - `stderr` Error stream:  
 * 
 *       FileOpen('**', 'w')
 * @param {(String|Integer)} Flags  
 * This can be either a string of flag characters or an integer sum of the desired options options.  
 * Integer can be decimal or hexidecimal.  
 * ### {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm#Access_modes|Access modes (mutually-exclusive)}
 * - | -Flag- | -Dec- | -Hex- | -Description-                                                          |
 *   | :---   | :---  | :---  | :---                                                                   |
 *   | `r`    | `0`   | `0x0` | Read: Fails if the file doesn't exist.                                 |
 *   | `w`    | `1`   | `0x1` | Write: Create a new file, overwriting existing file.                   |
 *   | `a`    | `2`   | `0x2` | Append: Create a new file, otherwise move file pointer to end of file. |
 *   | `rw`   | `3`   | `0x3` | Read/Write: Creates a new file if the file didn't exist.               |
 *   | `h`    |       |       | Indicates that Filename is a file handle to wrap in an object. {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm#Access_modes|More info.} |
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm#Sharing_mode_flags|Sharing mode flags}
 * - | -Flag- | -Dec-  | -Hex-   | -Description-                                                                |
 *   | :---   | :---   | :---    | :---                                                                         |
 *   | `-rwd` |        |         | Lock read, write, and/or delete access. Any combination may be used.         |
 *   | `-`    |        |         | Infers -rwd.                                                                 |
 *   |        | `0`    | `0x0`   | If `Flags` is numeric, no sharing mode flag causes the file to be locked.    |
 *   |        | `256`  | `0x100` | Shares read access.                                                          |
 *   |        | `512`  | `0x200` | Shares write access.                                                         |
 *   |        | `1024` | `0x400` | Shares delete access.                                                        |
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm#EOL_options|End of line (EOL) options}
 * - | -Flag-   | -Dec- | -Hex- | -Description-                                      |
 *   | :---     | :---  | :---  | :---                                               |
 *   | `` `n `` | `4`   | `0x4` | Reading: Replaces `` `r`n `` with `` `n ``         |
 *   |          |       |       | Writing: Replaces `` `n `` with `r`n when writing. |
 *   | `` `r `` | `8`   | `0x8` | Replace standalone `r with `n when reading.        |
 * 
 * @param {(String|Integer)} Encoding  
 * One of the following values:  
 * - `Encoding` = Any of the {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm#Parameters|FileEncoding()} names.  
 *   - `CP0`: The system default ANSI code page.  
 *   - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).  
 *   - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.  
 *   - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).  
 *   - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.  
 *   - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 *   - `nnn`: A numeric code page identifier.  
 * - `RAW` = Write the Text bytes to the file as-is, without any conversion.  
 * - `` `n ``=  Inserts a carriage return `` `r `` before all linefeeds `` `n ``.  
 * @returns {(File)}  
 * A new {@link https://www.autohotkey.com/docs/v2/lib/File.htm|File object} to handle the file.  
 * A File object uses properties and methods to work with a text file.  
 * @throws OSError - The file cannot be opened  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/File.htm|File Object}
 * @example <caption></caption>  
 */
FileOpen(Filename, Flags [,Encoding]) => File

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|`FileRead()`}  
 * Retrieves the contents of a file.  
 * @param {(String)} Filename  
 * name of the file to read  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} [Options]  
 * Zero or more options, separated by spaces/tabs
 * - `Encoding` = 
 *   - `CP0`: The system default ANSI code page.  
 *   - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).  
 *   - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.  
 *   - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).  
 *   - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.  
 *   - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 *   - `nnn`: A numeric code page identifier.  
 * - `m#` = Memory limitation where `#` is the number of bytes.  
 *   Only the leading part up to that amount is loaded from the file.  
 *   If omitted, the entire file is loaded
 * - `RAW` = Write the Text bytes to the file as-is, without any conversion.  
 * - `` `n ``=  Inserts a carriage return `` `r `` before all linefeeds `` `n ``.  
 * @returns {(String|Object)}  
 * Returns the contents of the of Filename.  
 * If the `RAW` option is used, a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object} is returned.  
 * Otherwise, a string is returned.  
 * An empty string is returned if the file does not exist or cannot be opened.  
 * @throws OSError - Problem opening or reading the file  
 * @throws MemoryError - A file is greater than 4GB in size  
 * @throws MemoryError - The program is unable to allocate enough memory for the requested size  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileOpen.htm|FileOpen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileAppend.htm|FileAppend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|IniRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm|Sort()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Download.htm|Download()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/File.htm|File Object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileRead(Filename [,Options]) => String | Object

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileRecycle.htm|`FileRecycle()`}  
 * Sends a file or directory to the recycle bin if possible, or permanently deletes it.  
 * @param {(String)} FilePattern  
 * Name of a file, a folder, or a wildcard `*` pattern.  
 * To recycle an entire directory, provide the name without a trailing backslash.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - An exception is thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileRecycleEmpty.htm|FileRecycleEmpty()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()}
 * @example <caption></caption>  
 */
FileRecycle(FilePattern) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileRecycleEmpty.htm|`FileRecycleEmpty()`}  
 * Empties the recycle bin.  
 * @param {(String)} [DriveLetter]  
 * Drive letter followed by a colon. Backslash is optional.  
 * Omit DriveLetter to empty all drive recycle bins.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileRecycle.htm|FileRecycle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileDelete.htm|FileDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileCopy.htm|FileCopy()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileMove.htm|FileMove()}
 * @example <caption></caption>  
 */
FileRecycleEmpty([DriveLetter:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|`FileSelect()`}  
 * Displays a standard dialog that allows the user to open or save file(s).  
 * @param {(String|Integer)} [Options]  
 * Zero or more options separted by spaces/tabs.  
 * - `0` = No options  
 *   Same as an empty string.
 * - `D` = Directory Select  
 *   Select a folder instead of a file.  
 *   The Filter param must be empty.
 * - `M` = Multi Select  
 *   More than one file can be selected via shift+click, alt+click, etc.
 * - `S` = Save Dialog  
 *   Changes the `Open` button to a `Save` button.
 * - Any sum of these number options:
 *   - `1` = File must exist.
 *   - `2` = Path must exist.
 *   - `8` = Prompt to create new file.
 *   - `16` = Propt to overwrite file.  
 *     Also forces `S` option.
 *   - `32` = Shortcuts are targeted instead of resolving to their target file.
 * @param {(String)} [RootOrFilename]  
 * Root directory, filename, or both.  
 * - `Root` = A path to use as a starting directory for the dialog box.  
 *   If a full path isn't used, Root is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * - `Filename` = Default text to show in the file name edit box.  
 *   This does not have to be a valid file name. Any text will show.  
 * - `Root\Filename` = Root directory followed by the default Filename: `Root\Filename.ext`  
 *   Root sets the starting directory. Everything past the last backslash populates the file name edit box.  
 *   Do not treat this as a full file path.
 * @param {(String)} [Title]  
 * Title of the window.  
 * If omited, `'Select File - ' A_ScriptName` is used.  
 * @param {(String)} [Filter]  
 * Restricts which file types to show.  
 * - Filter format:  
 * 
 *       FileSelect(,,, 'Text File (*.txt)')
 * - Multiple type format:  
 * 
 *       FileSelect(,,, 'AHK Script (*.ahk; *.ah2; *.ahk2)')
 * - Omit filter: If no filter is provided, All Files is used
 * 
 *       FileSelect(,,, 'All Files (*.*)')
 * @returns {(String|Array)}  
 * Returns the path of the select filed.  
 * A string of paths is returned if multi-select is in use.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUI} |
 * {@link https://www.autohotkey.com/docs/v2/misc/CLSID-List.htm|CLSID List} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopParse.htm|Loop-Parse}
 * @example <caption></caption>  
 */
FileSelect([Options:=0, RootOrFilename:=A_WorkingDir, Title:=unset, Filter:='']) => String | Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|`FileSetAttrib()`}  
 * Changes the attributes of one or more files or folders. Wildcards are supported.  
 * @param {(String)} Attributes  
 * Alter an attribute.  
 * Add `+`, remove `-`, or toggle `^` an attribute.  
 * - `R` = READONLY
 * - `A` = ARCHIVE
 * - `S` = SYSTEM
 * - `H` = HIDDEN
 * - `N` = NORMAL (Only works when used by itself)
 * - `O` = OFFLINE
 * - `T` = TEMPORARY
 * @param {(String)} [FilePattern]  
 * Name of the file to get the version of.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * FilePattern can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @param {(String)} [Mode]
 * - `D` = Directory. Includes folders  
 * - `F` = Files. Include files  
 * - `R` = Recurse. Recurses into all sub-folders  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Any files failed to be changed.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} is set to the number of failures.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to 0 if files are found, otherwise it gets the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|FileSetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|FileGetVersion()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileSetAttrib(Attributes [,FilePattern:=unset, Mode:='F']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|`FileSetTime()`}  
 * Changes the datetime stamp of one or more files or folders. Wildcards are supported.  
 * @param {(String)} [DateTimeStamp]  
 * A date-time in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#Remarks|YYYYMMDDHH24MISS} format.  
 * @param {(String)} [FilePattern]  
 * Name of the file to change time of.  
 * If a full path isn't used, FilePattern is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * FilePattern can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files} that's using an {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#OutputFile|OutputFile}.  
 * @param {(String)} [TimeType]  
 * Speicfy which time type to change:  
 * - `M` or Omitted = Modification time
 * - `C` = Creation time
 * - `A` = Last Access time
 * @param {(String)} [Mode]
 * - `D` = Directory. Includes folders  
 * - `F` = Files. Include files  
 * - `R` = Recurse. Recurses into all sub-folders  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Any files failed to be changed.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#Extra|Error.Extra} is set to the number of failures.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to 0 if files are found, otherwise it gets the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|FileGetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSetAttrib.htm|FileSetAttrib()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetSize.htm|FileGetSize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetVersion.htm|FileGetVersion()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|DateAdd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|DateDiff()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm|Loop-Files}
 * @example <caption></caption>  
 */
FileSetTime([DateTimeStamp:=A_Now, FilePattern:=unset, TimeType:='M', Mode:='F']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Floor|`Floor()`}  
 * Returns the specified number rounded down to the nearest integer.  
 * @param {(Number)} Num  
 * The number to round down.  
 * @returns {(Integer)}  
 * The floored value of Num.  
 * @example <caption></caption>  
 * Floor(1.1) ; => 1
 * Floor(1.9) ; => 1
 * Floor(2.0) ; => 2
 * Floor(-4.5) ; => -5
 * Floor(9.999) ; => 9
 */
Floor(Num) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Format.htm|`Format()`}  
 * Takes in varaibles and creates custom-formatted string.  
 * Can be used to tranform data types, align, pad, prefix, or build entire strings.  
 * @param {(String)} FormStr  
 * A string of text that describes how the finished string should be displayed.  
 * Special tags are used to transform variables appearance and data type: `{ParamNum:NewFormat}`  
 * To use literal curly braces in this string, they must be wrapped in curly braces: `{{}` `{}}`.  
 * - `ParamNum`  
 *   All parameters after `FormStr` are numbered 1, 2, 3, etc.  
 *   `ParamNum` indicates the variable's parameter number spot.  
 *   If an array is used, `ParamNum` indicates the array index to use.  
 *   If omitted, the number used is 1 higher than the previous number, or 1 if it's the first tag.  
 * - `NewFormat`  
 *   A string that describes how the value should be transformed.  
 *   Options need to be in the following order and should have no separators:  
 *   `Flags Width .Precision StrCase DataType`  
 *   Examples: `+08.3f` or `-10.10Ts`
 * 
 * ### Flags  
 * Alignment, prefix, padding, and display options:  
 * - `-` = Align text to the left of the given space.  
 *   The right side is padded with spaces to meet the width requirement.  
 *   Right alignment is used when this flag is omitted.  
 * 
 *       Format('{1:-5}', 1) ; => '1    '
 * - `+` = Show positive sign.  
 * 
 *       Format('{1:+d}', 100) ; => '+100'
 * - `0` = Pad with zeroes.  
 *   The `-` "Left Align" flag overrides this flag.  
 * 
 *       Format('{1:+04}', 1) ; => '0001'
 * - ` ` Space = Add space if signed and positive.  
 *   The `+` "Show Positive Sign" flag overrides this flag.  
 * 
 *       Format('{1: 04i}', 1) ; => ' 001'
 * - `#` = Show prefix or decimal  
 *   Dependent on the `DataType` used:  
 *   - `c` `d` `i` `u` `s` = No effect.  
 *   - `o` = Add octal `0` prefix.  
 * 
 *         Format('{1:#o}', 128) ; => '0200'
 *   - `x`/`X` = Add hex `0x`/`0X` prefix.  
 * 
 *         Format('{1:#x}', 255) ; => '0xff'
 *         Format("0x{1:X}", 1194684) ; => '0xABC123'
 *   - `e` `E` `f` `a` `A` = Force decimal point to show.  
 * 
 *         Format('{1:#.0f}', 10) ; => '10.'
 *   - `g` `G` = Force decimal point to show and trailing zeroes are not truncated.  
 * 
 *         Format('{1:g}', 4.2e01) ; => '42'
 *         Format('{1:#g}', 4.2e01) ; => '42.000'
 * 
 * ### Width  
 * - The expected width, in characters, after all transformations are made.  
 *   Value is padded with spaces and right-aligned by default.  
 *   The `-` "Left Align` flag and `0` 'Pad With Zeroes" flag can override this.  
 * 
 *       Format('{1:7d}', 1234) ; => '   1234'
 *       Format('{1:-7d}', 1234) ; => '1234   '
 *       Format('{1:07d}', 1234) ; => '0001234'
 * 
 * ### .Precision 
 * - Precision of the value. The dot `.` is required.  
 *   Dependent on the `DataType` used:  
 *   - `f` `e` `E` = Set number of decimal places.  
 *     Default: 6
 * 
 *         Format('{1:.3f}', 0.123456) ; => '0.123'
 *         Format('{1:.0f}', 42) ; => '42.0'
 *   - `g` `G` = Sets max signficant digits.  
 *     Default: 6
 * 
 *         Format('{1:.4g}', 123456) ; => '1.235e+05'
 *   - `s` = Set max number of characters to use.  
 * 
 *         Format('{1:.8s}', 'Hello World') ; => 'Hello Wo'
 *   - `d` `i` `u` `x` `X` `o` = Set width and pad with zeroes.  
 *     This will override the combination of `0` 'Pad With Zeroes" + a Width value.  
 *     Default: 1
 * 
 *         Format('|{1:#.6x}|', 0xABC) ; => '0x000abc'
 *         Format('|{1:010.5d}|', 123) ; => '00123'
 * 
 * ### StrCase
 * Adjust the case type of a string.  
 * Only works when the `DataType` is `s`  
 * - `U` = STRING UPPERCASE.  
 * - `L` = string lowercase.  
 * - `T` = String Title Case.  
 * 
 * ### DataType
 * The expected data type after transformation:  
 * - Integer 
 *   - `d` `i` = Signed Decimal   
 * 
 *         Format('{1:d}', -1.5) ; => '1'
 *   - `u` = Unsigned Decimal  
 * 
 *         Format('{1:u}', -1.5) ; => '18446744073709551615'
 *   - `x` `X` = Unsigned Hexadecimal  
 *     Case of `x`/`X` sets hex case `abcdef`/`ABCDEF`
 * 
 *         Format('{1:x}', 1194684) ; => '123abc'
 *         Format('0x{1:X}', 1194684) ; => '0xABC123'
 *   - `o` = Unsigned Octal
 * 
 *         Format('{1:o}', 128) ; => '200'
 *   - `p` = Hexidecimal Address  
 *     Width is determined by pointer size.  
 * 
 *         Format('{:p}', 956887554989) ; => '000000DECAF15BAD' ; 64-bit
 *         Format('{:p}', 1194684) ; => '00123ABC' ; 32-bit
 * - Floating-point  
 *   Decimal length is set by `.Precision`  
 *   - `f` = Float  
 *     `[-]123456789.000000`  
 * 
 *         Format('{1:f}', 123) ; => '123.000000'
 *   - `e` `E` = Float with exponent  
 *     `[-]123456789.000000[eE][-+]000`  
 *     Exponent is always 2-3 digits.  
 *     `e`/`E` case sets exponent symbol case `e`/`E`  
 * 
 *         Format('{:e}', 12345.6789) ; => '1.234568e+04'
 *   - `g` `G` = General format  
 *     Uses `e` or `f` format, whichever is more compact.  
 *     `e` is used if exponent is less than e-4 or greater than .Preciion.  
 *     `g`/`G` case sets exponent symbol case `e`/`E`.  
 * 
 *         Format('{:.4g}', 0.0000042) ; => '4.2e-06'
 *         Format('{:.4g}', 1.2e+02) ; => '120'
 *   - `a` `A` = Hexadecimal double precision  
 *     `[-]0xFEDCBA987.654321[pP][-+]0`  
 *     Exponent is denoted with p/P as e/E is a hex value.  
 *     `a`/`A` case sets exponent symbol case `p`/`P`.  
 * 
 *         Format('{:A}', -255.8) ; => '-0x1.ff9999999999aP+7'
 * - String  
 *   - `s` String  
 *     Numeric values are converted to string.  
 *     `Width` affects total chars, adding spaces for padding
 *     `.Precision` determines number of chars to use from `ParamNum`
 * 
 *         Format('{2:.4s}{1:.6s}', 'Hotkey()', 'Automation') ; => 'AutoHotkey'  
 *   - `c` Character Code  
 *     Converts number to its ordinal value just like {@link https://www.autohotkey.com/docs/v2/lib/Chr.htm|Chr()}
 * 
 *         Format('{:c}{:c}{:c}', 65, 72, 75) ; => 'AHK'  
 *         Format('¯\_({1:c})_/¯', 0x30C4) ; => '¯\_(ツ)_/¯'  
 * @param {(Primitive|Array)} [Values]  
 * One or more variables to be used in the `FormStr` parameter.  
 * Any number of parameter values can be passed in.  
 * 
 *     Format('{1:Us}{2:Ls}{3:Ts}', var1, var2, var3)
 * An array of values can be used if it's the only value and is marked {@link https://www.autohotkey.com/docs/v2/Functions.htm#VariadicCall|variadic*}.  
 * 
 *     arr := ['World', 'Hello']
 *     Format('{2}, {1}!', arr*) ; => 'Hello, World!'
 * @returns {(String)}  
 * The string after formatting.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()}
 * @example <caption></caption>  
 */
Format(FormStr [,Values*]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|`FormatTime()`}  
 * Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.  
 * @param {(String)} [DateTimeStamp]  
 * All or the leading part of a {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS} date time stamp.  
 * If omitted, A_Now (the current DTS) is used.  
 * Any of the following options can be included after the date timestamp:
 * - `R` = Reverse. The time and date order when `Form` is blank.  
 * - `L#` = Set Locale, where `#` is a {@link https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/70feba9f-294e-491e-b6eb-56532684c37f|local identifier (LCID)}.  
 *   Use `LSys` to use the system locale.  
 *   If omitted, user's current locale is used.  
 * - `D#` = Date options, where `#` is one of the following numbers:
 *   - `0` = Force default options to be used. Short date is used.
 *   - `1` = Use short date. Incompatible with `D2` or `D8`. Only usable when `Form` is blank.  
 *   - `2` = Use long date. Incompatible with `D1` or `D8`. Only usable when `Form` is blank.  
 *   - `4` = Use alternate calendar (if any).  
 *   - `8` = User Year-Month format. Incompatible with `D1` or `D2`. Only usable when `Form` is blank.  
 *   - `0x10` = Add left-to-right reading order layout marks.
 *   - `0x20` = Add right-to-left reading order layout marks.
 *   - `0x40000000` = For string translation, use system ANSI code page instead of locale's code page.
 *   - `0x80000000` = Ignore all user overrides in effect for the system's default date format.  
 * - `T#` = Time options, where `#` is one of the following numbers:  
 *   - `0` = Force default options to be used. Minutes and seconds are shown.  
 *   - `1` = Omit minutes and seconds.  
 *   - `2` = Omit seconds.  
 *   - `4` = Omit time marker (AM/PM).  
 *   - `8` = Always use 24-hour time.  
 *   - `12` = Combination of options `4` and `8`.  
 *   - `0x40000000` = For string translation, use system ANSI code page instead of locale's code page.
 *   - `0x80000000` = Ignore all user overrides in effect for the system's default time format.  
 * @param {(String)} [Form]  
 * The desired format.  
 * If omitted, `Time` + `LongDate` are used.  
 * To put literal text in the string without having it formatted should be enclosed in single quotes.  
 * To make a literal single quote, use two in a row `''`
 * 
 *       FormatTime(A_Now, "'Date:' MM/dd/yy 'Time:' hh:mm:ss tt") => 'Date: 12/03/23 Time: 05:03:58 PM'  
 * **{@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm#Date_Formats|Date Formats}**  
 * - `d` = Day of the month: `1-31`
 * - `dd` = 2 digit day of the month: `01-31`
 * - `ddd` = Day name abbr (based on language): `Sun-Sat`
 * - `dddd` = Day name (based on language): `Sunday-Saturday`
 * - `M` = Month of the year: `1-12`
 * - `MM` = 2 digit month of the year: `01-12`
 * - `MMM` = Month name abbr (based on language): `Jan-Dec`
 * - `MMMM` = Month name (based on language): `Januar-December`
 * - `y` = Year, no century: `0-99`
 * - `yy` = 2 digit year, no century: `00-99`
 * - `yyyy` = Full year: `1601-9999`
 * - `gg` = Period/era: `A.D.`
 * **{@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm#Time_Formats|Time Formats}**  
 * - `h` = 12 hour format: `1-12`
 * - `hh` = 2 digit 12 hour format: `01-12`
 * - `H` = 24 hour format: `0-23`
 * - `HH` = 2 digit 24 hour format: `00-23`
 * - `m` = Minutes: `0-59`
 * - `mm` = 2 digit minutes: `00-59`
 * - `s` = Seconds: `0-59`
 * - `ss` = 2 digit seconds: `00-59`
 * - `t` = Locale time marker abbr: `A-P`
 * - `tt` = Locale time marker full: `AM-PM`
 * **{@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm#Standalone_Formats|Premade Formats}**  
 * - Empty String = `Time` and `LongDate` are used:  
 * 
 *       FormatTime(v2_release) => '02:16 PM Monday, December 12, 2022'
 * - `Time` = Locale time  
 * 
 *       FormatTime(A_Now, 'Time') => '3:40 PM'
 * - `ShortDate` = Locale short date
 * 
 *       FormatTime(A_Now, 'ShortDate') => '11/30/2023'
 * - `LongDate` = Locale long date
 * 
 *       FormatTime(unix_epoch, 'LongDate') => 'Thursday, January 1, 1970'
 * - `YearMonth` = Month followed by year
 * 
 *       FormatTime(judge_day, 'YearMonth') => 'August 1977'
 * - `YDay` = Day of the year: 1-366
 * 
 *       FormatTime(heart_day, 'YDay') => '45'
 * - `YDay0` = 3-digit day of the year: 001-366
 * 
 *       FormatTime(heart_day, 'YDay0') => '045'
 * - `WDay` = Current day of the week.  
 *   1 = Sunday, 7 = Saturday
 * 
 *       FormatTime(hump_day, 'WDay') => '4'  
 * - `YWeek` = {@link https://www.rfc-editor.org/rfc/rfc3339#ref-ISO8601|ISO 8601} year/week YYYYWW number format.  
 *   The first week of January must have 4 days to be considered week 1.  
 *   Otherwise, that week is considered part of the prior year.  
 * 
 *       FormatTime(A_Now, 'YWeek') => '202348'
 * @returns {(String)}  
 * Formatted date timestamp.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Format.htm|Format()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileGetTime.htm|FileGetTime()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm#DateTime|Gui.DateTime} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#date|Built-in Date and Time Variables}
 * @example <caption></caption>  
 */
FormatTime([DateTimeStamp:=A_Now, Form:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GetKeyName.htm|`GetKeyName()`}  
 * Retrieves the name/text of a key.  
 * @param {(String)} KeyName  
 * A key from the {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}.  
 * Or a virtual key `vkFF`, scan code `sc01D`, or combination of the two in hexadecimal format.  
 * 
 *     GetKeyName('vk1Bsc001') => 'Escape'
 * @returns {(String)}  
 * Name of the key  
 * An empty string is returned if the key is invalid or unnamed.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyVK.htm|GetKeyVK()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeySC.htm|GetKeySC()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}
 * @example <caption></caption>  
 */
GetKeyName(KeyName) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GetKeyVK.htm|`GetKeyVK()`}  
 * Retrieves the virtual key code of a key.  
 * @param {(String)} KeyName  
 * A key from the {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}.  
 * Or a virtual key `vkFF`, scan code `sc01D`, or combination of the two in hexadecimal format.  
 * 
 *     GetKeyVK('Escape') => '27'
 * @returns {(Integer)}  
 * The virtual key code of the specified key.  
 * 0 is returned if key is invalid or has no virtual key code.  
 * Convert to hexadecimal to use with AHK functions like {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} or {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()}.  
 * 
 *     Format('vk{:X}', GetKeyVK('Escape')) => 'vk1B'
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeySC.htm|GetKeySC()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyName.htm|GetKeyName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Format.htm|Format()} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}
 * @example <caption></caption>  
 */
GetKeyVK(KeyName) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GetKeySC.htm|`GetKeySC()`}  
 * Retrieves the scan code of a key.  
 * @param {(String)} KeyName  
 * A key from the {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}.  
 * Or a virtual key `vkFF`, scan code `sc01D`, or combination of the two in hexadecimal format.  
 * 
 *     GetKeySC('Escape') => '1'
 * @returns {(Integer)}  
 * The scan code of the specified key.  
 * 0 is returned if key is invalid or has no scan code.  
 * Convert to hexadecimal to use with AHK functions like {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} or {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()}.  
 * 
 *     Format('sc{:03X}', GetKeySC('Escape')) => 'sc001'
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyVK.htm|GetKeyVK()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyName.htm|GetKeyName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Format.htm|Format()} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}
 * @example <caption></caption>  
 */
GetKeySC(KeyName) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|`GetKeyState()`}  
 * Gets the physical, logical, or toggle status of keyboard keys, mouse buttons, and controller joys.  
 * @param {(String)} KeyName  
 * A key from the {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}.  
 * Or a virtual key `vkFF`, scan code `sc01D`, or combination of the two in hexadecimal format.  
 * @param {(String)} [Mode]  
 * The type of state to get.  
 * Mode is ignored when getting controller status.   
 * - Omitted = Get logical state of the key/button.  
 * - `P` = Physical  
 *   Check if key/button is physically held down.  
 *   Keys/buttons must be hooked for this to register.  
 * - `T` = Toggle  
 *   Get toggle status of `CapsLock`, `NumLock`, or `ScrollLock`.  
 * @returns {(Primitive)}  
 * - Key/button/joy:
 *   - `1` = Down/toggled on
 *   - `0` = Up/toggled off
 * - Controller Axis
 *   - `0-100` = Percent of range depressed.  
 * - Controller POV `0-35900`
 *   - `-1` = No angle to report
 *   - `0` = forward POV
 *   - `9000` = 90 degrees POV right
 *   - `18000` = 180 degrees POV backward
 *   - `27000` = 270 degrees POV left
 * - `JoyName` `JoyButtons` `JoyAxes` `JoyInfo`  
 *   Value varies. See {@link https://www.autohotkey.com/docs/v2/KeyList.htm#Controller|Game Controllers}.
 * @throws ValueError - An invalid parameter is detected.  
 * KeyName does not exist on the current keyboard.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyVK.htm|GetKeyVK()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeySC.htm|GetKeySC()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyName.htm|GetKeyName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|InstallMouseHook()}
 * {@link https://www.autohotkey.com/docs/v2/lib/_UseHook.htm|#UseHook} |
 * {@link https://www.autohotkey.com/docs/v2/misc/RemapController.htm|Controller remapping} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List} |
 * @example <caption></caption>  
 */
GetKeyState(KeyName [,Mode]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GetMethod.htm|`GetMethod()`}  
 * Retrieves the implementation function of a method.  
 * @param {(Any)} Value  
 * Any value except for a {@link https://www.autohotkey.com/docs/v2/lib/ComObject.htm|ComObject}.
 * @param {(String)} [Name]  
 * Name of the method to retrieve.  
 * If omitted, validation is performed on the Value param and Value is returned if successful.  
 * @param {(Integer)} [ParamCount]  
 * Number of parameters caller will be passing in.  
 * This value must not be less than {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MinParams|Func.MinParams} or greater than {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MaxParams|Func.MaxParams}.  
 * ParamCount should never include the hidden `this` param that all methods have.  
 * If omitted or paramcount failed, a basic check for a `Call()` method is done.
 * @returns {(FuncObj)}  
 * A function object containing a reference to the method.  
 * @throws MethodError - Method was not found or cannot be retrieved
 * @throws ValueError|MethodError - Validation failed
 * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()}
 * @example <caption></caption>  
 */
GetMethod(Value [,Name, ParamCount]) => Func

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|`GroupActivate()`}  
 * Activates the next window in a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|Window Group}.  
 * @param {(String)} GroupName  
 * The name given to the group by {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}.  
 * @param {(String)} [Mode]  
 * Which window to activate.  
 * - Omit or Empty String = Activate the next window in the group.  
 * - `R` = Resume. If the current active window doesn't belong to the group, go back to the most recently active group window instead of going to the next.  
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|HWND (handle)} of the activated window is returned.  
 * `0` is returned if no window was found to activate or if the current active window is the only match.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupDeactivate.htm|GroupDeactivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupClose.htm|GroupClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_WinActivateForce.htm|#WinActivateForce}
 * @example <caption></caption>  
 */
GroupActivate(GroupName [,Mode:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|`GroupAdd()`}  
 * Adds a window specification to a window group, creating the group if necessary.  
 * @param {(String)} GroupName  
 * The name of the group to add the window ID.  
 * The group is created if it doesn't exist and GroupName is not case-sensitive.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupDeactivate.htm|GroupDeactivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupClose.htm|GroupClose()}
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
GroupAdd(GroupName [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GroupClose.htm|`GroupClose()`}  
 * Close the current active group window or all group windows.  
 * The next window in the series is then activated.  
 * @param {(String)} GroupName  
 * The name given to the group by {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}.  
 * @param {(String)} [Mode]  
 * Which window to close.  
 * - Empty String = Close the active window.  
 * - `R` = Resume. If the current active window doesn't belong to the group, go back to the most recently active group window instead closing it.  
 * - `A` = All. Closes all members of a group.  
 *   Same as: `WinClose('ahk_group GroupName')`
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupDeactivate.htm|GroupDeactivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}
 * @example <caption></caption>  
 */
GroupClose(GroupName [,Mode:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GroupDeactivate.htm|`GroupDeactivate()`}  
 * Activates the next window that does NOT belong to the group.  
 * @param {(String)} GroupName  
 * The name given to the group by {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}.  
 * @param {(String)} [Mode]  
 * Which window to activate.  
 * - Empty String = Activate the next window that doesn't belong to the group.  
 * - `R` = Resume. If the current active window doesn't belong to the group, go back to the most recently active group window instead of going to the next.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupClose.htm|GroupClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}
 * @example <caption></caption>  
 */
GroupDeactivate(GroupName [,Mode:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiCtrlFromHwnd.htm|`GuiCtrlFromHwnd()`}  
 * Gets the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl object} of a GUI control from its HWND.  
 * @param {(Integer)} Hwnd  
 * The window handle (HWND) of an AHK GUI control or a child window of such a control.  
 * @returns {(Gui.Control|String)}  
 * A GuiControl object for the specified HWND.  
 * An empty string is returned if HWND is invalid or isn't for a GuiControl.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GuiFromHwnd.htm|GuiFromHwnd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm|ListView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm|TreeView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|Control Types} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui object}
 * @example <caption></caption>  
 */
GuiCtrlFromHwnd(Hwnd) => Gui.Control

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/GuiFromHwnd.htm|`GuiFromHwnd()`}  
 * Retrieves the Gui object of a GUI window associated with the specified HWND.  
 * @param {(Integer)} Hwnd  
 * The window handle (HWND) of an AHK GUI.  
 * If RecurseParent is true, Hwnd can be a child window of another AHK GUI.
 * @param {(Boolean)} [RecurseParent]  
 * If true, Hwnd can be a child window which is not a GUI.  
 * GuiFromHwnd will search for the closest AHK GUI parent window and returns an object for it.  
 * @returns {(Gui|String)}  
 * The {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui object} that belongs to Hwnd.  
 * An empty string is returned if HWND is invalid or isn't for a Gui.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GuiCtrlFromHwnd.htm|GuiCtrlFromHwnd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm|ListView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/TreeView.htm|TreeView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControls.htm|Control Types} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm|GuiControl object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui object}
 * @example <caption></caption>  
 */
GuiFromHwnd(Hwnd [,RecurseParent]) => Gui

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|`HasBase()`}  
 * Returns a non-zero number if the specified value is derived from the specified base object.  
 * @param {(Any)} Value  
 * Any value of any type.  
 * @param {(Object)} BaseObj  
 * The object to check for in the inheritance chain of `Value`.  
 * @returns {(Boolean)}  
 * `1` if `BaseObj` is found in the inheritance chain of `Value`, otherwise `0`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|ObjGetBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Obj.Base}
 * @example <caption></caption>  
 */
HasBase(Value, BaseObj) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|`HasMethod()`}  
 * Returns a non-zero number if the specified value has a method by the specified name.  
 * @param {(Any)} Value  
 * Any value of any type except ComObject.  
 * @param {(String)} [Name]  
 * The method name to check for.  
 * If omitted, `Value` is checked to see if it is callable.  
 * @param {(Integer)} [ParamCount]  
 * Number of parameters caller will be passing in.  
 * This value must not be less than {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MinParams|Func.MinParams} or greater than {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#MaxParams|Func.MaxParams}.  
 * ParamCount should never include the hidden `this` param that all methods have.  
 * If omitted or paramcount failed, a basic check for a `Call()` method is done.
 * @returns {(Boolean)}  
 * `1` if method was found and passed validation, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetMethod.htm|GetMethod()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|HasProp()} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
 * @example <caption></caption>  
 */
HasMethod(Value [,Name:=unset, ParamCount:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HasProp.htm|`HasProp()`}  
 * Returns a non-zero number if the value passed in has a property by the specified name.  
 * @param {(Any)} Value  
 * Any value of any type except ComObject.  
 * @param {(String)} [Name]  
 * The property name to check for.  
 * @returns {(Boolean)}  
 * `1` if property was found, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/HasBase.htm|HasBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/HasMethod.htm|HasMethod()} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects}
 * @example <caption></caption>  
 */
HasProp(Value, Name) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|`HotIf()`}  
 * Sets the criteria for when a subsequently created {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}/{@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} is enabled or disabled.  
 * This works similarly to how {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} works with {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|`Hotkey::`}.  
 * All calls to Hotkey() or Hotstring() will resepct the last declared HotIf().  
 * @param {(String|FuncObj)} [ExpressionOrCallback]  
 * Something that evaluates to true or false.  
 * When this evaluation returns true, the hotkey or hotstring is enabled and usable.  
 * - **Omitted**  
 *   Omitting this param resets any HotIf criteria and makes future hotkeys/hotstrings work globally.  
 * - **Expression**  
 *   A string expression that references an existing {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} expression.  
 *   If a `#HotIf` directive for that expression doesn't exist, a Callback should be used instead.  
 * - **Callback** (FuncObj)  
 *   A {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|Function Object} that returns a true or false statement.  
 *   The last parameter of the callback receives the hotkey/hotstring name and comes after any parameters provided by a {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc}.  
 * 
 *       hotkey_callback(HotName)
 *       hotkey_callback(OtherParams, HotName)
 *   A {@link https://www.autohotkey.com/docs/v2/Variables.htm#fat-arrow|fat-arrow} callback can be used to quickly define a HotIf():
 * 
 *       HotIf((HotName) => some_func(HotName))
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - A parameter is invalid.  
 * No matchine expression found or callback was invalid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * @example <caption></caption>  
 */
HotIf([ExpressionOrCallback]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|`HotIfWinActive()`}  
 * Controls when a subsequently created {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}/{@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} is enabled or disabled based on a specific window being active.  
 * @param {(String)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * Omitting both params resets any HotIf criteria and makes future hotkeys/hotstrings work globally.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - A parameter is invalid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
HotIfWinActive([WinTitle:='', WinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|`HotIfWinExist()`}  
 * Controls when a subsequently created {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}/{@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} is enabled or disabled based on a specific window existing.  
 * @param {(String)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * Omitting both params resets any HotIf criteria and makes future hotkeys/hotstrings work globally.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - A parameter is invalid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
HotIfWinExist([WinTitle:='', WinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|`HotIfWinNotActive()`}  
 * Controls when a subsequently created {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}/{@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} is enabled or disabled based on a specific window not being active.  
 * @param {(String)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * Omitting both params resets any HotIf criteria and makes future hotkeys/hotstrings work globally.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - A parameter is invalid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
HotIfWinNotActive([WinTitle:='', WinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|`HotIfWinNotExist()`}  
 * Controls when a subsequently created {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()}/{@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} is enabled or disabled based on a specific window not existing.  
 * @param {(String)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * Omitting both params resets any HotIf criteria and makes future hotkeys/hotstrings work globally.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - A parameter is invalid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkey::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
HotIfWinNotExist([WinTitle:='', WinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|`Hotkey()`}  
 * Creates, modifies, enables, or disables a hotkey.  
 * @param {(String)} KeyName  
 * A {@link https://www.autohotkey.com/docs/v2/KeyList.htm|key name}, including any {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#Symbols|modifier symbols}.  
 * If `KeyName` is already declared, the old hotkey is replaced with the new one.  
 * Modifier order doesn't matter but `KeyName` must match the original spelling. `Escape` won't replace `Esc`.  
 * **Modifier Symbols**  
 * - `#` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Window key}  
 * - `!` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Alt key}  
 * - `^` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Control key}  
 * - `+` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Shift key}  
 * - `<` = Use {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#LeftRight|left side key} of a key pair  
 *   `LAlt`, `LShift`, `LControl`, `LWin`
 * - `>` = Use {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#LeftRight|right side key} of a key pair  
 *   `RAlt`, `RShift`, `RControl`, `RWin`
 * - `<^>!` = The {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#AltGr|AltGr} key. AKA: AltGraphic, AltGraph  
 *   Windows usually sees this as `Ctrl+Alt`  
 * - `$` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htmprefixdollar|Hook} hotkey to prevent {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} from activating this hotkey.  
 *   Mouse button hotkeys are automatically hooked.  
 * - `*` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#wildcard|Wildcard} allows hotkey activation even if other keys are being held  
 *   This option hooks the hotkey  
 * - `~` = {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#Tilde|Send hotkey} keystroke before running the hotkey `Action`  
 *   This option hooks the hotkey  
 * - `&` = Create a 2-key {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#combo|Custom Combination}
 *   This option hooks the hotkey  
 * - `Up` = Hotkey activates on release instead of on press.  
 *   The word `Up` must be 
 *   This option hooks the hotkey  
 * @param {(FuncObj|String)} [Action]  
 * The action to take on hotkey activation.  
 * This can be a callback, the name of a {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|`Hotkey::`}, or one of the following keywords:  
 * - `On` = The hotkey becomes enabled  
 * - `Off` = The hotkey becomes disabled  
 * - `Toggle` = The hotkey is switched between enabled and disabled  
 * - Special {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#alttab|AltTab} options:  
 *   - `AltTab` = Move AltTab menu selection forward if shown, otherwise show menu  
 *     Only works with hotkeys using two keys  
 *   - `ShiftAltTab` = Move AltTab menu selection backward if shown, otherwise show menu  
 *     Only works with hotkeys using two keys  
 *   - `AltTabMenu` = Show or hide AltTab menu  
 *   - `AltTabAndMenu` = Move AltTab menu selection forward if shown, otherwise show menu  
 *   - `AltTabMenuDismiss` = Close the AltTab menu  
 * 
 * `Action` can be omitted when only updating a hotkey's `Options` parameter.  
 * @param {(String)} [Options]  
 * Zero or more of the following options. Space separators are optional.  
 * - `On` = Enable hotkey
 * - `Off` =  Disable hotkey
 * - `B` = Buffers hotkey as described in {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsBuffer.htm|#MaxThreadsBuffer}  
 *   Use `B0` to disable this
 * - `P#` = Set Priority of hotkey where `#` is the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread priority number}  
 *   The default of is `P0`
 * - `S` = Gives the hotkey {@link https://www.autohotkey.com/docs/v2/lib/_SuspendExempt.htm|exemption} from {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()}  
 *   Use `S0` to disable exemption
 * - `T#` = Set Thread number, where `#` is the max number of thread to allow
 * - `I#` = Set Input level, where `#` is the hotkey's {@link https://www.autohotkey.com/docs/v2/lib/_InputLevel.htm|input level}
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws ValueError - Invalid key name
 * @throws ValueError - Unsupported prefix key
 * @throws ValueError - AltTab hotkey must have exactly one modifier/prefix
 * @throws ValueError - SltTab hotkey must specify a Left or Right side key
 * @throws TargetError - Nonexistent hotkey
 * @throws TargetError - Nonexistent hotkey variant
 * @throws Error - Max amount of hotkeys created
 * @see {@link https://www.autohotkey.com/docs/v2/lib/HotIf.htm|HotIf()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|Thread()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|SetTimer()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Return.htm|Return} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#ThisHotkey|A_ThisHotkey} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#Symbols|Hotkey Symbols} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsBuffer.htm|#MaxThreadsBuffer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsPerHotkey.htm|#MaxThreadsPerHotkey}
 * @example <caption></caption>  
 */
Hotkey(KeyName [,Action, Options]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|`Hotstring()`}  
 * Creates, modifies, enables, or disables a hotstring.  
 * The case used to type the hotstring (UPPERCASE, lowercase, Title Case) carries over to the auto-replce text.
 * @param {(String)} Option  
 * - Hotstring = An activation string and options using the {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|`::Hotstring`} format.  
 *   This creates (or updates an already existing) hotstring.  
 *   Options should be placed between the double colons `::` and are listed below in the `NewOptions` section  
 * 
 *       ; Typing '/new' inserts #Requires and a kill switch to a new script
 *       Hotstring(':?*:/new', '{#}Requires AutoHotkey v2.0{+}`n*Esc::ExitApp()')
 *       ; Typing '!quit!' exits the script
 *       Hotstring(':?*X:!quit!', (*) => ExitApp())
 * - {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm#EndChars|`"EndChars"`} = Get or set the string of ending characters used by hotstrings. See `Value` param.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm#MouseReset|`"MouseReset"`} = Get or set the current setting for mouse clicks resetting the hotstring recognizer. See `Value` param.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm#Reset|`"Reset"`} = Immediately reset the hotstring recognizer.  
 * - NewOptions = A string of {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#Options|hotstring options} to set as the new default for future hotstrings.  
 *   An example of each option can be found in the example section  
 *   - `*` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#Asterisk|Wildcard}. Hotstring fires as soon as a match is made, without the need of an {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars|EndChar}.  
 *   - `?` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#Question|Verbatim}. Hotstring fires whenever it is typed, including while inside another word  
 *   - `B0` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#b0|Backspacing} disable. The replacement text from `Value` is sent without deleting the hotstring  
 *     To re-enabled backspacing, use `B`  
 *   - `C` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#C|Case-sensitive hotstring}. A hotstring must be typed exactly as defined to be activated.  
 *     This can be disabled using `C0`.  
 *   - `C1` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#C1|Case mirroring} disable. The {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#auto|auto-replace} text is sent **exactly** as typed.  
 *     This overrides the default behavior where typing a hotstring in a certain case (UPPERCASE or Title Case) causes the a lowercase replacement text to conform to that case type.  
 *     Case mirroring can be enabled using `C0`.  
 *   - `K#` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#Kn|Key-delay}. Sets delay between {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#auto|auto-replace} keystrokes, where `#` is the time, in milliseconds, or `-1` for no delay  
 *     This delay includes the keystrokes for backspacing the hotstring text.  
 *     The {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#SendMode|send mode} affects Key-Delay behavior:  
 *     - `SE` SendEvent = Sets the delay between keystrokes  
 *     - `SP` SendPlay = Sets the {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm#dur|press duration} of each keystroke, but not the delay between them  
 *     - `SI` SendInput = Key-delay can only affect SendInput when it's in {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputUnavail|unavailable mode} because it defaults to SendEvent mode.  
 *   - `O` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#O|Omit}. The {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars|EndChar} of an {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#auto|auto-replace hotstring} is omitted  
 *   - `P#` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#Pn|Priority}. Set the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|priority} level of the hotstring, where `#` is the level number  
 *     This has no affect on {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#auto|auto-replace hotstring} and is rarely used.  
 *   - `S` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#SuspendExempt|Suspend}. Makes the hotstring {@link https://www.autohotkey.com/docs/v2/lib/_SuspendExempt.htm|exempt} from {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()}  
 *     Use `S1` to disable this setting, making Suspend() affect this hotstring  
 *   - `SI` `SE` `SP` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#SendMode|Send mode}. Choose between {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputDetail|SendInput}, {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent}, and {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay}  
 *   - `T` `R` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#T|Text} / {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#raw|Raw} mode. {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#auto|Auto-replace hotstrings} are not converted and all keystrokes are sent as typed  
 *     {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences} still work and must be escaped using ``` `` ```  
 *     [`{Text} mode`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is similar to [`{RAW} mode`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw), but no attempt is made to translate characters (other than `` `n ``, `` `r ``, `` `t ``, and `` `b ``)  
 *     `T0` and `R0` can be used to disable these modes.  
 *     Text may be more reliable than Raw  
 *   - `X` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#X|Execute}. Instead of replacement text, `Value` is treated as AHK code  
 *     This allows hotstrings to activate code just like a hotkey  
 *   - `Z` = {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#z|Zeroize}. When the hotstring fires, the hotstring recognizer is reset.  
 *     All previous keystrokes are cleared, preventing them from being considered as the start of other hotstrings.  
 * @param {(String|FuncObj)} [Value]  
 * Depends on the current `Option` being used.  
 * - `Hotstring` = The hotstring's replacement text or code to run (`X` option).  
 *   This param can be omitted when working with the `Enabled` param.  
 * - `"EndChars"` = The string of characters to use as hotstring ending chars.  
 *   If omitted, a string of the current `EndChars` are returned by the function.  
 * - `"MouseReset"` = Set `Value` to `1` to enable and `0` to disable.  
 *   If omitted, the current `MouseReset` setting is returned by the function.  
 * - `NewOptions` = The `Value` param isn't with this option.  
 * - `"Reset"` = The `Value` param isn't with this option.  
 * @param {(String|Integer)} [Enabled]  
 * Only used with the hotstring `Option`.  
 * Sets the enable state of a hotstring
 * - `1` = Enable hotstring
 * - `0` = Disable hotstring
 * - `-1` `Toggle` = Switch state between enabled and disabled.
 * @returns {(String|Integer)}  
 * If using `"EndChars"` without the `Value` param, a string of ending characters is returned.  
 * If using `"MouseReset"` without a `Value` param, a `1` is returned for on, otherwise `0`.  
 * An empty string is returned for everything else.  
 * @throws Error - A parameter is invalid or memory allocation failed.  
 * @throws TargetError - `Option` was a hotstring that hasn't previously been declared and `Value` was omitted.  
 * The only time a hotstring value is omitted is when `Enabled` is being altered.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()} |
  * {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|Thread()} |
  * {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} |
  * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstring::} |
  * {@link https://www.autohotkey.com/docs/v2/Variables.htm#ThisHotkey|A_ThisHotkey} |
  * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsPerHotkey.htm|#MaxThreadsPerHotkey} |
  * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
  * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf}
 * @example <caption>Option Examples</caption>  
 * ; * Wildcard
 * ; Typing 'ahk' produces 'AutoHotkey' without needing an EndChar
 * Hotstring(':*:ahk', 'AutoHotkey')
 * 
 * ; ? Verbatim
 * ; Typing 'AutoHotkey ' produces 'AutoHotstring '
 * Hotstring(':?:key', 'string')
 * 
 * ; B0 Backspacing (disable): 
 * ; Typing 'for ' doesn't erase the word 'for '
 * ; 'For' is included as part of the desired replacement
 * Hotstring(':B0:for', 'key, value in object')
 * 
 * ; C Case-sensitive hotstrings
 * ; Typing 'ABC ' activates hotstring but 'abc ' does not  
 * Hotstring(':C:ABC', 'ALL CAPS')
 * 
 * ; C1 Case mirroring (disable)
 * ; 'Case ' and 'CASE ' produce 'test '
 * ; Normally, 'Case ' and 'CASE ' would produce 'Test ' and 'TEST '
 * Hotstring(':C1:CASE', 'test')
 * 
 * ; K# Key delay
 * ; Puts a 1/2 second pause between each keystroke  
 * Hotstring(':SE k500:sek', 'event')
 * ; Each keystroke is held down for 1/2 a second
 * Hotstring(':SP k500:spk', 'play')
 * ; Puts a 1/2 second pause between each keystroke when in unavailable mode
 * Hotstring(':SI k500:sik', 'input')
 * 
 * ; O Omit
 * ; Typing '{esc.' produces '{Escape}', ignoring the end char
 * Hotstring(':O:`{esc', '{{}Escape{}}')
 * 
 * ; P Priority
 * ; Typing '/kill' immediately exits the script  
 * Hotstring(':XP100?*:/kill', (*) => ExitApp())
 * 
 * ; S Suspend exemption
 * ; Typing '/suspend' can turn suspension both on and off
 * ; Without S, it could not turn off suspend as the hotstring would be suspended
 * Hotstring(':SX*:/suspend', (*) => Suspend())
 * 
 * ; T Text Mode
 * ; Typing '{esc ' produces '{Escape} ' instead of sending the Escape keystroke
 * Hotstring(':T:{esc', '{Escape}')
 * 
 * ; X Execution 
 * ; Typing 'greet ' calls a boundfunc
 * Hotstring(':X:greet', (*) => MsgBox('Hello'))
 * 
 * ; Z Zeroize
 * ; Typing 'zzz' produces 'zz00z' instead of 'zz00z00'
 * ; The recognizer is reset preventing the last z from acting as the first z of another hotstring
 * Hotstring(':B0*?XZ:zz', (*) => Send('00'))
 */
Hotstring(Option [,Value, Enabled]) => String | Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|`IL_Create()`}  
 * Creates a new ImageList that is initially empty.  
 * @param {(Integer)} [InitialCount]  
 * The intial size of the list. Later, this can expand as needed.  
 * The default value is 2.  
 * @param {(Integer)} [GrowCount]  
 * The amount of additional slots to add when list expansion is needed.  
 * The default value is 5.  
 * @param {(Boolean)} [LargeIcons]  
 * Use large icons or small icons  
 * - `0` or Omitted = ImageList will contain small icons
 * - `1` = ImageList will contain large icons
 * @returns {(Integer)}  
 * On success, a unique ID for the ImageList, otherwise `0`  
 * @example <caption></caption>  
 */
IL_Create([InitialCount:=2, GrowCount:=5, LargeIcons:=0]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Add|`IL_Add()`}  
 * Adds an icon or picture to the specified ImageList.  
 * @param {(Integer)} ImageListID  
 * The identifying number of an image list generated by {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|IL_Create()}.
 * @param {(String)} IconOrPic  
 * Filename to an icon or picture file  
 * - `Icon` = .ICO .CUR .ANI .EXE .DLL .CPL .SCR {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|Icon Handle "HICON:"} or another icon resource
 * - `Pic` = .BMP .GIF .JPG .PNG .TIF .Exif .WMF .EMF or a {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|Bitmap Handle "HBITMAP:"}  
 * @param {(Integer)} Num  
 * Dependent on Icon or Pic
 * - `Icon` = Num is the icon number to use  
 *   If this is no sign, the number indicates the icon group to use  
 *   A negative sign indicates the number is used as a resource ID for an icon inside an executable  
 *   Num can be omitted when using an icon and will default to `1`  
 * - `Pic` = A transparency mask color in hex  
 *   The color white `0xFFFFFF` works well for most pictures  
 * @param {(Boolean)} Resize  
 * - `1` = Picture is scaled to become a single icon  
 * - `0` = Picture is divided into a number of icons that fit inside the given width  
 * @returns {(Integer)} - On success, the ImageList index position the icon was stored in is returned, otherwise `0`.
 * @example <caption></caption>  
 * IL_Add(ImageListID, 'C:\Path\to\application.exe', 2)
 * IL_Add(ImageListID, 'C:\Path\to\image.bmp', 0xFFFFFF, )
 */
IL_Add(ImageListID, IconOrPic, Num, Resize) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Destroy|`IL_Destroy()`}  
 * Deletes the specified ImageList.  
 * ListViews are automatically destroyed when the ListView parent window is destroyed. Rarely do they need to be manually destroyed.  
 * @param {(Integer)} ImageListID  
 * The identifying number of an image list generated by {@link https://www.autohotkey.com/docs/v2/lib/ListView.htm#IL_Create|IL_Create()}.
 * @returns {(Boolean)}  
 * `1` on success, otherwise `0`.  
 * @example <caption>  
 * il_id := IL_Create()
 * result := IL_Destroy(il_id)
 * if result
 *     MsgBox('Image list destroyed')
 * else MsgBox('Failed to destroy image list')
 * </caption>
 */
IL_Destroy(ImageListID) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ImageSearch.htm|`ImageSearch()`}  
 * Searches a region of the screen for an image.  
 * @param {(VarRef)} OutputVarX  
 * Receives the X coordinate of the upper left corner of the image match
 * If no match is found, var is set to an empty string.  
 * @param {(VarRef)} OutputVarY  
 * Receives the X coordinate of the upper left corner of the image match
 * If no match is found, var is set to an empty string.  
 * @param {(Integer)} X1  
 * X coordinate of the left edge of the area to search
 * @param {(Integer)} Y1  
 * Y coordinate of the top edge of the area to search
 * @param {(Integer)} X2  
 * X coordinate of the right edge of the area to search
 * @param {(Integer)} Y2  
 * Y coordinate of the bottom edge of the area to search
 * @param {(String)} ImageFile  
 * Options followed by an image file name or path to an image file.  
 * If a full path isn't used, ImageFile is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * Supported formats: .ANI .BMP .CUR .EMF .Exif .GIF .ICO .JPG .PNG .TIF .WMF .EXE .DLL .CPL .SCR and other icon resources  
 * **Options**  
 * A string of zero or options separated by spaces/tabs may be added before the file path  
 * - `*Icon#` = Set icon group number to use, where `#` is the specific number 
 * - `*#` = The allowed variance in color to still match the image, where `#` is between 0 and 255  
 *   Default is 0  
 * - `*Trans#` = Makes images easier to find by specifying a transparency color for a picture where `#` is a {@link https://www.autohotkey.com/docs/v2/misc/Colors.htm|Valid Color Name} or an RGB color with optional hex prefix.  
 *   These are all the same: `*TransWhite`, `*TransFFFFFF`, `*Trans0xFFFFFF`  
 *   Commonly used with .PNG .GIF and .TIF files that have some transparent area.  
 *   `*TransWhite` works well for .GIF files while `*TransBlack` works well for .PNG and .TIF files  
 * - `*W#` `*H#` = Width and Height to scale the image, where `#` is the new size in pixels.  
 *   If both are omitted, icons load to 16x16 and pictures load to their actual size.  
 *   To preserve aspect ratio, set a width or height and use `-1` for the other: `*W300 *H-1`  
 * @returns {(Integer)}  
 * `1` if the image was found, otherwise `0`
 * @throws ValueError - An invalid parameter was detected or the image could not be loaded
 * @throws OSError - An OS internal function call failed
 * @see {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|PixelSearch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|PixelGetColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()}
 * @example <caption></caption>  
 */
ImageSearch(&OutputVarX, &OutputVarY, X1, Y1, X2, Y2, ImageFile) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IniDelete.htm|`IniDelete()`}  
 * Deletes a value from a standard format .ini file.  
 * @param {(String)} FileLocation  
 * The file name or path to an .INI file.  
 * If a full path isn't used, FileLocation is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} Section  
 * The name of a section in the .INI file.  
 * @param {(String)} [Key]  
 * The name of the key-value pair to delete.  
 * If omitted, all keys in the section are deleted.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * Regardless of an error, {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|IniRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniWrite.htm|IniWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()}
 * @example <caption></caption>  
 * ; Standard INI file format:
 * 
 * ; INI comments start with semicolons
 * ; Just like AHK comments
 * [Section Names Go In Square Brackets]
 * Key_Name = Some saved data
 * Another_Key = 0
 */
IniDelete(FileLocation, Section [,Key]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|`IniRead()`}  
 * Reads a value, section or list of section names from a standard format .ini file.  
 * @param {(String)} FileLocation  
 * The file name or path to an .INI file.  
 * If a full path isn't used, FileLocation is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} [Section]  
 * The name of a section in the .INI file.  
 * If `Section` is omitted, a newline delimited list of all sections in the file is returned.  
 * @param {(String)} [Key]  
 * The name of a key to get the value of.  
 * If `Key` is omitted, a newline delimited list of all keys in that section is returned.  
 * @param {(String)} [Default]  
 * If the Key name doesn't exist in the specified Section, this value is returned.  
 * @returns {(String)}  
 * The value of the specified `Key` is returned.  
 * If `Key` not found, the value of `Default` is returned  
 * If no default value was provided, an error is thrown  
 * If `Key` is omitted, a list of all keys from the specified section is returned  
 * If `Section` is omitted, a list of all sections from the specified INI file is returned  
 * @throws OSError - Thrown if key doesn't exist and no default was provided  
 * Regardless of an error, {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/IniWrite.htm|IniWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniDelete.htm|IniDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files}
 * @example <caption></caption>  
 * ; Standard INI file format:
 * 
 * ; INI comments start with semicolons
 * ; Just like AHK comments
 * [Section Names Go In Square Brackets]
 * Key_Name = Some saved data
 * Another_Key = 0
 */
IniRead(FileLocation [,Section, Key, Default]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IniWrite.htm|`IniWrite()`}  
 * Writes a value or section to a standard format .ini file.  
 * Values longer than 65,535 characters can be written to the file, but cannot be read correctly by {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|IniRead()}.  
 * INI files are created as UTF-16 with BOM. To have the INI file encoded otherwise, create it before writing to it.  
 * @param {(String)} Value  
 * Either a single value to write to a key or an entire section of key=value pair(s).  
 * If writing a section of key=value pairs, `key = value` format should be used for each line and there can be no blank lines.  
 * @param {(String)} FileLocation  
 * The file name or path to an .INI file.  
 * If a full path isn't used, FileLocation is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} Section  
 * The name of a section in the .INI file to write to.  
 * @param {(String)} Key  
 * The name of the key to assign `Value` to.  
 * Key **must** be omitted when `Value` is a section of key=value pairs.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * Regardless of an error, {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|IniRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniDelete.htm|IniDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()}
 * @example <caption></caption>  
 * ; Writing a single value to a key
 * IniWrite('true', A_Desktop '\test.ini', 'Test Section', 'my_key')
 * 
 * ; Writing multiple key=value pairs
 * data := 'language = "AutoHotkey"'
 *     . '`nversion = "2.0.10"'
 *     . '`ndate = 2023-12-06'
 * IniWrite(data, A_Desktop '\test.ini', 'Code Info')
 * 
 * ; INI file format:
 * ;=================
 * ; INI comments start with semicolons just like AHK comments
 * [Section Name Inside Square Brackets]
 * Some_Key_Name = Data goes right of equal sign
 * number_1000 = 1000
 */
IniWrite(Value, FileLocation, Section, Key) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|`InputBox()`}  
 * Displays a popup box to get input from the user.  
 * @param {(String)} [Prompt]  
 * Text to display to the user above the edit input control.  
 * If omitted, the text area remains blank.  
 * @param {(String)} [Title]  
 * A title to give to the input box GUI.  
 * If omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptName|A_ScriptName} is used.  
 * @param {(String)} [Options]  
 * Zero or more of the following options, separated by spaces/tabs  
 * - `X#` `Y#` = Set the X and/or Y coordinates of the input box's upper-left corner, where `#` is a coordinate number.  
 *   If either is omitted, the input box will be centered on that axis.  
 * - `W#` `H#` = The width and height of the input box's client area, where `#` is the number of pixels.  
 * - `T#` = Set a timeout to occur, where `#` is the number of seconds to wait.  
 *   If timeout occurs, the return object sets `Result` to the word `Timeout` and `Value` to whatever the user had entered.  
 * - `Password#` = Masks the characters of the input box to prevent others from viewing what's being typed.  
 *   Setting `#` to a character will use that character as the symbol mask  
 *   Using `Password*` will show a `*` each time a character is typed.  
 *   If no character is provided after the word `Password`, a default circle is used.  
 * @param {(String)} [DefaultText]  
 * Specify any default text to show in the edit control of the input box.  
 * If omitted or an empty string, no text will show in the control box.  
 * @returns {($InputBoxObject)}  
 * An object is returned with 2 properties.  
 * `obj.Value` contains the user's submitted text  
 * `obj.Result` contains how the input box was closed: `OK`, `Cancel`, or `Timeout`  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook object}
 * @example <caption></caption>  
 */
InputBox([Prompt:='', Title:=A_ScriptName, Options:='', DefaultText:='']) => Object

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|`InstallKeybdHook()`}  
 * Installs or uninstalls the keyboard hook.  
 * The hook monitors keystrokes hotstring activaiton, hotkeys not supported by Window's {@link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerhotkey|RegisterHotkey()}, and supports {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook}.  
 * The keyboard hook is automatically installed when a script has a hotstring, a hooked hotkey, the {@link https://www.autohotkey.com/docs/v2/lib/SetNumScrollCapsLockState.htm|Set[Caps/Scroll/Num]LockState()} function, or has an active InputHook.  
 * @param {(Boolean)} [Install]  
 * - `1` = Hook is required to be installed.  
 * - `0` = Previously set requirements by this function are removed.  
 *   This may cause the hook to uninstall completely.  
 * @param {(Boolean)} [Force]  
 * - `1` = This depends on the `Install` param.  
 *   If `Install` is true, the hook is uninstalled and reinstalled.  
 *   If `Install` is false, the hook is completely uninstalled, even if needed by something else.  
 *   A hotkey or hotstring relying on the hook is disabled until the hook is reinstalled.  
 * - `0` = An internal variable is changed to indicate if the hook is required by the script.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|InstallMouseHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_UseHook.htm|#UseHook}
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkeys::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * @example <caption></caption>  
 */
InstallKeybdHook([Install:=1, Force:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|`InstallMouseHook()`}  
 * Installs or uninstalls the mouse hook.  
 * The hook monitors mouse clicks for the purpose of activating mouse {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|mouse hotkeys} and {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#NoMouse|facilitating hotstrings}.  
 * The mouse hook is automatically installed when a script has a hotstring or a mouse hotkey.  
 * @param {(Boolean)} [Install]  
 * - `1` = Hook is required to be installed.  
 * - `0` = Previously set requirements by this function are removed.  
 *   This may cause the hook to uninstall completely.  
 * @param {(Boolean)} [Force]  
 * - `1` = This depends on the `Install` param.  
 *   If `Install` is true, the hook is uninstalled and reinstalled.  
 *   If `Install` is false, the hook is completely uninstalled, even if needed by something else.  
 *   A hotkey or hotstring relying on the hook is disabled until the hook is reinstalled.  
 * - `0` = An internal variable is changed to indicate if the hook is required by the script.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotstring.htm|Hotstring()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_UseHook.htm|#UseHook}
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkeys::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * @example <caption></caption>  
 */
InstallMouseHook([Install:=1, Force:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|`InStr()`}  
 * Searches inside a string for an instance of the provided string.  
 * The search is done from left to right but can be changed with the `StartPos` and `Occurrence` parameters.  
 * @param {(String)} Haystack  
 * The string to search inside of.  
 * @param {(String)} Needle  
 * The string to search for.  
 * @param {(Integer|String)} [CaseSense]  
 * - `1` `On` = Search is case-sensitive. `A` does not match `a`.  
 * - `0` `Off` = Search is not case-sensitive. `A` matches `a`.  
 * - `Locale` = Case-sensitivity is based on the rules of the user's locale.  
 *   This can be anywhere from x1-x8 slower than `Off`.  
 * @param {(Integer)} [StartPos]  
 * The position in the string to start the search at.  
 * If omitted, `1` is used.  
 * - Positive Number  
 *   Starting position is counted left to right. 1 = first char, 2 = second, ...
 *   Search direction is set to left to right  
 * - Negative Number  
 *   Starting position is counted in reverse. -1 = last char, -2 = second from last, ...
 *   Search direction is set right to left
 * 
 * The `Occurrence` parameter can override these search direction settings.  
 * @param {(Integer)} [Occurrence]  
 * Get the position of the Nth occurrence.  
 * It's the number of times `Needle` must be found before a position is returned.  
 * If omitted, `1` is used.  
 * - Positive Number = Search is done left to right.  
 * - Negative Number = Search is done right to left.  
 * 
 * This setting overrides the search direction set by `StartPos`.
 * @returns {(Integer)}  
 * The position in the string the of the first found instance.  
 * If `Occurrence` is set, the position reflects the position of that 
 * @throws ValueError - `Needle` is an empty string (zero-length)
 * @throws ValueError - `CaseSense` is invalid
 * @throws ValueError - `Occurrence` or `StartPos` is not a number greater than 0
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm|RegExMatch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
 * @example <caption></caption>  
 */
InStr(Haystack, Needle [,CaseSense:=0, StartPos:=1, Occurrence:=1]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#IsAlnum|`IsAlnum()`}  
 * Checks if `Value` contains only alphanumeric characters.  
 * Alphanumeric character is defined as: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`  
 * @param {(String)} Value  
 * A string to check.  
 * @param {(String)} Locale  
 * By default, only ASCII characters are considered.  
 * Specifying the word `Locale` to use the user's locale rules.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only alphanumeric characters or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsAlnum(Value [,Locale:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#alpha|`IsAlpha()`}  
 * Checks if `Value` contains only alphabetic characters.  
 * Alphabetic character is defined as: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  
 * @param {(String)} Value  
 * A string to check.  
 * @param {(String)} Locale  
 * By default, only ASCII characters are considered.  
 * Specifying the word `Locale` to use the user's locale rules.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only alphabetic characters or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsAlpha(Value [,Locale:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#digit|`IsDigit()`}  
 * Checks if `Value` contains only digits.  
 * Digit is defined as: `0123456789`
 * @param {(String|Integer)} Value  
 * A string or integer.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only digits or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsDigit(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#float|`IsFloat()`}  
 * Check if `Value` is float type or a string representing a valid float.  
 * Spaces and tabs around the float are ignored. ` 2.1 `  
 * A string float can start with a plus `+` or minus `-` sign, or a decimal `.`. `.7`  
 * @param {(Any)} Value  
 * The input to check.  
 * @returns {(Boolean)}  
 * `1` if valid float, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Number.htm|Number} |
 * {@link https://www.autohotkey.com/docs/v2/lib/String.htm|String} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm#primitive|Primitive} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
 * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions}
 * @example <caption></caption>  
 */
IsFloat(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#integer|`IsInteger()`}  
 * Check if `Value` is integer type or a string representing a valid integer.  
 * Spaces and tabs around the integer are ignored. ` 5 `  
 * A string integer can start with a plus `+` or minus `-` sign. `-5`  
 * @param {(Any)} Value  
 * The input to check.  
 * @returns {(Boolean)}  
 * `1` if valid integer, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Number.htm|Number} |
 * {@link https://www.autohotkey.com/docs/v2/lib/String.htm|String} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm#primitive|Primitive} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
 * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions}
 * @example <caption></caption>  
 */
IsInteger(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IsLabel.htm|`IsLabel()`}  
 * Checks if `Value` is a valid {@link https://www.autohotkey.com/docs/v2/misc/Labels.htm|label} name within the current scope.  
 * @param {(String)} Value  
 * The label name to check.  
 * @returns {(Boolean)}  
 * `1` if label name is valid, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Labels.htm|Labels} |
 * @example <caption></caption>  
 */
IsLabel(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#lower|`IsLower()`}  
 * Checks if `Value` contains only lowercase characters.  
 * Lowercase character is defined as: `abcdefghijklmnopqrstuvwxyz`  
 * @param {(String)} Value  
 * A string to check.  
 * @param {(String)} Locale  
 * By default, only ASCII characters are considered.  
 * Specifying the word `Locale` to use the user's locale rules.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only lowercase characters or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsLower(Value [,Locale:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#number|`IsNumber()`}  
 * Check if `Value` is float or integer type or a string representing a valid float or integer.  
 * Spaces and tabs around the number are ignored. ` 7 `  
 * A string number can start with a plus `+` or minus `-` sign, or a decimal `.`. `-7.5`  
 * @param {(Any)} Value  
 * The input to check.  
 * @returns {(Boolean)}  
 * `1` if valid number, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Number.htm|Number} |
 * {@link https://www.autohotkey.com/docs/v2/lib/String.htm|String} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm#primitive|Primitive} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
 * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions}
 * @example <caption></caption>  
 */
IsNumber(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IsObject.htm|`IsObject()`}  
 * Checks if `Value` is any {@link https://www.autohotkey.com/docs/v2/Objects.htm|object} type other than a {@link https://www.autohotkey.com/docs/v2/Objects.htm#primitive|primitive}.  
 * @param {(Any)} Value  
 * The input to check.  
 * @returns {(Boolean)}  
 * `1` if valid object, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object()} |
 * {@link https://www.autohotkey.com/docs/v2/Objects.htm|Objects} |
 * @example <caption></caption>  
 */
IsObject(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IsSet.htm|`IsSet()`}  
 * Checks if `Var` has been assigned a value (initialized).  
 * @param {(Variable)} Var  
 * The variable to check.  
 * @returns {(Boolean)}  
 * `1` if variable has bene assigned a value, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsSet(Var) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/IsSet.htm|`IsSetRef()`}  
 * Checks if referenced variable has been assigned a value (initialized).  
 * @param {(VarRef)} Ref  
 * The variable reference to check.  
 * @returns {(Boolean)}  
 * `1` if referenced variable has bene assigned a value, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsSetRef(&Ref) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#IsAlnum|`IsSpace()`}  
 * Checks if `Value` contains only whitespace characters.  
 * Whitespace character is defined as: `` `t `` Tab, `` `s `` Space, `` `n `` Linefeed, `` `r `` Carriage Return, `` `v `` Vertical Tab, `` `f `` Formfeed
 * @param {(String)} Value  
 * A string to check.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only whitespace characters or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsSpace(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#IsAlnum|`IsTime()`}  
 * Checks if `Value` contains a valid {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS date-time stamp}.  
 * Any partial date-time stamp is if it follows each subsection. `20221220` is valid.  
 * Any year prior to 1601 will return false as the OS does not consider it valid.  
 * @param {(String)} Value  
 * A date-time stamp to check.  
 * @returns {(Boolean)}  
 * `1` if `Value` is a valid section or whole date-time stamp is an empty string, otherwise `0`  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsTime(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#upper|`IsUpper()`}  
 * Checks if `Value` contains only uppercase characters.  
 * Uppercase character is defined as: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`  
 * @param {(String)} Value  
 * A string to check.  
 * @param {(String)} Locale  
 * By default, only ASCII characters are considered.  
 * Specifying the word `Locale` to use the user's locale rules.  
 * @returns {(Boolean)}  
 * `1` if `Value` is only uppercase characters or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsUpper(Value [,Locale:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#xdigit|`IsXDigit()`}  
 * Checks if `Value` contains only hexadecimal digits.  
 * Hexadecimal digit is defined as: `0123456789abcdefABCDEF`  
 * A hex prefix of `0x` or `0X` is allowed.  
 * @param {(String|Integer)} Value  
 * A string or number.  
 * @returns {(Boolean)}  
 * `1` if `Value` is a valid hexadecimal number or is an empty string, otherwise `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|Type()} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|ByRef prameters}
 * @example <caption></caption>  
 */
IsXDigit(Value) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|`KeyHistory()`}  
 * Displays script info and a history of the most recent key/mouse/joypad events.  
 * Useful for detecing scan codes, virtual keys, and exact names for any keyboard key, mouse button, or controller joy.  
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|Mouse}/{@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|Keyboard} hooks must be installed to show in key history.  
 * @param {(Integer)} [MaxEvents]  
 * Specify the a maximum number of keyboard and mouse events to record.  
 * This number must be between `0-500` with 0 disabling key history.  
 * Omitting `MaxEvents` will open the script's main window and display KeyHistory view.  
 * Default value is 40.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|InstallMouseHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListHotkeys.htm|ListHotkeys()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|ListLines()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListVars.htm|ListVars()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|KeyWait()} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm#Controller|Controller} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#PriorKey|A_PriorKey}
 * @example <caption></caption>  
 */
KeyHistory([MaxEvents:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/KeyWait.htm|`KeyWait()`}  
 * Waits for a key or mouse/controller button to be released or pressed down.  
 * @param {(String)} KeyName  
 * The {@link https://www.autohotkey.com/docs/v2/KeyList.htm|name of a key} to wait for.  
 * Controller buttons can be used but none of the others controller inputs.  
 * A virtual code such as `vkFF` can be used for {@link https://www.autohotkey.com/docs/v2/KeyList.htm#SpecialKeys|special cases}.  
 * To wait for two or more keys to be released, use KeyWait() consecutively.  
 * @param {(String)} [Options]  
 * 
 * - `D` = Down. Wait for key to be in the down state.  
 * - `L` = Logical. Checks for the logical state of the key, not the physical state.  
 * - `T#` = Timeout. The function stops waiting and returns 0 after `#` seconds have passed.  
 *   A float can be used for a more precise wait time. `T0.5` = 500 ms.  
 *   Timeout must be a decimal value.  
 * @returns {(Boolean)}  
 * `0` if KeyWait timed out, otherwise `1`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|GetKeyState()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|InstallMouseHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ClipWait.htm|ClipWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|InputHook} |
 * {@link https://www.autohotkey.com/docs/v2/KeyList.htm|Key List}
 * @example <caption></caption>  
 */
KeyWait(KeyName [,Options]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListHotkeys.htm|`ListHotkeys()`}  
 * Displays all hotkeys in use by the current script.  
 * This function opens the script's main window and switches to the Hotkeys view.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|InstallKeybdHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|InstallMouseHook()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|ListLines()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListVars.htm|ListVars()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/A_MaxHotkeysPerInterval.htm|A_MaxHotkeysPerInterval} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_MaxThreadsPerHotkey.htm|#MaxThreadsPerHotkey} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_UseHook.htm|#UseHook}
 * @example <caption></caption>  
 */
ListHotkeys() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|`ListLines()`}  
 * Enables or disables line logging or displays the script lines most recently executed.  
 * The default starting value is 1.  
 * @param {(Boolean)} [Mode]
 * - Omit = Opens the script's main window and switches to the "Lines most recently executed" view.  
 * - `1` = Start capturing executed lines
 * - `0` = Stop capturing executed lines  
 * 
 * Affects only the behavior of the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread}.  
 * @returns {(Boolean)}  
 * Previous sentting is returned, either `0` or `1`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/KeyHistory.htm|KeyHistory()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListHotkeys.htm|ListHotkeys()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ListVars.htm|ListVars()}
 * @example <caption></caption>  
 */
ListLines([Mode]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListVars.htm|`ListVars()`}  
 * Displays the names and current contents of the script's {@link https://www.autohotkey.com/docs/v2/Variables.htm|variables}.  
 * This function opens the script's main window and switches to the "Variables and their contents" view.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see

 * @example <caption></caption>  
 */
ListVars() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ListViewGetContent.htm|`ListViewGetContent()`}  
 * Returns a list of items/rows from a ListView.  
 * @param {(String)} [Options]  
 * Specify what to retrieve.  
 * Include zero or more options separated by spaces/tabs.  
 * - Omit = All text in the ListView is retrieved.  
 * - `Selected` = Selected/highlighted row is retrieved.  
 *   If nothing is selected, an empty string is returned.  
 * - `Focused` = Focused row is retrieved.  
 *   If nothing is focused, an empty string is returned.  
 * - `Col#` = Retrieve the text from the specified column, where `#` is the column number.  
 * - `Count` = Retrieve total number of rows in the ListView.  
 * - `Count Selected` = Retrieve the number of selected/highlighted rows.  
 * - `Count Focused` = Retrieve the number of focused rows.  
 * - `Count Col` = Retrieve total number of columns in the ListView.  
 *   If count cannot be determined, `-1` is returned.  
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the main window is targeted.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String|Integer)}  
 * Text representing lists/columns from the ListView.  
 * Each column is separated by a tab `` `t `` and each row is separated by a new line `` `n ``.  
 * An integer is returned for `Col#`, `Count`, and `Count Col` options.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - A message could not be sent to the control or the ListView could not be opened  
 * @throws ValueError - Col# specified a nonexistent column  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetItems.htm|ControlGetItems()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetList.htm|WinGetList()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 * ; Include a double parse loop example
 * list := ListViewGetContent()
 * loop parse list, '`n', '`r' {
 *     row_num := A_Index
 *     loop parse row, '`t' {
 *        MsgBox('Row: ' row_num
 *            '`nCol:' A_Index
 *            '`nData:' A_LoopField)
 *     }
 * }
 * @returns {string} 
 */
ListViewGetContent([Options:='', Control:=unset, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String | Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoadPicture.htm|`LoadPicture()`}  
 * Loads a picture from file and returns a bitmap or icon handle.  
 * @param {(String)} Filename  
 * The filename or path of the picture.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @param {(String)} [Options]  
 * Zero or more of the following options, separated by spaces/tabs  
 * - `W#` `H#` = Load picture to specified size, where `#` is number of pixels.  
 *   To resize and maintain aspect ratio, set `W` or `H` to the desired number and set the other to `-1`.  
 *   Using a `0` will keep the height/width set to its original value
 * - `Icon#` = Icon number to load from the icon group, where `#` is the icon number.  
 *   Specifying `Icon1` will convert a supported image to an icon if the `OutImageType` param is used.  
 * - `GDI+` = Uses GDI+ to load the image, if available.  
 * @param {(VarRef)} [OutImageType]  
 * Reference to a variable that will receive the returned image type
 * - `0` = IMAGE_BITMAP
 * - `1` = IMAGE_ICON
 * - `2` = IMAGE_CURSOR
 * @returns {(Integer)}  
 * A {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|handle to a bitmap or icon}.  
 * @see {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|Image Handles}
 * @example <caption></caption>  
 */
LoadPicture(Filename [,Options, &OutImageType]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Log|`Log()`}  
 * Returns the logarithm (base 10) of the specified number.  
 * @param {(Number)} Num  
 * The number to get the log of.  
 * @returns {(Float)}  
 * The logarithm of Num.  
 * @throws ValueError - Num is a negative number
 * @example <caption></caption>  
 * Log(1.2) => 0.079181
 */
Log(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Ln|`Ln()`}  
 * Returns the natural logarithm (base e) of the specified number.  
 * @param {(Number)} Num  
 * The number to get the natural log of.  
 * @returns {(Float)}  
 * The natural logarithm of Num.  
 * @throws ValueError - Num is a negative number
 * @example <caption></caption>  
 */
Ln(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Trim.htm|`LTrim()`}  
 * Trims characters from the beginning of a string.  
 * @param {(String)} Str  
 * The string to trim.  
 * @param {(String)} [OmitChars]  
 * The characters to trim off.  
 * These characters are case-sensitive.  
 * If omitted, space and tab are used.  
 * @returns {(String)}  
 * The string after being trimmed.  
 * @example <caption></caption>  
 */
LTrim(Str [,OmitChars:=' `t']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Max|`Max()`}  
 * Returns the highest number from a set of numbers.  
 * @param {(Number|Array)} Value1  
 * The first number of the set.  
 * This can be an {@link https://www.autohotkey.com/docs/v2/lib/Array.htm|array} of numbers if declared {@link https://www.autohotkey.com/docs/v2/Functions.htm#Variadic|variadic*} and is the only parameter used.  
 * 
 *     arr := [2, 9, 7, 1]
 *     Max(arr*) => 9
 * @param {(Number)} [ValueN]  
 * Any amount of additional numbers.  
 * @returns {(Number)}  
 * The highest number of the set is returned. 
 * @example <caption></caption>  
 */
Max(Value1 [,ValueN*]) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MenuFromHandle.htm|`MenuFromHandle()`}  
 * Retrieves the Menu or MenuBar object corresponding to a Win32 menu handle.  
 * @param {(Integer)} Handle  
 * Handle to a Win32 menu (HMENU).  
 * @returns {(Menu|String)}  
 * A {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|menu object}.  
 * An empty string is returned if the handle does not point to an AHK menu.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Call|Menu()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Handle|Menu.Handle} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu/MenuBar object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Win32_Menus|Win32 Menus}
 * @example <caption></caption>  
 */
MenuFromHandle(Handle) => Menu

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MenuSelect.htm|`MenuSelect()`}  
 * Invokes a menu item from the menu bar of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {()} MenuName  
 * The name or prefix of the top-level menu item.  
 * It can also be the listed order of the menu: `1&` is the first menu, `2&` is the second, ...
 * @param {()} [SubMenu1]  
 * The name or position of the submenu item.  
 * In rare cases, this can be omitted if the top-level item does not contain a menu.  
 * @param {()} [SubMenuN]  
 * The name or position of subsequent submenus.  
 * Each submenu name should be put in a new parameter.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws TargetError - Does not have a standard Win32 menu
 * @throws ValueError - Menu, submenu, or menu item could not be found  
 * @throws ValueError - The final menu parameter points to a menu item which opens a submenu
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
MenuSelect(WinTitle, WinText, MenuName [,SubMenu1:=unset, SubMenuN:=unset, NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Min|`Min()`}  
 * Returns the lowest number from a set of numbers.  
 * @param {(Number|Array)} Value1  
 * The first number of the set.  
 * This can be an {@link https://www.autohotkey.com/docs/v2/lib/Array.htm|array} of numbers if declared {@link https://www.autohotkey.com/docs/v2/Functions.htm#Variadic|variadic*} and is the only parameter used.  
 * 
 *     arr := [2, 9, 7, 1]
 *     Min(arr*) => 1
 * @param {(Number)} [ValueN]  
 * Any amount of additional numbers.  
 * @returns {(Number)}  
 * The lowest number of the set is returned
 * @example <caption></caption>  
 */
Min(Value1 [,ValueN*]) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Mod|`Mod()` (modulo)}  
 * Returns the remainder of a number (dividend) divided by another number (divisor).  
 * @param {(Number)} Dividend  
 * Number to divide.  
 * @param {(Number)} Divisor  
 * Number to divide by.  
 * @returns {(Number)}  
 * Remainder after division occurs.  
 * Return value is integer if the divdend and divisor are both integers.  
 * Otherwise, return value is float.  
 * @throws ZeroDivisionError - Divisor was set to 0  
 * @example <caption></caption>  
 */
Mod(Dividend, Divisor) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MonitorGet.htm|`MonitorGet()`}  
 * Checks if the specified monitor exists and optionally retrieves its bounding coordinates.  
 * @param {(Integer)} Num  
 * Monitor number to get bounding coordinates of.  
 * The number of monitors can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetCount.htm|MonitorGetCount()}.  
 * If omitted, the primary monitor is used.  
 * @param {(VarRef)} Left  
 * A variable to receive the coordinate of the left edge of the monitor.  
 * @param {(VarRef)} Top  
 * A variable to receive the coordinate of the top edge of the monitor.  
 * @param {(VarRef)} Right  
 * A variable to receive the coordinate of the right edge of the monitor.  
 * @param {(VarRef)} Bottom  
 * A variable to receive the coordinate of the bottom edge of the monitor.  
 * @returns {(Integer)}  
 * The monitor number used to get the provided coordinates.  
 * This is equal to `Num` if `Num` is provided.  
 * @throws Error - On failure, an exception is thrown and var refs are not modified
 * @see {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetWorkArea.htm|MonitorGetWorkArea()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions}
 * @example <caption></caption>  
 */
MonitorGet([Num, &Left, &Top, &Right, &Bottom]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetCount.htm|`MonitorGetCount()`}  
 * Returns the total number of monitors.  
 * @returns {(Integer)}  
 * Total number of monitors.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions}
 * @example <caption></caption>  
 */
MonitorGetCount() => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetName.htm|`MonitorGetName()`}  
 * Returns the operating system's name of the specified monitor.  
 * @param {(Integer)} Num  
 * The monitor number to get the name of.  
 * The number of monitors can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetCount.htm|MonitorGetCount()}.  
 * If omitted, the primary monitor is used.  
 * @returns {(String)}  
 * The operating system's name for the specified monitor.  
 * @throws Error - Thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions}
 * @example <caption></caption>  
 */
MonitorGetName([Num]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetPrimary.htm|`MonitorGetPrimary()`}  
 * Returns the number of the primary monitor.  
 * @returns {(Integer)}  
 * The number of the primary monitor.  
 * This will always be `1` on a single monitor system.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions}
 * @example <caption></caption>  
 */
MonitorGetPrimary() => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetWorkArea.htm|`MonitorGetWorkArea()`}  
 * Checks if the specified monitor exists and optionally retrieves the bounding coordinates of its working area.  
 * The working area is area not reserved or otherwise claimed by taskbars, docked windows, and docked tool bars.  
 * @param {(Integer)} Num  
 * Monitor number to get the workarea bounding coordinates of.  
 * The number of monitors can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/MonitorGetCount.htm|MonitorGetCount()}.  
 * If omitted, the primary monitor is used.  
 * @param {(VarRef)} Left  
 * A variable to receive the coordinate of the left edge of the workarea.  
 * @param {(VarRef)} Top  
 * A variable to receive the coordinate of the top edge of the workarea.  
 * @param {(VarRef)} Right  
 * A variable to receive the coordinate of the right edge of the workarea.  
 * @param {(VarRef)} Bottom  
 * A variable to receive the coordinate of the bottom edge of the workarea.  
 * @returns {(Integer)}  
 * The monitor number used to get the provided coordinates.  
 * This is equal to `Num` if `Num` is provided.  
 * @throws Error - On failure, an exception is thrown and var refs are not modified
 * @see {@link https://www.autohotkey.com/docs/v2/lib/MonitorGet.htm|MonitorGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions}
 * @example <caption></caption>  
 */
MonitorGetWorkArea([Num, &Left, &Top, &Right, &Bottom]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|`MouseClick()`}  
 * Clicks or holds down a mouse button, or turns the mouse wheel. Note: The Click function is generally more flexible and easier to use.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * `Client` is suggested unless working with the desktop  
 * If `Relative` is used, x0 y0 is the mouse cursor.  
 * @param {(String)} [Button]  
 * Mouse button to click:  
 *   - `L`/`Left`, `R`/`Right`, `M`/`Middle`
 *   - `X1` (XButton1), `X2` (XButton2)  
 *   - `WU`/`WheelUp`, `WD`/`WheelDown`, `WR`/`WheelRight`, `WL`/`WheelLeft`  
 * @param {(Integer)} [X]  
 * The X coordinate to click at.  
 * If omitted, the current mouse X value is used
 * @param {(Integer)} [Y]  
 * The Y coordinate to click at  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * If omitted, the current mouse Y value is used
 * @param {(Integer)} [Count]  
 * The number of times to click  
 * If omitted, `1` is used  
 * @param {(Integer)} [Speed]  
 * How fast the mouse is moved to the destination click point.  
 * This number should be between `0` (fastest) and `100` (slowest).  
 * The speed setting only works when {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} is set to Event.  
 * @param {(String)} [State]  
 * Send the up state, down state, or full click.  
 * - Omit = A full click is sent  
 * - `D` = Down event. The button is logically held down.  
 * - `U` = Up event. The button is logically released.  
 * @param {(String)} [Relative]  
 * Include the letter `R` to click relative to the current mouse position.  
 * `X` and `Y` parameters are used as offsets from the current mouse position.  
 * In other words, the mouse cursor becomes x0 y0.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlClick.htm|ControlClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()}
 * @example <caption></caption>  
 */
MouseClick([Button:='L', X:=CurrentX, Y:=CurrentY, Count:=1, Speed:=2, State:=unset, Relative:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|`MouseClickDrag()`}  
 * Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * `Client` is suggested unless working with the desktop  
 * If `Relative` is used, x0 y0 is the mouse cursor.  
 * @param {(String)} [Button]  
 * Mouse button to click:  
 *   - `L`/`Left`, `R`/`Right`, `M`/`Middle`
 *   - `X1` (XButton1), `X2` (XButton2)  
 *   - `WU`/`WheelUp`, `WD`/`WheelDown`, `WR`/`WheelRight`, `WL`/`WheelLeft`  
 * @param {(Integer)} StartX  
 * The X coordinate of the click hold.  
 * @param {(Integer)} StartY  
 * The Y coordinate of the click hold.  
 * @param {(Integer)} EndX  
 * The X coordinate to release the click.  
 * @param {(Integer)} EndY  
 * The Y coordinate to release the click.  
 * @param {(Integer)} [Speed]  
 * How fast the mouse is dragged between the click points.  
 * This number should be between `0` (fastest) and `100` (slowest).  
 * The speed setting only works when {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} is set to Event.  
 * @param {(String)} [Relative]  
 * Include the letter `R` to click relative to the current mouse position.  
 * `StartX` and `StartY` are treated as offsets from the current mouse position.  
 * `EndX` and `EndY` are treated as offsets of `StartX` and `StartY`, respectively.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()}
 * @example <caption></caption>  
 */
MouseClickDrag(Button, StartX, StartY, EndX, EndY [,Speed:=2, Relative:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|`MouseGetPos()`}  
 * Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * `Client` is suggested unless working with the desktop  
 * On multi-monitor systems with different DPI settings, the returned position may be different than expected due to {@link https://www.autohotkey.com/docs/v2/misc/DPIScaling.htm|OS DPI scaling}.
 * @param {(VarRef)} [OutputX]  
 * A variable to receive the X coordinate of the mouse cursor
 * @param {(VarRef)} [OutputY]  
 * A variable to receive the Y coordinate of the mouse cursor
 * @param {(VarRef)} [OutputWin]  
 * A variable to receive the handle of the window under the mouse cursor 
 * @param {(VarRef)} [OutputControl]  
 * A variable to receive the handle of the control under the mouse cursor
 * @param {(Integer)} [ControlFlag] Determines how control is determined:  
 * - `0` = Uses the default method to determine control.  
 * - `1` = Use a simpler method to determine control.    
 *   Can correctly retrieve the active/topmost child window of Multiple Document Interface (MDI) applications like SysEdit or TextPad.  
 *   This is less accurate for other purposes, such as detecting controls inside a GroupBox.  
 * - `2` = `OutputControl` receives the {@link https://www.autohotkey.com/docs/v2/lib/ControlGetHwnd.htm|control's handle (HWND)} instead of the {@link https://www.autohotkey.com/docs/v2/lib/ControlGetClassNN.htm|ClassNN}.  
 * - `3` = Use both flags `1` and `2`.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions}
 * @example <caption></caption>  
 */
MouseGetPos([&OutputX, &OutputY, &OutputWin, &OutputControl, ControlFlag:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|`MouseMove()`}  
 * Moves the mouse cursor.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * `Client` is suggested for most use cases.  
 * @param {(Integer)} X  
 * The X coordinate to move to
 * @param {(Integer)} Y  
 * The Y coordinate to move to
 * @param {(Integer)} [Speed]  
 * How fast the mouse is dragged to the click point.  
 * This number should be between `0` (fastest) and `100` (slowest).  
 * The speed setting only works when {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} is set to Event.  
 * @param {(String)} [Relative]  
 * Include the letter `R` to click relative to the current mouse position.  
 * `X` and `Y` parameters are used as offsets from the current mouse position.  
 * In other words, the mouse cursor becomes x0 y0.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()}
 * @example <caption></caption>  
 */
MouseMove(X, Y [,Speed, Relative]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|`MsgBox()`}  
 * Displays the specified text in a small window containing one or more customizeable buttons.  
 * If all params are omitted, `Press OK to Continue` is used.
 * @param {(String)} [Text]  
 * Main text to dispaly on the message.  
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape Sequences} can be used to format the text. ``Line 1`nLine 2``  
 * @param {(String)} [Title]  
 * A title to give the window.  
 * If omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptName|A_ScriptName} is used.  
 * @param {(String)} [Options]  
 * Zero or more of the following options:  
 * - `Owner#` = Specify a window to make {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm#Owner|owner} of the message box, where `#` is the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} of the owner.  
 * - `T#` = Timeout. Max time the message box can remain open before closing, where `#` is the number of seconds.  
 *   A float can be used for a more precise wait time. `T2.5` = 2500 ms.  
 *   Timeout must be a decimal value.  
 *   Return value is set to `Timeout` if a message box closes from timing out.  
 * - Any of the following options:  
 *   Hex values must be added together. Otherwise, include the string value.  
 * 
 *     | -Option Groups-              | -Hex-       | -String Value-                           |
 *     | ---:                         | :--:        | :---                                     |
 *     | **Group #1: Button Names**   | ----------- | ---------------------                    |
 *     | OK                           | `0x0`       | `O`, `OK`                                |
 *     | OK, Cancel                   | `0x1`       | `OC`, `O/C`, `OKCancel`                  |
 *     | Abort, Retry, Ignore         | `0x2`       | `ARI`, `A/R/I`, `AbortRetryIgnore`       |
 *     | Yes, No, Cancel              | `0x3`       | `YNC`, `Y/N/C`, `YesNoCancel`            |
 *     | Yes, No                      | `0x4`       | `YN`, `Y/N`, `YesNo`                     |
 *     | Retry, Cancel                | `0x5`       | `RC`, `R/C`, `RetryCancel`               |
 *     | Cancel, Try Again, Continue  | `0x6`       | `CTC`, `C/T/C`, `CancelTryAgainContinue` |
 *     | **Group #2: Icon**           | ----------- | ---------------------                    |
 *     | Hand (Stop/Error)            | `0x10`      | `IconX`                                  |
 *     | Question (?)                 | `0x20`      | `Icon?`                                  |
 *     | Exclamation (!)              | `0x30`      | `Icon!`                                  |
 *     | Asterisk (Info)              | `0x40`      | `Iconi`                                  |
 *     | **Group #3: Default Button** | ----------- | ---------------------                    |
 *     | Focus button 2               | `0x100`     | `Default2`                               |
 *     | Focus button 3               | `0x200`     | `Default3`                               |
 *     | Focus button 4({@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm#Help|Help button} required) | `0x300` | `Default4` |
 *     | **Group #4: Modality**       | ----------- | ---------------------                    |
 *     | System Modal (Always on top) | `0x1000`    | N/A                                      |
 *     | Task Modal                   | `0x2000`    | N/A                                      |
 *     | System Modal (No title icon) | `0x40000`   | N/A                                      |
 *     | **Group #5: Other**          | ----------- | ---------------------                    |
 *     | Add {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm#Help|Help button} | `0x4000` | N/A |
 *     | Right-justified text         | `0x80000`   | N/A                                      |
 *     | Right-to-left text direction | `0x100000`  | N/A                                      |
 * 
 * @returns {(String)}  
 * The name of the button clicked is returned:  
 * `OK`, `Cancel`, `Yes`, `No`, `Abort`, `Retry`, `Ignore`, `TryAgain`, `Continue`, `Timeout`
 * 
 * Clicking `X`:
 * - `OK` button only => `OK`
 * - `Cancel` button present => `Cancel`
 * - `AbortRetryIgnore`, `YesNo` => `X` is disabled
 * @throws Error - `Options` are invalid
 * @throws Error - {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm#max|MsgBox limit} has been reached
 * @throws Error - Message box could not be displayed
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui object}
 * @example <caption></caption>  
 */
MsgBox([Text:='', Title:=A_ScriptName, Options:=0]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|`NumGet()`}  
 * Returns the binary number stored at the specified address and offset.  
 * @param {(Integer|Buffer)} Source  
 * A memory address or a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|buffer-like} object (any object with a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property).  
 * @param {(Integer|String)} Offset_Or_DataType  
 * The offset, in bytes, needed to be at the start of the number to get.  
 * If the data starts at the beginning of `Source` with no offset needed, this parameter becomes the `DataType` parameter.  
 * - `Offset` = The number of additional bytes needed to be at the start of the desired data.  
 *   The data's type must be defined in the subsequent `DataType` parameter.  
 * - `DataType` = The {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|data type} expected to be gotten from `Source`.  
 *   Using this parameter as `DataType` assumes the offset is `0`.  
 *   - Data types:  
 *     | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#Int|***Signed Integer***} | ***Bytes*** | ***Bits*** |
 *     | :--      | :--    | :--     |
 *     | `Int64`  | 8      | 64      |
 *     | `Int`    | 4      | 32      |
 *     | `Short`  | 2      | 16      |
 *     | `Char`   | 1      | 8       |
 *     | `Ptr`✝   | 8 \| 4  | 64 \| 32 |
 *     | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|***Unsigned Integer***} | ***Bytes*** | ***Bits*** |
 *     | `UInt64`✝✝ | NA     | NA      |
 *     | `UInt`     | 4      | 32      |
 *     | `UShort`   | 2      | 16      |
 *     | `UChar`    | 1      | 8       |
 *     | `UPtr`✝    | 8 \| 4  | 64 \| 32 |
 *     | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|***Floating Point***} | ***Bytes*** | ***Bits*** |
 *     | `Double`       | 8     | 32   |
 *     | `Float`        | 4     | 16   |
 * 
 *   - ✝ Pointer size is determined by the current AHK exe type.  
 *     AHK x64 / 64-bit = 64-bit sized pointers  
 *     AHK x86 / 32-bit = 32-bit sized pointers  
 *   - ✝✝ {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|Unsigned 64-bit integers are not supported} as AHK's native type is Int64.  
 *     To work with numbers greater than or equal to `0x8000000000000000`, use `Int64` and convert the signed value.  
 * @param {(String)} [DataType]  
 * If the `Offset_Or_DataType` was used as a data type, this parameter should be omitted.  
 * Otherwise, specify the data type expected.  
 * - Data types:  
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#Int|***Signed Integer***} | ***Bytes*** | ***Bits*** |
 *   | :--      | :--    | :--     |
 *   | `Char`   | 1      | 8       |
 *   | `Short`  | 2      | 16      |
 *   | `Int`    | 4      | 32      |
 *   | `Int64`  | 8      | 64      |
 *   | `Ptr`✝   | 8 \| 4  | 64 \| 32 |
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|***Unsigned Integer***} | ***Bytes*** | ***Bits*** |
 *   | `UChar`    | 1      | 8       |
 *   | `UShort`   | 2      | 16      |
 *   | `UInt`     | 4      | 32      |
 *   | `UPtr`✝    | 8 \| 4  | 64 \| 32 |
 *   | `UInt64`✝✝ | NA     | NA      |
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|***Floating Point***} | ***Bytes*** | ***Bits*** |
 *   | `Float`        | 4     | 16   |
 *   | `Double`       | 8     | 32   |
 * 
 * - ✝ Pointer size is determined by the current AHK exe type.  
 *   AHK x64 (64-bit) = 8 byte sized pointers  
 *   AHK x86 (32-bit) = 4 byte sized pointers  
 * - ✝✝ {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|Unsigned 64-bit integers are not supported} as AHK's native type is Int64.  
 *   To work with numbers greater than or equal to `0x8000000000000000`, use `Int64` and convert the signed value.  
 * @returns {(Number)}  
 * The number that was retrieved from the specified address and offset.  
 * @throws Error - The `Source` address was not valid  
 * Using a buffer object can help ensure memory addresses are always valid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|NumPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object}
 * @example <caption>Using NumPut() and NumGet() with a buffer object.</caption>  
 * ; Assigning a number to a buffer.
 * buff := Buffer(4)
 * NumPut('Int', 123, buff)
 * MsgBox('The number stored in buff is: ' NumGet(buff, 'Int'))
 * 
 * ; Assigning multiple numbers to a buffer.
 * rect := Buffer(16, 0)
 * NumPut('Int', 100, 'Int', 0, 'Int', 255, 'Int', 50, rect)
 * MsgBox('The 3rd integer stored in rect is: ' NumGet(rect, 8, 'Int'))
 * 
 * ; Assigning 4 points from an array to a RECT struct.
 * rect := Buffer(16, 0)
 * data := [0, 0, 255, 75]
 * address := rect.Ptr
 * for num in data
 *     address := NumPut('Int', num, address)
 * MsgBox('The 4th integer stored in rect is: ' NumGet(rect, 12, 'Int'))
 */
NumGet(Source, Offset_Or_DataType [,DataType:=unset]) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|`NumPut()`}  
 * Stores one or more numbers in binary format at the specified address and offset.  
 * Multiple numbers can be assigned as long as type and then number is provided.  
 * @param {(String)} DataTypeN  
 * The type of the number being written to `Target`.  
 * - Data types:  
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#Int|***Signed Integer***} | ***Bytes*** | ***Bits*** |
 *   | :--      | :--    | :--     |
 *   | `Char`   | 1      | 8       |
 *   | `Short`  | 2      | 16      |
 *   | `Int`    | 4      | 32      |
 *   | `Int64`  | 8      | 64      |
 *   | `Ptr`✝   | 8 \| 4  | 64 \| 32 |
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|***Unsigned Integer***} | ***Bytes*** | ***Bits*** |
 *   | `UChar`    | 1      | 8       |
 *   | `UShort`   | 2      | 16      |
 *   | `UInt`     | 4      | 32      |
 *   | `UPtr`✝    | 8 \| 4  | 64 \| 32 |
 *   | `UInt64`✝✝ | NA     | NA      |
 *   | {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#types|***Floating Point***} | ***Bytes*** | ***Bits*** |
 *   | `Float`        | 4     | 16   |
 *   | `Double`       | 8     | 32   |
 * 
 * - ✝ Pointer size is determined by the current AHK exe type.  
 *   AHK x64 (64-bit) = 8 byte sized pointers  
 *   AHK x86 (32-bit) = 4 byte sized pointers  
 * - ✝✝ {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#unsigned|Unsigned 64-bit integers are not supported} as AHK's native type is Int64.  
 *   To work with numbers greater than or equal to `0x8000000000000000`, use `Int64` and convert the signed value.  
 * 
 * More than one `DataType`-`Num` pair can be used to add multiple contiguous numbers at once.
 * 
 *     NumPut(NumType1, Num1, NumType2, Num2, NumType3, Num3, target [,offset])
 * @param {(Number)} NumN  
 * The number to write to the Target.  
 * More than one DataType/Num pair can be used in a call to add multiple contiguous numbers.
 * 
 *     NumPut(NumType1, Num1, NumType2, Num2, NumType3, Num3, target [,offset])
 * @param {(Integer|Buffer)} Target  
 * A memory address or a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|buffer-like} object (any object with a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property).  
 * @param {(Integer)} [Offset]  
 * The number of bytes to offset from `Target` memory's starting address.  
 * If omitted, 0 is used.  
 * @returns {(Integer)}  
 * The memory address immediately following the data that was just written is returned.  
 * This address can be used as the next target when calling NumPut() multiple times, such as when looping through values. See example code.  
 * If the data is contiguous and the code permits, it's better to use multiple DataType-Num pairs in one call.  
 * @throws Error - The `Target` address was not valid  
 * Using a buffer object can help ensure memory addresses are always valid.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object}
 * @example <caption>Using NumPut() and NumGet() with a buffer object.</caption>  
 * ; Assigning a number to a buffer.
 * buff := Buffer(4)
 * NumPut('Int', 123, buff)
 * MsgBox('The number stored in buff is: ' NumGet(buff, 'Int'))
 * 
 * ; Assigning multiple numbers to a buffer.
 * rect := Buffer(16, 0)
 * NumPut('Int', 100, 'Int', 0, 'Int', 255, 'Int', 50, rect)
 * MsgBox('The 3rd integer stored in rect is: ' NumGet(rect, 8, 'Int'))
 * 
 * ; Assigning 4 points from an array to a RECT struct.
 * rect := Buffer(16, 0)
 * data := [0, 0, 255, 75]
 * address := rect.Ptr
 * for num in data
 *     address := NumPut('Int', num, address)
 * MsgBox('The 4th integer stored in rect is: ' NumGet(rect, 12, 'Int'))
 */
NumPut(DataTypeN, NumN, Target [,Offset:=0], *) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ObjAddRef.htm|`ObjAddRef()`}  
 * Increments an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|reference count}.  
 * @param {(Integer)} Ptr  
 * An unmanaged object pointer of COM interface pointer.  
 * @returns {(Integer)}  
 * The new reference count.  
 * This value should only be used for debugging.  
 * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|Reference Counting}
 * @example <caption></caption>  
 */
ObjAddRef(Ptr) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ObjBindMethod.htm|`ObjBindMethod()`}  
 * Creates a {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc object} which calls a method of an object.  
 * @param {(Object)} Obj  
 * Any object.  
 * @param {(String)} [Method]  
 * The name of a method.  
 * If omitted, the object itself is called. Meaning: `Obj.Call()`  
 * @param {(Any)} [Params]  
 * Zero or more parameters to pass to the specified `Method`.  
 * Each param needs to be separated by a comma.  
 * 
 *     ObjBindMethod(this, 'SomeMethod', 'a', 'b', 'c')
 * @returns {(BoundFunc)}  
 * A {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc object} that can be used as a callback.  
 * @see {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm#BoundFunc|BoundFunc}
 * @example <caption></caption>  
 */
ObjBindMethod(Obj [,Method, Params*]) => BoundFunc

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#ObjFromPtr|`ObjFromPtr()`}  
 * Create an object reference from an object's memory address.  
 * @param {(Integer)} Address - The memory address of an object.
 * @returns {(Object)} A reference to the object at that address.
 * @example <caption></caption>  
 */
ObjFromPtr(Address) => Object

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#ObjFromPtr|`ObjFromPtrAddRef()`}  
 * Creates an object from a pointer and adds that object reference to the reference count.  
 * @param {()} Address - The memory address of an object.  
 * @returns {(Object)} A reference to the object at that address.  
 * @example <caption>These two lines are equal.</caption>  
 * ObjAddRef(address), myObject := ObjFromPtr(address)
 * myObject := ObjFromPtrAddRef(address)
 */
ObjFromPtrAddRef(Address) => Object

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#HasOwnProp|`ObjHasOwnProp()`}  
 * Checks if an object has a property of the specified name.  
 * This function is equivalent to the built-in {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object} method `Obj.HasOwnProp()`.  
 * It is recommended to use the object's method instead of this function.  
 * @param {(Object)} Obj  
 * The object to check.  
 * @param {(String)} Name  
 * The property name to check for.  
 * @returns {(Boolean)}  
 * `1` if object has the property, otherwise `0`.  
 * @example <caption></caption>  
 */
ObjHasOwnProp(Obj, Name) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|`ObjGetBase()`}  
 * Retrieves an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#delegation|base object}.  
 * @param {(Any)} Value  
 * Any value.  
 * @returns {(Prototype)}  
 * The base of the object.  
 * An empty string is returned if no base exists.  
 * Only the {@link https://www.autohotkey.com/docs/v2/lib/Any.htm|`Any`} prototype has no base.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#SetBase|ObjSetBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#Base|Base} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Obj.Base}
 * @example <caption></caption>  
 * obj := Array()
 * obj_b := ObjGetBase(obj)
 * if (obj_b = Array.Prototype)
 *     MsgBox('obj`'s base was derived from the Array class.')
 */
ObjGetBase(Value) => Prototype

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#GetCapacity|`ObjGetCapacity()`}  
 * Returns the current capacity of the object's internal array of properties.  
 * @param {(Object)} Obj  
 * The object to check.  
 * @returns {(Integer)}  
 * The max capacity of the object.  
 * @throws TypeError - Exception is thrown if `Obj` is incorrect type.  
 * @example <caption></caption>  
 * obj1 := {}
 * obj2 := {a:1, b:2, c:3, d:4, e:5}
 * MsgBox(ObjGetCapacity(obj1) ' ' ObjGetCapacity(obj2))
 */
ObjGetCapacity(Obj) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#OwnPropCount|`ObjOwnPropCount()`}  
 * Returns the number of properties owned by an object.  
 * @param {(Object)} Obj  
 * The object to check.  
 * @returns {(Integer)}  
 * The number of properties owned by an object.
 * @example <caption></caption>  
 * obj := {a:1, b:2, c:3, d:4, e:5}
 * MsgBox(ObjGetCapacity(obj) '`n' ObjOwnPropCount(obj))
 * obj.DeleteProp('c')
 * MsgBox(ObjGetCapacity(obj) '`n' ObjOwnPropCount(obj))
 */
ObjOwnPropCount(Obj) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#OwnProps|`ObjOwnProps()`}  
 * Returns an enumerator for an object's own properties.  
 * This function is equivalent to the built-in {@link https://www.autohotkey.com/docs/v2/lib/Object.htm|Object} method `Obj.OwnProp()`.  
 * This is normally used with a {@link https://www.autohotkey.com/docs/v2/lib/For.htm|for-loop} to iterate through the the object's properties.  
 * It is usually recommended to use the corresponding method instead.  
 * @param {(Object)} Obj  
 * The object to enumerate.  
 * @returns {(Enumerator)}  
 * An {@link https://www.autohotkey.com/docs/v2/lib/Enumerator.htm|Enumerator} for the object's properties.  
 * @example <caption></caption>  
 */
ObjOwnProps(obj) => Enumerator

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#ObjPtr|`ObjPtr()`}  
 * Rretrieve the memory address of an object.  
 * @param {(Object)} Obj - An object to get the memory address of.  
 * @returns {(Integer)} The pointer address of the object.  
 * @example <caption></caption>  
 */
ObjPtr(Obj) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Objects.htm#ObjPtr|`ObjPtrAddRef()`}  
 * Increments an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|reference count}.  
 * @param {(Object)} Obj  
 * An unmanaged object pointer of COM interface pointer.  
 * @returns {(Integer)}  
 * The memory address of the object.  
 * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|Reference Counting}
 * @example <caption></caption>  
 */
ObjPtrAddRef(Obj) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ObjAddRef.htm|`ObjRelease()`}  
 * Decrements an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|reference count}.  
 * @param {(Integer)} Ptr  
 * An unmanaged object pointer of COM interface pointer.  
 * @returns {(Integer)}  
 * The new reference count.  
 * This value should only be used for debugging.  
 * @see {@link https://www.autohotkey.com/docs/v2/Objects.htm#Reference_Counting|Reference Counting}
 * @example <caption></caption>  
 */
ObjRelease(ptr) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#SetBase|`ObjSetBase()`}  
 * Sets an object's {@link https://www.autohotkey.com/docs/v2/Objects.htm#delegation|base object}.  
 * @param {(Object)} Obj  
 * The object to assign the new base to.  
 * @param {(Prototype)} BaseObj  
 * The prototype of another object.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TypeError - `Obj` or `BaseObj` is of an incorrect type.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Any.htm#GetBase|ObjGetBase()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#Base|Base property}
 * @example <caption></caption>  
 */
ObjSetBase(Obj, BaseObj) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Object.htm#SetCapacity|`ObjSetCapacity()`}  
 * Sets the current capacity of the object's internal array of own properties.  
 * @param {(Object)} Obj  
 * The object to set the capacity of.  
 * @param {(Integer)} MaxProps  
 * The new capacity.  
 * If `MaxProps` is less than the total amount of properties, capacity is set to the total properties.  
 * @returns {(Integer)}  
 * The new capacity amount.  
 * @throws TypeError - `Obj` is of an incorrect type.  
 * @example <caption></caption>  
 */
ObjSetCapacity(Obj, MaxProps) => ReturnValue

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|`OnClipboardChange()`}  
 * Registers a {@link https://www.autohotkey.com/docs/v2/Functions.htm|function} to be called automatically whenever the clipboard's content changes.  
 * @param {(FuncObj)} Callback  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call on clipboard change.  
 * The callback must be able to accept one parameter for data type.  
 * Possible DataType values:  
 * - `0` = Clipboard is empty.
 * - `1` = Clipboard contains text.
 * - `2` = Clipboard Contains binary data (such as a picture).
 * 
 *       clipboard_func(DataType) ; Expected callback format
 * @param {(Integer)} [AddRemove]  
 * - `1` = Callback after any previously registered callbacks.  
 * - `-1` = Callback before any previously registered callbacks.  
 * - `0` = Do not call the callback.  
 * 
 * If a callback returns a non-zero integer, all subsequent callbacks are skipped.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard}
 * @example <caption></caption>  
 */
OnClipboardChange(Callback [,AddRemove:=1]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|`OnError()`}  
 * Registers a {@link https://www.autohotkey.com/docs/v2/Functions.htm|function} to be called automatically whenever an unhandled error occurs.  
 * @param {(FuncObj)} Callback  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call on error.  
 * The callback must be able to accept two parameters.  
 * - `ThrownValue` = The value that was thrown, usually an {@link https://www.autohotkey.com/docs/v2/lib/Error.htm|Error object}.  
 * - `ErrorMode`  
 *   - {@link https://www.autohotkey.com/docs/v2/lib/Return.htm|`Return`}  
 *     The thrown value is a continuable runtime error.  
 *     The thread continues if the callback returns -1; otherwise the thread exits.
 *   - {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|`Exit`}  
 *     The thrown value is a non-continuable runtime error or a value {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|thrown} by the script.  
 *     The thread will exit.
 *   - {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|`ExitApp`}  
 *     The thrown value is a critical runtime error, such as corruption detected by DllCall.  
 *     The program will exit.  
 * 
 *         clipboard_func(ThrownValue, ErrorMode) ; Callback format
 * 
 * The callback can return one of the following values:  
 * - `0` Omit ` ` (Space) = Allow error handling to proceed as normal.  
 * - `1` = Suppress the default error dialog and any remaining error callbacks.  
 * - `-1` = If `ErrorMode` was `Return`, execution of the current thread continues.  
 * @param {(Integer)} [AddRemove]  
 * - `1` = Callback after any previously registered callbacks.  
 * - `-1` = Callback before any previously registered callbacks.  
 * - `0` = Do not call the callback.  
 * 
 * If a callback returns a non-zero integer, all subsequent callbacks are skipped.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Throw.htm|Throw}
 * @example <caption></caption>  
 */
OnError(Callback [,AddRemove:=1]) => ReturnValue

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|`OnExit()`}  
 * Registers a function to be called automatically whenever the script exits.  
 * @param {(FuncObj)} Callback  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call on script exit.  
 * The callback must be able to accept two parameters.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm#ExitReason|`ExitReason`} = The reason for exiting:
 *   - `Logoff` = The user is logging off.  
 *   - `Shutdown` = The system is being shut down or restarted.  
 *   - `Close` = The script was sent a WM_CLOSE or WM_QUIT message, had a critical error, or is being closed in some other way.  
 *   - `Error` = A runtime error occurred in a script that is not persistent.  
 *   - `Menu` = The user selected Exit from the main window's menu or from the standard tray menu.  
 *   - `Exit` = Exit or ExitApp was used (includes custom menu items).  
 *   - `Reload` = The script is being reloaded via the Reload function or menu item.  
 *   - `Single` = The script is being replaced by a new instance of itself as a result of #SingleInstance.  
 * - `ExitCode` = The code that was passed to {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|Exit()} or {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()}  
 * 
 *         OnExit(ExitReason, ExitCode) ; Callback format
 * 
 * The callback can return a non-zero integer to prevent the script from exiting and calling more callbacks.  
 * Otherwise, the script exits after all registered callbacks are called.  
 * @param {(Integer)} [AddRemove]  
 * - `1` = Callback after any previously registered callbacks.  
 * - `-1` = Callback before any previously registered callbacks.  
 * - `0` = Do not call the callback.  
 * 
 * If a callback returns a non-zero integer, all subsequent callbacks are skipped.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/OnError.htm|OnError()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|OnClipboardChange()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Shutdown.htm|Shutdown()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Persistent.htm|Persistent()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Return.htm|Return}
 * @example <caption></caption>  
 */
OnExit(Callback [,AddRemove:=1]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|`OnMessage()`}  
 * Registers a {@link https://www.autohotkey.com/docs/v2/Functions.htm|function} to be called automatically whenever the script receives the specified message.  
 * @param {(Integer)} MsgNumber  
 * The message number to monitor or query.  
 * This should be between 0-4294967295 (0x0-0xFFFFFFFF). 
 * If not monitoring a system message (messages below 1024/0x0400), use a number greater than 4096/0x1000 to avoid any conflicts with internal messages used by AHK.  
 * @param {(FuncObj)} Callback  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call when a message is received.  
 * The callback must be able to accept four parameters.  
 * - `WPARAM` = Word Param. This is used to send additional data about the message to the callback.  
 *   The W stands for Word, because it used to be 16-bits. Both PARAMs are now 32 or 64 bits, depending on architechture.  
 * - `LPARAM` = Long Param. This is used to send additional data about the message to the callback.  
 *   The L stands for Word, because it used to be 32-bits. Both PARAMs are now 32 or 64 bits, depending on architechture.  
 * - `Msg` = The message number.  
 *   List of common {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|WM_ Windows Messages}.  
 * - `Hwnd` = A handle to the window
 * 
 *         wm_callback(Wparam, Lparam, Msg, Hwnd) ; Callback format
 * @param {(Integer)} [MaxThreads]  
 * The maximum {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|threads} the Message can call.  
 * The default is `1` which is desireable. This prevenst messages from processing out of chronological order.  
 * Specify `0` to unregister a previously registered callback.  
 * An alternative to changing MaxThreads is to {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm#Critical|use critical}.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|OnClipboardChange()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|PostMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|Thread()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/Functions.htm|Functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|Message List} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessage.htm|Message Tutorial} |
 * @example <caption>Move a GUI with click and drag.</caption>  
 * goo := Gui()
 * goo.AddText(, 'Click and drag gui.')
 * goo.Show('w300 h300')
 * OnMessage(0x200, move_gui)
 * 
 * move_gui(Wparam, Lparam, Msg, Hwnd) {
 *     WM_NCLBUTTONDOWN := 0xA1
 *     if (Wparam = 1)
 *         SendMessage(WM_NCLBUTTONDOWN,2,,,'A')
 * }
 */
OnMessage(MsgNumber, Callback [,MaxThreads:=1]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Ord.htm|`Ord()`}  
 * Returns the ordinal value (numeric character code) of the first character in the specified string.  
 * @param {(String)} Str  
 * The string to retrieve the ordinal value for.  
 * @returns {(Integer)}  
 * If ANSI, an integer between 0 and 255 is returned.  
 * If Unicode, an integer between 0x0 to 0xFFFF is returned.  
 * If `Str` begins with a {@link https://learn.microsoft.com/en-us/windows/win32/intl/surrogates-and-supplementary-characters|Unicode supplementary character}, the corresponding Unicode char is sent (between 0x10000 and 0x10FFFF)  
 * If the string is empty, `0` is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Chr.htm|Chr()} |
 * {@link https://raw.githubusercontent.com/GroggyOtter/GroggyRepo/master/AHK/Groggy's%20ASCII%20Tables.txt|ASCII Table}
 * @example <caption></caption>  
 * Ord("t") => 116
 * Ord("test") => 116
 */
Ord(Str) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/OutputDebug.htm|`OutputDebug()`}  
 * Sends a string to the debugger (if any) for display.  
 * @param {(String)} Text  
 * The text to send to the debugger.  
 * This can include newlines `` `n ``.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/Scripts.htm#debug|Other Debugging Methods} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileAppend.htm|FileAppend()} |
 * {@link https://www.autohotkey.com/docs/v2/Scripts.htm#continuation|Continuation sections}
 * @example <caption></caption>  
 */
OutputDebug(Text) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Pause.htm|`Pause()`}  
 * Pauses the script's current thread.  
 * This is different from {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()}, which prevents the script's hotkeys and hotstring from firing.  
 * @param {(Integer)} NewState  
 * - Omit = The {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread} is paused.  
 * - `1` = Mark the thread beneath the current one as paused.  
 *   When the current thread finishes, the prior thread will finish its function call then go into a paused state.  
 * - `0` = Unpauses and underlying thread.  
 * - `-1` = Toggles the pauses state of the underlying thread.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|`Suspend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|`ExitApp()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|`SetTimer()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|`Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|`Menu object}
 * @example <caption></caption>  
 */
Pause([NewState:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Persistent.htm|`Persistent()`}  
 * Prevents the script from exiting automatically when the last thread completes, allowing a script to stay running in an idle state.  
 * This setting is automatically set to `1` if the script has any {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|hotkeys}, {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|hotstrings}, visible {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUIs}, active {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|timers}, {@link https://www.autohotkey.com/docs/v2/lib/OnClipboardChange.htm|clipboard monitoring}, or {@link https://www.autohotkey.com/docs/v2/lib/InputHook.htm|Inputhooks}.
 * @param {(Boolean)} Enable  
 * Turns on script persistence.  
 * If omitted, `1` is used.  
 * - `1` = Persistence is enabled and keeps the script running even if there's not an active thread.  
 * - `0` = Persistence is disabled and the script will close when the last active thread ends.  
 * @returns {(Boolean)}  
 * The previous setting is returned. This is either a `0` or a `1`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|Exit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()}
 * @example <caption></caption>  
 */
Persistent([Enable:=1]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|`PixelGetColor()`}  
 * Retrieves the color of the pixel at the specified X and Y coordinates.  
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} dictates where x0 y0 starts at  
 * `Client` is suggested for most use cases.  
 * @param {(Integer)} X  
 * The X coordinate of the pixel
 * @param {(Integer)} Y  
 * The Y coordinate of the pixel
 * @param {(String)} [Mode]  
 * Set the color retrieval method:  
 * - Omit = Normal method is used to retrieve pixel color.
 * - `Alt` = The alt method should be used if the normal method produces inaccurate colors.  
 *   This method runs about 10% slower.  
 * - `Slow` = Use a more elaborate method to get pixel color.  
 *   This method is about 200% slower than the normal method.  
 * @returns {(String)}  
 * A string in 6-digit RGB hex format: `0xFFAA55`
 * FF = Red, AA = Green, 55 = Blue
 * @throws OSError - Thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|PixelSearch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ImageSearch.htm|ImageSearch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()}
 * @example <caption>Actively show color of pixel under mouse.</caption>  
 * SetTimer(active_color_checker, 50)
 * 
 * active_color_checker() {
 *     if (A_CoordModePixel != 'Screen')
 *         A_CoordModePixel := 'Screen'
 *     MouseGetPos(&x, &y)
 *     color := PixelGetColor(x, y)
 *     Tooltip('Red: 0x' SubStr(color, 3, 2)
 *         '`nGreen: 0x' SubStr(color, 5, 2)
 *         '`nBlue: 0x' SubStr(color, 7, 2))
 * }
 */
PixelGetColor(X, Y [,Mode]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|`PixelSearch()`}  
 * Searches a region of the screen for a pixel of the specified color.  
 * @param {(VarRef)} OutputX  
 * A variable to receive the X coordinate of the found pixel.  
 * If a match is not made, this var receives an empty string.  
 * @param {(VarRef)} OutputY  
 * A variable to receive the Y coordinate of the found pixel.  
 * If a match is not made, this var receives an empty string.  
 * @param {(Integer)} X1  
 * The left edge of the search area.  
 * @param {(Integer)} Y1  
 * The top edge of the search area.  
 * @param {(Integer)} X2  
 * The right edge of the search area.  
 * @param {(Integer)} Y2  
 * The bottom edge of the search area.  
 * @param {(Integer)} ColorID  
 * The color ID to search for.  
 * This can be a hexadecimal or decimal number in RGB format.  
 * `0xFFFF00` is the same as `16776960`.  
 * Color ID can be gotten with Window Spy or by using {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|PixelGetColor()}  
 * @param {(Integer)} [Variation]  
 * Sets the amount of color variation allowed to match a color.  
 * This should be a number between `0`-`255` (`0x0`-`0xFF`).  
 * If looking for `0x20C0B0` with a `0x10` variation, the colors `0x10B0A0` to `0x30D0C0` will cause a positive match.  
 * @returns {(Boolean)}  
 * `1` if the color was found, otherwise `0`
 * @throws OSError - The function was unable to conduct the search.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|PixelGetColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ImageSearch.htm|ImageSearch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos.htm|MouseGetPos()}
 * @example <caption></caption>  
 */
PixelSearch(&OutputX, &OutputY, X1, Y1, X2, Y2, ColorID [,Variation:=0]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/PostMessage.htm|`PostMessage()`}  
 * Places a message in the message queue of a window or control.  
 * Unlike {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()}, PostMessage() does not wait for acknowledgement.  
 * @param {(Integer)} MsgNumber  
 * The {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|message number} to send.  
 * @param {(Integer)} [wParam]  
 * Word Param. Used to pass message-specific information and must be an integer.  
 * If omitted, defaults to `0`.  
 * @param {(Integer)} [lParam]  
 * Long Param. Also used to pass message-specific information and must be an integer.  
 * If omitted, defaults to `0`.  
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the target window is used instead of a control.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws OSError - Message could not be posted  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MenuSelect.htm|MenuSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|Message List} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessage.htm|Message Tutorial} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Winamp.htm|Automating Winamp} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
PostMessage(MsgNumber [,wParam:=0, lParam:=0, Control:=TargetWindow, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessClose.htm|`ProcessClose()`}  
 * Forces the first matching process to close.  
 * @param {(String|Integer)} NameOrPID  
 * The process name or process ID to close.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(Integer)}  
 * The Process ID of the specified process.  
 * `0` if a matching process was not found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinClose.htm|WinClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinKill.htm|WinKill()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions}
 * @example <caption></caption>  
 */
ProcessClose(NameOrPID) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|`ProcessExist()`}  
 * Checks if the specified process exists.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to check existence of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(Integer)}  
 * The Process ID of the specified process.  
 * `0` if a matching process was not found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
ProcessExist([NameOrPID:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessGetName.htm|`ProcessGetName()`}  
 * Returns the name of the specified process.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to get the name of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(String)}  
 * The name of the specified process. `notepad.exe`
 * @throws TargetError - The process could not be found  
 * @throws OSError - The name could not be retrieved  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
ProcessGetName([NameOrPID:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessGetParent.htm|`ProcessGetParent()`}  
 * Returns the process ID (PID) of the process which created the specified process.  
 * A parent process is a process that launches another process.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to get the parent of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(Integer)}  
 * The parent process ID that created the specified process.  
 * @throws TargetError - The process could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
ProcessGetParent([NameOrPID]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessGetName.htm|`ProcessGetPath()`}  
 * Returns the path of the specified process.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to get the full path of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(String)}  
 * The full process path of the specified process. `C:\Windows\notepad.exe`
 * @throws TargetError - The process could not be found  
 * @throws OSError - The path could not be retrieved  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
ProcessGetPath([NameOrPID]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessSetPriority.htm|`ProcessSetPriority()`}  
 * Changes the priority level of the first matching process.  
 * @param {(String)} Level  
 * Specify a priority level name or its first letter:  
 * - `L` `Low`
 * - `B` `BelowNormal`
 * - `N` `Normal`
 * - `A` `AboveNormal`
 * - `H` `High`
 * - `R` `Realtime`
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to set the priority of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @returns {(Integer)}  
 * The Process ID of the specified process.  
 * `0` if the process cannot be found or altered.  
 * @throws TargetError - The process could not be found  
 * @throws OSError - The path could not be retrieved  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions}
 * @example <caption></caption>  
 */
ProcessSetPriority(Level [,PIDOrName]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessWait.htm|`ProcessWait()`}  
 * Waits for the specified process to exist.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process name or process ID to set the priority of.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @param {(Number)} Timeout  
 * The number of seconds to wait for the process to exist.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|Process ID} when the process is detected.  
 * `0` if the function times out.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ProcessWaitClose.htm|ProcessWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions}
 * @example <caption></caption>  
 */
ProcessWait(PIDOrName [,Timeout]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ProcessWaitClose.htm|`ProcessWaitClose()`}  
 * Waits for all matching processes to close.  
 * @param {(String|Integer)} [NameOrPID]  
 * The process names or process ID to wait for closure.  
 * If omitted, the script's own process ID is used.  
 * - `Name` = The name of the process without a path: `Notepad.exe`   
 *   If there are multiple processes with that name, the first match is used.  
 *   Names are not case-sensitive.  
 * - `PID` =  The Process ID number of a process. This is not a static value and changes each time the process is launched.  
 *   A PID can be gotten with {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}, {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}, and with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} using the `&OutputPID` parameter.  
 *   This is different from a Window ID (HWND) that uniquely identifies a Window or control.  
 * @param {(Number)} Timeout  
 * The number of seconds to wait for all specified processes to be closed.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @returns {(Integer)}  
 * `0` if all matching processes are closed.  
 * If a timed out, the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|Process ID} of the first detected remaining process is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ProcessWait.htm|ProcessWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions}
 * @example <caption></caption>  
 */
ProcessWaitClose(PIDOrName [,Timeout]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Random.htm|`Random()`}  
 * Generates a pseudo-random number.  
 * @param {(Number)} [Num1]  
 * Any number. Can be the high or low number.  
 * If omitted, defaults to `0.0`
 * @param {(Number)} [Num2]  
 * Any number. Can be the high or low number.  
 * If omitted and `Num1` omitted, this defaults to `1.0`.  
 * If omitted and `Num1` is a number, this defaults to `0.0`.  
 * @returns {(Number)}  
 * A random number that falls between the two given number.  
 * If `Num1` and `Num2` are integers, an integer is returned.  
 * Otherwise, a float is returned.  
 * @example <caption></caption>  
 */
Random([Num1, Num2]) => Number

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm|`RegExMatch()`}  
 * Determines whether a string contains a pattern (regular expression).  
 * @param {(String)} Haystack  
 * The string to search through. This can contain binary zero.  
 * @param {(String)} RegExNeedle  
 * A RegEx pattern with options.  
 * To use {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Options|Options}, include them before the pattern: `options)pattern`  
 * @param {(VarRef)} [MatchObj]  
 * A variable reference to receive a {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm#MatchObject|RegExMatchInfo object}.  
 * This object contains the position, length, and values of the full match and all subpattern matches.  
 * @param {(Integer)} [StartPos]  
 * The character position number in the string to start the RegEx matching.  
 * A negative number is considered an offset from the end of string. -1 = last char, -2 = second from last, ...
 * `0` starts the RegEx at the very end of the string.  
 * @returns {(Integer)}  
 * The position in the string where the first match was found.  
 * `0` if pattern could not be found.  
 * @throws Error - Pattern contains a syntax error  
 * Error format: *Compile error [PCRE ERROR NUMBER] at offset [ERROR POSITION]: description*
 * @throws Error - An error occurred during RegEx execution  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegExReplace.htm|RegExReplace()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm#RegEx|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm|Regular Expression Callouts} |
 * {@link https://www.autohotkey.com/forum/topic16164.html|Global matching/Grep (forum link)} |
 * {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm|AHK RegEx Quick Reference} |
 * {@link https://regex101.com/|RegEx101.com Tester and Reference Guide} |
 * {@link https://www.rexegg.com/regex-quickstart.html/|RegEx Cheet Sheet} |
 * {@link https://www.regular-expressions.info/refflavors.html|In-depth RegEx Info}
 * - ### RegEx Options:  
 * Include before the RegEx: `options)RgxPattern`  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_i|`i`} = Case-insensitive matching. a-z = A-Z
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Multiline|`m`} = Multiline. Evaluate each line individually instead of as one long string. Affects the meaning of `^` and `$` anchors.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_s|`s`} = DotAll. The any character dot `.` matches all characters including newlines and carriage returns.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_x|`x`} = Ignore whitespace except when escaped `\t` or inside a character class `[ ]`.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_A|`A`} = Forces the pattern to be anchored. Similar to forcing `^`
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_D|`D`} = Force dollar-sign ($) to match at end of Haystack, even if Haystack's last item is a newline. 
 *     This is overridden by `m`.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_J|`J`} = Allows duplicate named subpatterns. If multiple matches are found, the leftmost one is stored.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_U|`U`} = Ungreedy (forces `?`). `*`, `?`, `+`, and `{#,#}` consume the least amount of characters.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_extra|`X`} = PCRE_EXTRA. Enables PCRE features.  
 *     With this option, escaped characters that do not **need** to be escaped throw an errors.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Study|`S`} = Studies the pattern to tries to improve its performance. The more complex the regex pattern, the more beneficial this becomes.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_Callout|`C`} = Enables the auto-callout mode. See {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm#auto|`Regular Expression Callouts`} for more info.
 *   - `` `n `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_esc_n|Esc n} = Causes a solitary linefeed (`n) to be the only recognized newline marker.
 *   - `` `a `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#NEWLINE_ANY|NewlineAny} = Enables recognition of additional newline markers. 
 *   - `` `r `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_esc_r|Esc r} = Causes a solitary carriage return (`r) to be the only recognized newline marker.
 * 
 * - ### RegEx Cheat Sheet
 * **Meta Sequence**
 *   - `.` =  Any char but newline = `[^\n]`
 *   - `\s` =  White space = `[\r\n\t\f\v ]`
 *   - `\S` =  Not white space = `[^\s]`
 *   - `\d` =  Digit = `[0-9]`
 *   - `\D` =  Not digit = `[^\d]`
 *   - `\w` =  Word = `[a-zA-Z0-9_]`
 *   - `\W` =  Not word = `[^\w]`
 *   - `\N` =  Non-newline char = `[^\n]`
 *   - `\v` =  Vertical whitespace = `[\n\r\f\x0B\x85\x{2028}\x{2029}]`
 *   - `\V` =  Not vertical whitespace = `[^\v]`
 *   - `\h` =  Horizontal whitespace = `[ \t\xA0\x{1680}\x{180E}\x{2000}-\x{200A}\x{202F}\x{205F}\x{3000}]`
 *   - `\H` =  Not horizontal whitespace = `[^\h]`
 *   - `\X` =  Unicode chars = All chars are unicode
 *   - `\R` =  All line break types = `[\r\n|\n|\r|\f|\x0b|\x85]`
 *   - `\#` =  Backreference = Use a capture group number `#` as the next match
 * 
 * **Common** =  **Characters**
 *   - `\n` =  Newline = `[\x0A]`
 *   - `\r` =  Carriage return = `[\x0D]`
 *   - `\t` =  Tab = `[\x09]`
 *   - `\v` =  Vertical tab = `[\x0B]`
 *   - `\f` =  Form feed = `[\x0C]`
 *   - `\b` =  Backspace = `[\x08]`
 *   - `\###` =  Octal char, where `#` is a digit
 *   - `\x##` =  Hex ASCII range, where `#` is a digit
 *   - `\x{####}` =  Hex Unicode range, where `#` is a digit
 * 
 * **Quantifiers** = 
 *   - `*` =  Matches 0 or more
 *   - `+` =  Matches 1 or more
 *   - `?` =  Matches 0 or 1
 *   - `{3}` =  Match exactly 3
 *   - `{3,}` =  Match at least 3
 *   - `{0,3}` =  Match 0-3 chars
 *   - Quantifier`?` = Match minimum chars for this quantifier
 *   - Quantifier`+` = Match maximum chars for this quantifier
 * 
 * **Anchors and Boundries**
 * - `\A` =  Start of string
 * - `\Z` =  End of string
 * - `^` =  Start of line = Equal to `\A` if no `m` option
 * - `$` =  End of line = Equal to `\Z` if no `m` option
 * - `\b` =  Word boundary. Must not be a word class. = `(?=\W)`
 * - `\B` =  Not word boundary. Must be a word class. = `(?=\w)`
 * - `\G` =  Start of string or last match
 * - `\K` =  Drop all matched chars up to this point

 * **Escape Sequence**
 * - `\` =  Next character is literal
 * - `\Q` ... `\E` =  All chars between are treated as literal
 * 
 * **Group Constructs**
 * - `(?#)` =  Comment only = Does not affect matching
 * - `()` =  Capturing group
 * - `(?:)` =  Match but do not capture
 * - `(?'name')` =  Named capturing group
 * - `(?<name>)` =  Named capturing group
 * - `(?P<name>)` =  Named capturing group
 * - `(this`&#124;`that)` =  Capture this OR that
 * - `(?>)` =  Atomic group = Non-capturing, non-backtracking
 * - `(?=)` =  Positive lookahead - Verify next matches but do not capture or consume
 * - `(?!)` =  Negative lookahead - Verify next does not match and do not capture or consume
 * - `(?<=)` =  Positive lookbehind - Verify previous matches but do not capture or consume
 * - `(?<!)` =  Negative lookbehind - Verify previous does not match and do not capture or consume
 * - `(?(#) rgx)` =  Conditional-if = Use rgx if group `#` was successfully captured,
 * - `(?(#) rgx1 \| rgx2)` =  Conditional-if-else = same as above except use rgx2 if `#` not captured
 * - `(?(DEFINE)(?'Name'))` =  Pre-defined pattern = Create a pattern to call by name later
 * 
 * **Character Classes**
 * - `[abc]` =  Character Range = Match a, b, or c
 * - `[^abc]` =  Not one of these chars = Do not match a, b, or c
 * - `[a-z]` =  Char range = Match any char from a to z
 * - `[^a-z]` =  Not in char range = Do not match any char from a to z
 * - `[a-zA-Z0-9]` =  Multiple ranges = Match a-z, A-Z, or 0-9
 * 
 * **POSIX Characters**
 * - `[:alnum:]` =  Digits, letters = `[a-zA-Z0-9]`
 * - `[:alpha:]` =  All letters = `[]`
 * - `[:ascii:]` =  ASCII characters = `[\x00-\x7F]`
 * - `[:blank:]` =  Space, tab = `[ \t]`
 * - `[:cntrl:]` =  Control characters = `[\x00-\x1F\x7F]`
 * - `[:digit:]` =  Digits = `[0-9]`
 * - `[:graph:]` =  Printed characters = `[\x21-\x7E]`
 * - `[:lower:]` =  Lower case letters = `[a-z]`
 * - `[:print:]` =  Printed characters, spaces = `[\x20-\x7E]`
 * - `[:punct:]` =  Punctuation = `[!"#$%&'()*+,\-./:;<=>?@[\]^_{`&#124;`}~]`
 * - `[:space:]` =  Blank characters = `[ \t\r\n\v\f]`
 * - `[:upper:]` =  Upper case letters = `[A-Z]`
 * - `[:word:]` =  Digits, letters, underscore = `[a-zA-Z0-9_]`
 * - `[:xdigit:]` =  Hexadecimal digits = `[0-9a-fA-F]`
 * 
 * **Replacement**
 * - `$$` = Literal dollar sign = Prevent capture group
 * - `$#` = Use a captured group number. `$0` = entire match
 * - `${name}` - Use a named capture group.
 * @example <caption></caption>  
 */
RegExMatch(Haystack, RegExNeedle [,&MatchObj, StartPos]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegExReplace.htm|`RegExReplace()`}  
 * Replaces occurrences of a pattern (regular expression) inside a string.  
 * @param {(String)} Haystack  
 * The string to search through. This can contain binary zero.  
 * @param {(String)} RegExNeedle  
 * A RegEx pattern with options.  
 * To use {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Options|Options}, include them before the pattern: `options)pattern`  
 * @param {(String)} [Replacement]  
 * The text to replace the matched text with.  
 * If omitted or an empty string, the match is deleted.  
 * Back references such as `$1`, `${10}`, and `${SubPatName}` can be used in the replacement text to insert captured subpatterns.  
 * Subpattern case can be altered by including `U/L/T` (UPPER/lower/Title Case) between the `$` and identifier: `$U1`, `$T{Name}`  
 * To create a literal dollar sign, use `$$`.  
 * @param {(VarRef)} [OutputReplaceTotal]  
 * A variable reference to receive the total number of replacements made.  
 * `0` if no replacements were made.  
 * @param {(Integer)} [ReplaceLimit]  
 * Total amount of replacements to make before stopping.  
 * If omitted or `-1`, are replacements are made.  
 * Characters right of the replacement will remain unchanged.  
 * @param {(Integer)} [StartPos]  
 * The character position number in the string to start the RegEx matching.  
 * A negative number is considered an offset from the end of string. -1 = last char, -2 = second from last, ...
 * `0` starts the RegEx at the very end of the string.  
 * @returns {(String)}  
 * A string containing the updated text from `Haystack`.  
 * If no replacements are made, the string is identical to `Haystack`.  
 * @throws Error - Pattern contains a syntax error  
 * Error format: *Compile error [PCRE ERROR NUMBER] at offset [ERROR POSITION]: description*
 * @throws Error - An error occurred during RegEx execution  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm|RegExMatch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm#RegEx|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm|Regular Expression Callouts} |
 * {@link https://www.autohotkey.com/forum/topic16164.html|Global matching/Grep (forum link)} |
 * {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm|AHK RegEx Quick Reference} |
 * {@link https://regex101.com/|RegEx101.com Tester and Reference Guide} |
 * {@link https://www.rexegg.com/regex-quickstart.html/|RegEx Cheet Sheet}
 * {@link https://www.regular-expressions.info/refflavors.html|In-depth RegEx Info}
 * - ## RegEx Options:
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_i|`i`} = Case-insensitive matching. a-z = A-Z
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Multiline|`m`} = Multiline. Evaluate each line individually instead of as one long string. Affects the meaning of `^` and `$` anchors.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_s|`s`} = DotAll. The any character dot `.` matches all characters including newlines and carriage returns.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_x|`x`} = Ignore whitespace except when escaped `\t` or inside a character class `[ ]`.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_A|`A`} = Forces the pattern to be anchored. Similar to forcing `^`
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_D|`D`} = Force dollar-sign ($) to match at end of Haystack, even if Haystack's last item is a newline. 
 *     This is overridden by `m`.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_J|`J`} = Allows duplicate named subpatterns. If multiple matches are found, the leftmost one is stored.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_U|`U`} = Ungreedy (forces `?`). `*`, `?`, `+`, and `{#,#}` consume the least amount of characters.
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_extra|`X`} = PCRE_EXTRA. Enables PCRE features.  
 *     With this option, escaped characters that do not **need** to be escaped throw an errors.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#Study|`S`} = Studies the pattern to tries to improve its performance. The more complex the regex pattern, the more beneficial this becomes.  
 *   - {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_Callout|`C`} = Enables the auto-callout mode. See {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm#auto|Regular Expression Callouts} for more info.
 *   - `` `n `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_esc_n|Esc n} = Causes a solitary linefeed (`n) to be the only recognized newline marker.
 *   - `` `a `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#NEWLINE_ANY|NewlineAny} = Enables recognition of additional newline markers. 
 *   - `` `r `` {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm#opt_esc_r|Esc r} = Causes a solitary carriage return (`r) to be the only recognized newline marker.
 * - ## RegEx Reference:  
 * | Token/Construct        | Description and equivalent                  |
 * | ---:                   | :---                                        |
 * | **Meta Sequences**     | Unicode past \xFF omitted                   |
 * | `.`                    | Any character but newlines **[^\n]**        |
 * | `\s`                   | White space **[\r\n\t\f\v ]**               |
 * | `\S`                   | Not white space **[^\s]**                   |
 * | `\d`                   | Digit **[0-9]**                             |
 * | `\D`                   | Not digit **[^\d]**                         |
 * | `\w`                   | Word **[a-zA-z0-9_]**                       |
 * | `\W`                   | Not word **[^\w]**                          |
 * | `\N`                   | Non-newline characters **[^\n]**            |
 * | `\v`                   | Vertical whitespace **[\n\r\f\x0B\x85]**    |
 * | `\V`                   | Not vertical whitespace **[^\v]**           |
 * | `\h`                   | Horizontal whitespace **[ \t\xA0]**         |
 * | `\H`                   | Not horizontal whitespace **[^\h]**         |
 * | `\X`                   | Unicode characters **[.\n]**                |
 * | `\R`                   | All line break types **[\r\n|\r|\n|\f]**    |
 * | `\#`                   | Backreference                               |
 * | `\{Name}`              | Named backreference                         |
 * |                        |                                             |
 * | **Characters**         |                                             |
 * | `\n`                   | Newline                                     |
 * | `\r`                   | Carriage return                             |
 * | `\t`                   | Tab                                         |
 * | `\v`                   | Vertical tab                                |
 * | `\f`                   | Form feed                                   |
 * | `\###`                 | Octal char                                  |
 * | `\x##`                 | Hex ASCII range                             |
 * | `\x{########}`         | Hex Unicode range                           |
 * |                        |                                             |
 * | **Quantifiers**        |                                             |
 * | `*`                    | Match 0 or more                             |
 * | `+`                    | Match 1 or more                             |
 * | `?`                    | Match 0 or 1                                |
 * | `{3}`                  | Match Exactly 3                             |
 * | `{3,}`                 | Match 3 or more                             |
 * | `{0,3}`                | Match Between 0 and 3                       |
 * | Quantifier`?`          | Match minimum amount (Lazy)                 |
 * | Quantifier`+`          | Match minimum amount (Greedy)               |
 * |                        |                                             |
 * | **Anchors/Boundries**  |                                             |
 * | `\A`                   | Start of string                             |
 * | `\Z`                   | End of string                               |
 * | `^`                    | Start of line                               |
 * | `$`                    | End of line                                 |
 * | `\b`                   | Word boundary                               |
 * | `\B`                   | Not word boundary                           |
 * | `\G`                   | Start or last match                         |
 * | `\K`                   | Drop all matches up to here                 |
 * |                        |                                             |
 * | **Escape Sequence**    |                                             |
 * | `\`                    | Next character is literal                   |
 * | `\Q` ... `\E`          | Literal sequence start and end              |
 * |                        |                                             |
 * | **Group Constructs**   |                                             |
 * | `()`                   | Capturing group                             |
 * | `(?:)`                 | Match but do not capture                    |
 * | `(this`&#124;`that)`   | Capture this or that                        |
 * | `(?'name')`            | Named capturing group                       |
 * | `(?<name>)`            | Named capturing group                       |
 * | `(?P<name>)`           | Named capturing group                       |
 * | `(?>)`                 | Atomic group                                |
 * | `(?=)`                 | Positive lookahead                          |
 * | `(?!)`                 | Negative lookahead                          |
 * | `(?<=)`                | Positive lookbehind                         |
 * | `(?<!)`                | Negative lookbehind                         |
 * | `(?(Eval) 1 )`         | Conditional if                              |
 * | `(?(Eval) 1 \| 0)`     | Conditional if else                         |
 * | `(?(DEFINE)(?'Name'))` | Pre-defined pattern                         |
 * | `(?#)`                 | RegEx comment only                          |
 * |                        |                                             |
 * | **Character Classes**  |                                             |
 * | `[abc]`                | Character Range                             |
 * | `[^abc]`               | Not one of these chars                      |
 * | `[a-z]`                | Char range                                  |
 * | `[^a-z]`               | Not in char range                           |
 * | `[a-zA-Z]`             | Multiple ranges                             |
 * |                        |                                             |
 * | **POSIX Characters**   |                                             |
 * | `[:alnum:]`            | Digits, letters **[a-zA-Z0-9]**             |
 * | `[:alpha:]`            | All letters **[a-zA-Z]**                    |
 * | `[:ascii:]`            | ASCII characters **[\x00-\x7F]**            |
 * | `[:blank:]`            | Space, tab **[ \t]**                        |
 * | `[:cntrl:]`            | Control characters **[\x00-\x1F\x7F]**      |
 * | `[:digit:]`            | Digits **[0-9]**                            |
 * | `[:graph:]`            | Printed characters **[\x21-\x7E]**          |
 * | `[:lower:]`            | Lower case letters **[a-z]**                |
 * | `[:print:]`            | ASCII - cntrl **[\x20-\x7E]**               |
 * | `[:punct:]`            | Punctuation                                 |
 * |                        |**[!"#$%&'()*+,\-./:;<=>?@[\]^_`{&#124;}~]** |
 * | `[:space:]`            | Blank characters **[ \t\r\n\v\f]**          |
 * | `[:upper:]`            | Upper case letters **[A-Z]**                |
 * | `[:word:]`             | Word characters **[0-9_a-zA-Z]**            |
 * | `[:xdigit:]`           | Hexadecimal digits **[0-9a-fA-F]**          |
 * |                        |                                             |
 * | **Replacement**        |                                             |
 * | `$$`                   | Literal dollar sign                         |
 * | `$n`                   | nth capture group                           |
 * | `${#:1:0}`             | Conditional group replace                   |
 * @example <caption></caption>  
 */
RegExReplace(Haystack, RegExNeedle [,Replacement:='', &OutputReplaceTotal, ReplaceLimit:=-1, StartPos:=1]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|`RegCreateKey()`}  
 * Creates a registry key without writing a value.  
 * @param {(String)} [KeyName]  
 * Full name of a registry key.  
 * Must start with:  
 * - `HKCR` or `HKEY_CLASSES_ROOT`
 * - `HKCU` or `HKEY_CURRENT_USER`
 * - `HKLM` or `HKEY_LOCAL_MACHINE`
 * - `HKU` or `HKEY_USERS`
 * - `HKCC` or `HKEY_CURRENT_CONFIG`
 * 
 * A remote registry can be accessed by prefixing the remote name:
 * `\\workstation01\HKLM`
 * 
 * KeyName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}. The current loop item will be used as the KeyName.  
 * 
 * Use {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} to set 32-bit or 64-bit mode when working with the registry.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the operating system's {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()} function  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 */
RegCreateKey([KeyName]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|`RegDelete()`}  
 * Deletes a value from the registry.  
 * @param {(String)} [KeyName]  
 * Full name of a registry key.  
 * Must start with:  
 * - `HKCR` or `HKEY_CLASSES_ROOT`
 * - `HKCU` or `HKEY_CURRENT_USER`
 * - `HKLM` or `HKEY_LOCAL_MACHINE`
 * - `HKU` or `HKEY_USERS`
 * - `HKCC` or `HKEY_CURRENT_CONFIG`
 * 
 * A remote registry can be accessed by prefixing the remote name:
 * `\\workstation01\HKLM`
 * 
 * KeyName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}. The current loop item will be used as the KeyName.  
 * 
 * Use {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} to set 32-bit or 64-bit mode when working with the registry.  
 * @param {(String)} [ValueName]  
 * Specify the name of the value to delete.  
 * If omitted, the key's `(Default)` value will be deleted.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the operating system's {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()} function  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|RegCreateKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniDelete.htm|IniDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 */
RegDelete([KeyName, K]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|`RegDeleteKey()`}  
 * Deletes a subkey from the registry.  
 * @param {(String)} [KeyName]  
 * Full name of a registry key.  
 * Must start with:  
 * - `HKCR` or `HKEY_CLASSES_ROOT`
 * - `HKCU` or `HKEY_CURRENT_USER`
 * - `HKLM` or `HKEY_LOCAL_MACHINE`
 * - `HKU` or `HKEY_USERS`
 * - `HKCC` or `HKEY_CURRENT_CONFIG`
 * 
 * A remote registry can be accessed by prefixing the remote name:
 * `\\workstation01\HKLM`
 * 
 * KeyName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}. The current loop item will be used as the KeyName.  
 * 
 * Use {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} to set 32-bit or 64-bit mode when working with the registry.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the operating system's {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()} function  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|RegCreateKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniDelete.htm|IniDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 */
RegDeleteKey([KeyName]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|`RegRead()`}  
 * Reads a value from the registry.  
 * @param {(String)} [KeyName]  
 * Full name of a registry key.  
 * Must start with:  
 * - `HKCR` or `HKEY_CLASSES_ROOT`
 * - `HKCU` or `HKEY_CURRENT_USER`
 * - `HKLM` or `HKEY_LOCAL_MACHINE`
 * - `HKU` or `HKEY_USERS`
 * - `HKCC` or `HKEY_CURRENT_CONFIG`
 * 
 * A remote registry can be accessed by prefixing the remote name:
 * `\\workstation01\HKLM`
 * 
 * KeyName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}. The current loop item will be used as the KeyName.  
 * 
 * Use {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} to set 32-bit or 64-bit mode when working with the registry.  
 * @param {(String)} [ValueName]  
 * Specify the name of the value to delete.  
 * If omitted, the key's `(Default)` value will be deleted.  
 * @param {(Any)} [Default]  
 * The value to return if a specified key or value doesn't exist.  
 * If omitted, the script will throw an {@link https://www.autohotkey.com/docs/v2/lib/Error.htm#OSError|OSError}.  
 * @returns {(Primitive)}  
 * The value retrieved from the registry key.  
 * @throws OSError - Thrown on failure such as a permission error  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError} is set to the result of the operating system's {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()} function  
 * @throws OSError - Key does not exist  
 * @throws OSError - Key's value does not exist and no `Default` parameter was provided  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|RegCreateKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniRead.htm|IniRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 */
RegRead([KeyName, ValueName, Default]) => Primitive

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|`RegWrite()`}  
 * Writes a value to the registry.  
 * @param {(String|Integer)} Value  
 * The value to be written.  
 * @param {(String)} [ValueType]  
 * A registry value type:
 * - `REG_SZ` = A null-terminated unicode or ANSI string
 * - `REG_DWORD` = A 32-bit number
 * - `REG_BINARY` = Binary data
 * - `REG_EXPAND_SZ` = A null-terminated unicode or ANSI string that contains unexpanded references to environment variables
 * - `REG_MULTI_SZ` = A sequence of null-terminated strings, ending with an empty string
 * 
 * Can be omitted if `KeyName` is omitted (inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry})
 * @param {(String)} [KeyName]  
 * Full name of a registry key.  
 * Must start with:  
 * - `HKCR` or `HKEY_CLASSES_ROOT`
 * - `HKCU` or `HKEY_CURRENT_USER`
 * - `HKLM` or `HKEY_LOCAL_MACHINE`
 * - `HKU` or `HKEY_USERS`
 * - `HKCC` or `HKEY_CURRENT_CONFIG`
 * 
 * A remote registry can be accessed by prefixing the remote name:
 * `\\workstation01\HKLM`
 * 
 * KeyName can be omitted if inside a {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}. The current loop item will be used as the KeyName.  
 * 
 * Use {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} to set 32-bit or 64-bit mode when working with the registry.  
 * @param {(String)} [ValueName]  
 * Specify the name of the value to write.  
 * If omitted, the key's `(Default)` value will be used.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|RegCreateKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/IniWrite.htm|IniWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 */
RegWrite(Value [,ValueType, KeyName, ValueName]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Reload.htm|`Reload()`}  
 * Closes the currently running instance of the script and launches a new instance.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Edit.htm|Edit()}
 * @example <caption></caption>  
 */
Reload() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Round|`Round()`}  
 * Returns the specified number rounded to N decimal places.  
 * @param {(Number)} Num  
 * The number to round.  
 * @param {(Integer)} [Precision]  
 * The amount of places to round  
 * - Positive = Number of decimal places to round to
 * 
 *       Round(42.454545, 3) => '42.455'
 * - Negative = Number of integer places to round to
 * 
 *       Round(42.454545, -1) => 40
 * - Omit = Round to nearest integer
 * 
 *       Round(42.454545) => 42
 * @returns {(Integer|String)}  
 * Rounded value is a String if rounding to a certain amount of decimal places.  
 * Otherwise, the value is an integer.  
 * @example <caption></caption>  
 */
Round(Num [,Precision]) => Primitive

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Trim.htm|`RTrim()`}  
 * Trims characters from the end of a string.  
 * @param {(String)} Str  
 * The string to trim.  
 * @param {(String)} [OmitChars]  
 * The characters to trim off.  
 * These characters are case-sensitive.  
 * If omitted, space and tab are used.  
 * @returns {(String)}  
 * The string after being trimmed.  
 * @example <caption></caption>  
 */
RTrim(Str [,OmitChars:=' `t']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|`Run()`}  
 * Runs an external program.  
 * @param {(String)} Target  
 * The file, executable, URL, or other item to run along with any optional switches or parameters.  
 * @param {(String)} [WorkingDir]  
 * The initial working directory to be used by the new process.  
 * If blank or omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir} is used.  
 * @param {(String)} [LaunchOpt]  
 * - Omitted or Empty String = Launch normally
 * - `Max` = Launch in maximized state
 * - `Min` = Launch in minimized state
 * - `Hide` = Launch with window hidden
 * @param {(VarRef)} [OutputPID]  
 * A variable reference to receive the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|Process ID} of the launched executable.  
 * An empty string is used if the PID can't be determined.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Target cannot be launched.  
 * Use a {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try}/{@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} to prevent this.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RunAs.htm|RunAs()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|Exit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/CLSID-List.htm|CLSID List} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
Run(Target [,WorkingDir:=A_WorkingDir, LaunchOpt:='', &OutputPID]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/RunAs.htm|`RunAs()`}  
 * Specifies a set of user credentials to use for all subsequent {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} and {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|RunWait()} functions.  
 * Omit all parameters to disable RunAs() credentials.  
 * @param {(String)} [User]  
 * The username used to create the new process.  
 * @param {(String)} [Password]  
 * The password for User. 
 * If omitted, an empty string is used.  
 * @param {(String)} [Domain]  
 * The User's domain.  
 * `@ComputerName` may also work.  
 * If omitted or an empty string, local ccount will be used.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|`Run()`} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|`RunWait()`}
 * @example <caption></caption>  
 */
RunAs([User, Password, Domain]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|`RunWait()`}  
 * Runs an external program and waits until it finishes.  
 * @param {(String)} Target  
 * The file, executable, URL, or other item to run along with any optional switches or parameters.  
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#ComSpec|ComSpec} can be used as a shortcut to the command line (cmd.exe).  
 * System verbs can be used to open files. These are similar to what's found in a file's right click menu.  
 * - `*verb` = System defined verbs, such as {@link https://www.autohotkey.com/docs/v2/lib/Run.htm#RunAs|*RunAs}.  
 * 
 *       Run('*RunAs notepad.exe')
 * - `properties` = Display the item's {@link https://i.imgur.com/E6botq0.png|"Properties" window}.  
 * 
 *       Run('Properties notepad.exe')
 * - `find` = Open an {@link https://i.imgur.com/ybcIkAb.png|Explorer search window} at the specified path.  
 * 
 *       Run('find D:\')
 * - `explore` = Open an instance of Explorer at the specified path.
 * 
 *       Run('explore D:\Scripts')
 * - `edit` = Open a file using the assigned program in the file's edit registry key.  
 * 
 *       Run('edit test_script.ahk')
 * - `open` = Opens the specified target. This is the default verb for most file types.  
 * 
 *       Run('open notepad.exe)
 * - `print` = Prints the indicated file with the associated application.  
 * 
 *       Run('print D:\receipts\amazon20231210.pdf')
 * @param {(String)} [WorkingDir]  
 * The initial working directory to be used by the new process.  
 * If blank or omitted, {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir} is used.  
 * @param {(String)} [LaunchOpt]  
 * - Omit or Empty String = Launch normally
 * - `Max` = Launch in maximized state
 * - `Min` = Launch in minimized state
 * - `Hide` = Launch with window hidden
 * @param {(VarRef)} [OutputPID]  
 * A variable reference to receive the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|Process ID} of the launched executable.  
 * An empty string is used if the PID can't be determined.  
 * @returns {(Integer)}  
 * The program's exit code.  
 * Some programs will immediately launch another process and then close.  
 * This will cause RunWait() to return even though the program is still running.  
 * @throws Error - Target cannot be launched.  
 * Use a {@link https://www.autohotkey.com/docs/v2/lib/Try.htm|Try}/{@link https://www.autohotkey.com/docs/v2/lib/Catch.htm|Catch} to prevent this.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RunAs.htm|RunAs()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Exit.htm|Exit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/CLSID-List.htm|CLSID List} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
RunWait(Target [,WorkingDir:=A_WorkingDir, LaunchOpt:='', &OutputPID]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|`Send()`}  
 * Transmits keystrokes to the system.  
 * Send is an alias for {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputDetail|SendInput()} by default.  
 * It can be changed to {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent()} or {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay()} by using {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()}.  
 * @param {(String)} Keys  
 * Sequence of keys to send.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#keynames|Key names}, literal {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|modifier symbols}, and literal curly braces must be wrapped in curly braces: `{!} {#} {+} {^} {{} {}}`  
 * Using braces forces the key to be sent by virtual keycode, even if the character does not exist on the current keyboard layout.  
 * Single character keys do not need to be wrapped and will be sent regardless of keyboard layout.  
 * 
 *     Send('AHK{!}')
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|**Modifier Key Symbols**}: Modifier is included with next key
 *   - `!` = Alt: `Send('!{F4}')` ; 'Alt+F4 - Close Window'
 *   - `^` = Control: `Send('^c')` ; 'Ctrl+c Copy'
 *   - `+` = Shift: `Send('+a')` ; 'Shift+a Select all'
 *   - `#` = Windowkey: `Send('#d')` ; 'Win+d Show Desktop'
 * 
 * - {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|**Escape Sequences**} `` ` ``:
 *   - ``` `` ``` = Literal grave accent.  
 *   - `` `; `` = Literal semicolon (prevents comment).
 *   - `` `n `` = Newline
 *   - `` `r `` = Carriage Return
 *   - `` `t `` = Tab
 *   - `` `s `` = Space
 *   - `` `' ``|`` `" `` = Literal quote (prevents end of string)
 *  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Special_modes|**Special modes**}: Must be the first part of the string
 *   - [`{Blind}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Blind)  
 *     Modifier key release is not done if key is not in the down state.  
 *     Physically held modifier keys are included with the keys.  
 *     Blind can be used with Raw and Text modes
 *     {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} is ignored and {@link https://www.autohotkey.com/docs/v2/lib/A_MenuMaskKey.htm|menu masking} is disabled.  
 *   - [`{Raw}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw)  
 *     Special characters such as `^+!#{}` are all sent as literal characters instead of their special meaning.  
 *     Raw does not affect {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|escape sequences}.  
 * 
 *         Send('{Raw}+{Enter}') => '+{Enter}' ; Instead of Shift+Enter
 *   - [`{Text}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is similar to {Raw} except characters don't get translated to keycodes, other than the ones listed below:
 *     - `` `r ``, `` `n ``, and `` `r`n `` = `Enter` keystroke
 *     - `` `t `` = `Tab` keystroke
 *     - `` `b `` = `Backspace` keystroke
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Repeating_or_Holding_Down_a_Key|**Hold, Release, and Repeat**}
 * - `{Key Down}`/`{Key Up}` = Puts key in a logical down (held) or up (released) state.  
 * 
 *       Send('{Shift Down}s{Shift Up}') => 'shift+s'
 * = `{Key #}` = The number of times to send the key.
 * 
 *       Send('{z 3}') => 'zzz'
 * - `{ModKey DownTemp}` = Same as `Down` state.  
 *   However, modifier keys being held by this will be released at the next {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * - `{ModKey DownR}` = Works the same as `DownTemp`.  
 *   However, the modifier key resumes being held after the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences}
 * @example <caption></caption>  
 */
Send(Keys) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|`SendEvent()`}  
 * Transmits keystrokes to the system via the {@link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-keybd_event|keybd_event function}.  
 * While {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputDetail|SendInput()} and {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay()} are generally faster and more reliable, SendEvent() has some unique benefits.  
 * There are situations where SendEvent() will work when SendInput()/SendPlay() fail.  
 * SendEvent() can make use of {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} to define key press duration and delay between keystrokes, eliminating the need to add Sleep() between keystroke events.  
 * @param {(String)} Keys  
 * Sequence of keys to send.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#keynames|Key names}, literal {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|modifier symbols}, and literal curly braces must be wrapped in curly braces: `{!} {#} {+} {^} {{} {}}`  
 * Using braces forces the key to be sent by virtual keycode, even if the character does not exist on the current keyboard layout.  
 * Single character keys do not need to be wrapped and will be sent regardless of keyboard layout.  
 * 
 *     Send('AHK{!}')
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|**Modifier Key Symbols**}: Modifier is included with next key
 *   - `!` = Alt: `Send('!{F4}')` ; 'Alt+F4 - Close Window'
 *   - `^` = Control: `Send('^c')` ; 'Ctrl+c Copy'
 *   - `+` = Shift: `Send('+a')` ; 'Shift+a Select all'
 *   - `#` = Windowkey: `Send('#d')` ; 'Win+d Show Desktop'
 * 
 * - {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|**Escape Sequences**} `` ` ``:
 *   - ``` `` ``` = Literal grave accent.  
 *   - `` `; `` = Literal semicolon (prevents comment).
 *   - `` `n `` = Newline
 *   - `` `r `` = Carriage Return
 *   - `` `t `` = Tab
 *   - `` `s `` = Space
 *   - `` `' ``|`` `" `` = Literal quote (prevents end of string)
 *  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Special_modes|**Special modes**}: Must be the first part of the string
 *   - [`{Raw}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw)  
 *     Special characters such as `^+!#{}` are all sent as literal characters instead of their special meaning.  
 *     Raw does not affect {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|escape sequences}.  
 * 
 *         Send('{Raw}+{Enter}') => '+{Enter}' ; Instead of Shift+Enter
 *   - [`{Text}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is similar to {Raw} except characters don't get translated to keycodes, other than the ones listed below:
 *     - `` `r ``, `` `n ``, and `` `r`n `` = `Enter` keystroke
 *     - `` `t `` = `Tab` keystroke
 *     - `` `b `` = `Backspace` keystroke
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Repeating_or_Holding_Down_a_Key|**Hold, Release, and Repeat**}
 * - `{Key Down}`/`{Key Up}` = Puts key in a logical down (held) or up (released) state.  
 * 
 *       Send('{Shift Down}s{Shift Up}') => 'shift+s'
 * = `{Key #}` = The number of times to send the key.
 * 
 *       Send('{z 3}') => 'zzz'
 * - `{ModKey DownTemp}` = Same as `Down` state.  
 *   However, modifier keys being held by this will be released at the next {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * - `{ModKey DownR}` = Works the same as `DownTemp`.  
 *   However, the modifier key resumes being held after the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences}
 * @example <caption></caption>  
 */
SendEvent(Keys) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInput|`SendInput()`}  
 * Is the preferred method to transmit keystrokes to the system.  
 * Unlike {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent()}, SendInput() buffers (stores) keyboard and mouse actions until sending finishes, preventing interruption during the send.  
 * All buffered key strokes and mouse actions are sent after SendInput() finishes.  
 * SendInput() has a limit of roughtly ~5000 characters per send.  
 * @param {(String)} Keys  
 * Sequence of keys to send.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#keynames|Key names}, literal {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|modifier symbols}, and literal curly braces must be wrapped in curly braces: `{!} {#} {+} {^} {{} {}}`  
 * Using braces forces the key to be sent by virtual keycode, even if the character does not exist on the current keyboard layout.  
 * Single character keys do not need to be wrapped and will be sent regardless of keyboard layout.  
 * 
 *     Send('AHK{!}')
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|**Modifier Key Symbols**}: Modifier is included with next key
 *   - `!` = Alt: `Send('!{F4}')` ; 'Alt+F4 - Close Window'
 *   - `^` = Control: `Send('^c')` ; 'Ctrl+c Copy'
 *   - `+` = Shift: `Send('+a')` ; 'Shift+a Select all'
 *   - `#` = Windowkey: `Send('#d')` ; 'Win+d Show Desktop'
 * 
 * - {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|**Escape Sequences**} `` ` ``:
 *   - ``` `` ``` = Literal grave accent.  
 *   - `` `; `` = Literal semicolon (prevents comment).
 *   - `` `n `` = Newline
 *   - `` `r `` = Carriage Return
 *   - `` `t `` = Tab
 *   - `` `s `` = Space
 *   - `` `' ``|`` `" `` = Literal quote (prevents end of string)
 *  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Special_modes|**Special modes**}: Must be the first part of the string
 *   - [`{Raw}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw)  
 *     Special characters such as `^+!#{}` are all sent as literal characters instead of their special meaning.  
 *     Raw does not affect {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|escape sequences}.  
 * 
 *         Send('{Raw}+{Enter}') => '+{Enter}' ; Instead of Shift+Enter
 *   - [`{Text}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is similar to {Raw} except characters don't get translated to keycodes, other than the ones listed below:
 *     - `` `r ``, `` `n ``, and `` `r`n `` = `Enter` keystroke
 *     - `` `t `` = `Tab` keystroke
 *     - `` `b `` = `Backspace` keystroke
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Repeating_or_Holding_Down_a_Key|**Hold, Release, and Repeat**}
 * - `{Key Down}`/`{Key Up}` = Puts key in a logical down (held) or up (released) state.  
 * 
 *       Send('{Shift Down}s{Shift Up}') => 'shift+s'
 * = `{Key #}` = The number of times to send the key.
 * 
 *       Send('{z 3}') => 'zzz'
 * - `{ModKey DownTemp}` = Same as `Down` state.  
 *   However, modifier keys being held by this will be released at the next {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * - `{ModKey DownR}` = Works the same as `DownTemp`.  
 *   However, the modifier key resumes being held after the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences}
 * @example <caption></caption>  
 */
SendInput(Keys) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlay|`SendPlay()`}  
 * Transmits keystrokes to the system in a "play back" manner.  
 * There are times when SendPlay() works where other send types fail, especially in video games.  
 * SendPlay() sends keystroke events (messages) directly to the active window, similar to a low level {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} for a Window.  
 * @param {(String)} Keys  
 * Sequence of keys to send.  
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#keynames|Key names}, literal {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|modifier symbols}, and literal curly braces must be wrapped in curly braces: `{!} {#} {+} {^} {{} {}}`  
 * Using braces forces the key to be sent by virtual keycode, even if the character does not exist on the current keyboard layout.  
 * Single character keys do not need to be wrapped and will be sent regardless of keyboard layout.  
 * 
 *     Send('AHK{!}')
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|**Modifier Key Symbols**}: Modifier is included with next key
 *   - `!` = Alt: `Send('!{F4}')` ; 'Alt+F4 Close'
 *   - `^` = Control: `Send('^c')` ; 'Ctrl+c Copy'
 *   - `+` = Shift: `Send('+a')` ; 'Shift+a Capitalize'
 *   - `#` = Windowkey: `Send('#d')` ; 'Win+d Show Desktop'
 * 
 * - {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|**Escape Sequences**} `` ` ``:
 *   - ``` `` ``` = Literal grave accent.  
 *   - `` `; `` = Literal semicolon (prevents comment).
 *   - `` `n `` = Newline
 *   - `` `r `` = Carriage Return
 *   - `` `t `` = Tab
 *   - `` `s `` = Space
 *   - `` `' ``|`` `" `` = Literal quote (prevents end of string)
 *  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Special_modes|**Special modes**}: Must be the first part of the string
 *   - [`{Raw}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Raw)  
 *     Special characters such as `^+!#{}` are all sent as literal characters instead of their special meaning.  
 *     Raw does not affect {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|escape sequences}.  
 * 
 *         Send('{Raw}+{Enter}') => '+{Enter}' ; Instead of Shift+Enter
 *   - [`{Text}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text) is similar to {Raw} except characters don't get translated to keycodes, other than the ones listed below:
 *     - `` `r ``, `` `n ``, and `` `r`n `` = `Enter` keystroke
 *     - `` `t `` = `Tab` keystroke
 *     - `` `b `` = `Backspace` keystroke
 * 
 * ### {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Repeating_or_Holding_Down_a_Key|**Hold, Release, and Repeat**}
 * - `{Key Down}`/`{Key Up}` = Puts key in a logical down (held) or up (released) state.  
 * 
 *       Send('{Shift Down}s{Shift Up}') => 'shift+s'
 * = `{Key #}` = The number of times to send the key.
 * 
 *       Send('{z 3}') => 'zzz'
 * - `{ModKey DownTemp}` = Same as `Down` state.  
 *   However, modifier keys being held by this will be released at the next {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * - `{ModKey DownR}` = Works the same as `DownTemp`.  
 *   However, the modifier key resumes being held after the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#modifierkeys|Send function} call.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences}
 * @example <caption></caption>  
 */
SendPlay(Keys) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendText|`SendText()`}  
 * Transmits keys to the system using [`{Text}` mode](https://www.autohotkey.com/docs/v2/lib/Send.htm#Text).  
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape Sequences} are respected.  
 * @param {(String)} Keys  
 * Sequence of keys to send.  
 * - {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|**Escape Sequences**} `` ` ``:
 *   - ``` `` ``` = Literal grave accent.  
 *   - `` `; `` = Literal semicolon (prevents comment).
 *   - `` `n `` = Newline
 *   - `` `r `` = Carriage Return
 *   - `` `t `` = Tab
 *   - `` `s `` = Space
 *   - `` `' `` `` `" `` = Literal quote (prevents end of string)
 *  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Special_modes|**Special modes**}: Must be the first part of the string
 *   - [`{Blind}`](https://www.autohotkey.com/docs/v2/lib/Send.htm#Blind)  
 *     Modifier key release is not done if key is not in the down state.  
 *     Physically held modifier keys are included with the keys.  
 *     {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} is ignored and {@link https://www.autohotkey.com/docs/v2/lib/A_MenuMaskKey.htm|menu masking} is disabled.  
 * 
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/BlockInput.htm|BlockInput()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/misc/EscapeChar.htm|Escape sequences}
 * @example <caption></caption>  
 */
SendText(Keys) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SendLevel.htm|`SendLevel()`}  
 * Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.  
 * @param {(Integer)} Level  
 * A number `0` and `100`.  
 * Default is `0`.  
 * @returns {(Integer)}  
 * The previous level is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_InputLevel.htm|#InputLevel}
 * @example <caption></caption>  
 */
SendLevel(Level) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|`SendMessage()`}  
 * Sends a message to a window or control and waits for acknowledgement.  
 * @param {(Integer)} MsgNumber  
 * The {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|message number} to send.  
 * @param {(Integer)} [wParam]  
 * Word Param. Used to pass message-specific information and must be an integer.  
 * If omitted, defaults to `0`.  
 * @param {(Integer)} [lParam]  
 * Long Param. Also used to pass message-specific information and must be an integer.  
 * If omitted, defaults to `0`.  
 * @param {(String|Integer|Object)} [Control]  
 * A control's ClassNN, Text, HWND (handle), or an object with an HWND. See {@link https://www.autohotkey.com/docs/v2/lib/Control.htm#Parameter|Control Parameter}.  
 * If omitted, the target window is used instead of a control.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @param {(Integer)} [Timeout]  
 * Specify the maximum time, in milliseconds, to wait for the message to be processed.  
 * Defaults to `5000`.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window or control could not be found  
 * @throws TimeoutError - Message was not processed in the specified time  
 * @throws OSError - Message could not be posted  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MenuSelect.htm|MenuSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessageList.htm|Message List} |
 * {@link https://www.autohotkey.com/docs/v2/misc/SendMessage.htm|Message Tutorial} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Winamp.htm|Automating Winamp} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
SendMessage(MsgNumber [,wParam:=0, lParam:=0, Control:=TargetWindow, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='', Timeout:=5000]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|`SendMode()`}  
 * Changes the send type used by {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()}.  
 * Also affects {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()}, and {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()}.  
 * The default type is {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputDetail|SendInput()}.  
 * @param {(String)} Mode
 * - `Event` = Use SendEvent() for sending.  
 * - `Input` = Use SendInput() for sending.  
 * - `Play` = Use SendPlay() for sending.  
 * - `InputThenPlay` = Same as `Input` but uses `Play` as the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputUnavail|unavailable fallback method} instead of `Event`.  
 * @returns {(String)}  
 * The previous setting: `Event`, `Input`, `InputThenPlay`, or `Play`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()}
 * @example <caption></caption>  
 */
SendMode(Mode) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetNumScrollCapsLockState.htm|`SetCapsLockState()`}  
 * Sets the toggle state of CapsLock.  
 * Can also permanently enable or disable the key state.  
 * @param {(String|Integer)} [State]
 * - Omit or Empty String = Disables the `AlwaysOn` and `AlwaysOff` options.  
 * - `1` `On` = Set CapsLock toggle to on and disable `AlwaysOn` and `AlwaysOff` options.  
 * - `0` `Off` = Set CapsLock toggle to off and disables `AlwaysOn` and `AlwaysOff` options.  
 * - `AlwaysOn` = Set CapsLock toggle to on and prevents it from being turned off.  
 * - `AlwaysOff` = Set CapsLock toggle to off and prevents it from being turned on.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|`SetStoreCapsLockMode()`} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|`GetKeyState()`}
 * @example <caption></caption>  
 */
SetCapsLockState([State]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|`SetControlDelay()`}  
 * Sets the amount of time to wait after each control-modifying function.  
 * @param {(Integer)} Delay
 * - Number = Time to wait, in milliseconds.
 * - `0` = Minimum possible delay.
 * - `-1` = No delay.
 * @returns {(Integer)}  
 * The previous delay is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions}
 * @example <caption></caption>  
 */
SetControlDelay(Delay) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|`SetDefaultMouseSpeed()`}  
 * Sets the mouse speed that will be used if unspecified in Click, MouseMove, MouseClick, and MouseClickDrag.  
 * @param {(Integer)} Speed  
 * The speed to set mouse movement.  
 * Speed should be between `0` (instant) and `100` (slowest).  
 * Default is 2.  
 * @returns {(Integer)}  
 * The previous speed is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()}
 * @example <caption></caption>  
 */
SetDefaultMouseSpeed(Speed) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|`SetKeyDelay()`}  
 * Sets the hold time and delay between keystrokes for {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} and {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} keystrokes.  
 * @param {(Integer)} [KeyDelay]  
 * The amount of time between each keystroke.  
 * Default is 10 for SendEvent() and -1 for SendPlay().  
 * - Omit = KeyDelay is not changed.  
 * - Number = Time before next keystroke is sent, in milliseconds.  
 * - `-1` = No delay before sending.  
 * - `0` = Smallest possible delay before sending.  
 * 
 * Due to the granularity of the OS time-keeping system, KeyDelay might be rounded to the nearest multiple of 10 or 15.
 * @param {(Integer)} [HoldTime]  
 * The amount of time the keystroke is held down.  
 * Default is -1 for both SendEvent() and SendPlay().  
 * - Omit = HoldTime is not changed.  
 * - Number = Time, in milliseconds, to hold key down before releasing.  
 * - `-1` = No delay before releasing.  
 * - `0` = Smallest possible delay before releasing.  
 * 
 * Due to the granularity of the OS time-keeping system, HoldTime might be rounded to the nearest multiple of 10 or 15.
 * @param {(String)} [Play]
 * - `Play` = Settings apply to {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay() mode}.  
 * - Omit or Empty String =  Settings apply to {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendEvent() mode}. 
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()}
 * @example <caption></caption>  
 */
SetKeyDelay([KeyDelay:=unset, HoldTime:=unset, Play:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|`SetMouseDelay()`}  
 * Sets the delay that will occur after each mouse movement or click.  
 * @param {(Integer)} [Delay]  
 * The amount of time between each mouse event.  
 * Default is 10 for SendEvent() and -1 for SendPlay().  
 * - Omit = KeyDelay is not changed.  
 * - Number = Time, in milliseconds, before the next keystroke is sent.  
 * - `-1` = No delay before sending.  
 * - `0` = Smallest possible delay before sending.  
 *   If `Play` parameter is set, 0 is the same as -1.  
 * 
 * Due to the granularity of the OS time-keeping system, Delay might be rounded to the nearest multiple of 10 or 15.
 * @param {(String)} [Play]
 * - `Play` = Settings apply to {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay() mode}.  
 * - Omit or Empty String =  Settings apply to {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendEvent() mode}. 
 * @returns {(Integer)}  
 * The previous Delay is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseClickDrag()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()} |
 * @example <caption></caption>  
 */
SetMouseDelay(Delay [,Play]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetNumScrollCapsLockState.htm|`SetNumLockState()`}  
 * Sets the toggle state of NumLock.  
 * Can also permanently enable or disable the key state.  
 * @param {(String|Integer)} [State]
 * - Omit or Empty String = Disables the `AlwaysOn` and `AlwaysOff` options.  
 * - `1` `On` = Set NumLock toggle to on and disable `AlwaysOn` and `AlwaysOff` options.  
 * - `0` `Off` = Set NumLock toggle to off and disables `AlwaysOn` and `AlwaysOff` options.  
 * - `AlwaysOn` = Set NumLock toggle to on and prevents it from being turned off.  
 * - `AlwaysOff` = Set NumLock toggle to off and prevents it from being turned on.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|`GetKeyState()`}
 * @example <caption></caption>  
 */
SetNumLockState([State]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetNumScrollCapsLockState.htm|`SetScrollLockState()`}  
 * Sets the toggle state of ScrollLock.  
 * Can also permanently enable or disable the key state.  
 * @param {(String|Integer)} [State]
 * - Omit or Empty String = Disables the `AlwaysOn` and `AlwaysOff` options.  
 * - `1` `On` = Set ScrollLock toggle to on and disable `AlwaysOn` and `AlwaysOff` options.  
 * - `0` `Off` = Set ScrollLock toggle to off and disables `AlwaysOn` and `AlwaysOff` options.  
 * - `AlwaysOn` = Set ScrollLock toggle to on and prevents it from being turned off.  
 * - `AlwaysOff` = Set ScrollLock toggle to off and prevents it from being turned on.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/GetKeyState.htm|`GetKeyState()`}
 * @example <caption></caption>  
 */
SetScrollLockState([State]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|`SetRegView()`}  
 * Sets the registry view used by {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()}, {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()}, {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()}, {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} and {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}.  
 * Sets 32-bit or 64-bit registry view. {@link https://www.autohotkey.com/docs/v1/Variables.htm#RegView|A_RegView} stores the current view type.  
 * @param {(Integer|String)} RegView  
 * View type
 * - `32` = Access registry as a 32-bit program.  
 * - `64` = Access registry as a 64-bit program.  
 * - `Default` = Restore to normal view type.  
 * @returns {(String)}  
 * The previous setting is returned: `32`, `64`, `Default`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegRead.htm|RegRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegWrite.htm|RegWrite()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegCreateKey.htm|RegCreateKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDelete.htm|RegDelete()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegDeleteKey.htm|RegDeleteKey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm|Loop-Registry}
 * @example <caption></caption>  
 * last := SetRegView(32)
 * MsgBox('Value: ' last)
 */
SetRegView(RegView) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|`SetStoreCapsLockMode()`}  
 * Sets whether CapsLock's state is restored after a {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send function}.  
 * This allows the sending of the CapsLock keystroke to alter the capslock state.  
 * {@link https://www.autohotkey.com/docs/v1/Variables.htm#StoreCapslockMode|A_StoreCapsLockMode} stores the current SetStoreCapsLockMode setting.  
 * @param {(Boolean)} Mode
 * - `1` = Capslock state is set to whatever it was prior to the send.  
 * - `0` = Capslock state stays at it's current state when send finishes.  
 * @returns {(Boolean)}  
 * The previous setting is returned: `1`, `0`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSend.htm|ControlSend()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetNumScrollCapsLockState.htm|Set[Caps/Num/Scroll]LockState()}
 * @example <caption></caption>  
 */
SetStoreCapsLockMode(Mode) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|`SetTimer()`}  
 * Causes a function or callback to be activated on a set timer, either once or repeatedly.  
 * @param {(FuncObj)} [Callback]  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|function object} to call.  
 * A {@link https://www.autohotkey.com/docs/v2/Concepts.htm#references-to-objects|reference} to the function object is kept until the timer is deleted.  
 * This prevents the function object from being freed prematurely.  
 * If omitted, all SetTimer() changes are applied to the timer that launched the thread (if any).  
 * @param {(Integer)} [Period]  
 * The time interval, in milliseconds, used by SetTimer.  
 * - `#` = A positive SetTimer() period runs repeatedly, waiting `#` milliseconds between each activation.  
 * - `-#` = A negative SetTimer() period waits `#` milliseconds, runs once, and then is deleted.  
 * - `0` = The specified timer is deleted. This is done automatically with run-once timers.  
 * - Omit = If timer already exists, it is {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm#reset|reset} to its former period.  
 *   Otherwise, a new timer defaults to `250`.  
 * 
 * A period cannot exceed 4294967295 ms (49.7 days).  
 * @param {(Integer)} [Priority]  
 * Specify an integer or {@link https://www.autohotkey.com/docs/v2/Variables.htm#Expressions|expression} between `-2147483648` and `2147483647` to indicate {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm#Priority|thread priority level}.  
 * `Period` can be omitted when only updating a timer's priority.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|Thread()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Functor.htm|Function Objects} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads}
 * @example <caption></caption>  
 */
SetTimer([Callback:=unset, Period:=250, Priority:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|`SetTitleMatchMode()`}  
 * Sets the matching behavior of the WinTitle parameter in built-in functions such as WinWait.  
 * @param {(String|Integer)} ModeOrSpeed  
 * - **Mode:** How the title uses the provided text.  
 *   The current value is stored in {@link https://www.autohotkey.com/docs/v2/Variables.htm#TitleMatchMode|A_TitleMatchMode}  
 *   - `1` = Title must start with specified text.  
 *   - `2` = Title must contain the specified text.  
 *   - `3` = Title must exactly match specified text.  
 *   - `RegEx` = Title is treated as a RegEx pattern.  
 *     The window matches if the RegEx evalutes true.  
 * - **Speed:** Method to use when evaluating Window text parameters.  
 *   The current value is stored in {@link https://www.autohotkey.com/docs/v2/Variables.htm#TitleMatchModeSpeed|A_TitleMatchModeSpeed}  
 *   This defaults to `Fast`
 *   - `Fast` = Can perform much faster than `Slow` but certain controls cannot be detected.  
 *   - `Slow` = Can perform slower but works with all controsl that respond to {@link https://learn.microsoft.com/windows/win32/winmsg/wm-gettext|WM_GETTEXT}.  
 * @returns {(Integer|String)}  
 * The previous value of the last changed type.  
 * `Mode` = `1`, `2`, `3`, `RegEx`
 * `Speed` = `Fast`, `Slow`
 * @see {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle and LastFoundWindow} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm|RegExMatch()} |
 * @example <caption></caption>  
 */
SetTitleMatchMode(ModeOrSpeed) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|`SetWinDelay()`}  
 * Sets the delay that will occur after each {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|window function}.  
 * {@link https://www.autohotkey.com/docs/v1/Variables.htm#WinDelay|A_WinDelay} stores the current SetWinDelay() setting.  
 * @param {(Integer)} Delay  
 * Default is `100`  
 * - Number = Time to wait, in milliseconds.  
 * - `0` = Smallest possible delay.  
 * - `-1` = No delay.  
 * @returns {(Integer)}  
 * The previous setting is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()}
 * @example <caption></caption>  
 */
SetWinDelay(Delay) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SetWorkingDir.htm|`SetWorkingDir()`}  
 * Changes the script's current working directory.  
 * @param {(String)} DirName  
 * the name of the new working directory.  
 * If a full path isn't used, DirName is assumed to be a subfolder of the current {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#InitialWorkingDir|A_InitialWorkingDir} |
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptDir|A_ScriptDir}
 * @example <caption></caption>  
 */
SetWorkingDir(DirName) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Shutdown.htm|`Shutdown()`}  
 * Shuts down, restarts, or logs off the system.  
 * @param {(Integer)} Flag  
 * A sum of the following options:
 * - `0` = Logoff. Current user is logged off.  
 * - `1` = Shutdown. Operating 
 * - `2` = Reboot. Operating system is shut down then turned back on.  
 * - `4` = Force close. Forcefully closes all applications.  
 *   This can cause data loss in some situations.  
 * - `8` = Power down. Shuts down the system and turns power off.  
 * 
 *     Shutdown(6) ; Reboot system (2) and force close everything (4)
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/OnExit.htm|OnExit()}
 * @example <caption></caption>  
 */
Shutdown(Flag) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Sin|`Sin()`}  
 * Returns the trigonometric sine of the number.  
 * Convert radians to degrees: `Value * 180/pi` (180/pi = ~57.29578) 
 * Convert degrees to radians: `Value * pi/180` (pi/180 = ~0.01745329252)
 * @param {(Number)} Num  
 * The number to get the sine value of.  
 * Must be expressed in radians.  
 * @returns {(Float)}  
 * Sine of `Num`. 
 * @example <caption></caption>  
 * Sin(1.2) => 0.932039
 */
Sin(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Sleep.htm|`Sleep()`}  
 * Waits the specified amount of time before continuing.  
 * @param {(Integer)} Delay  
 * Amount of time, in milliseconds, to wait before continuing the thread.  
 * Number must be between `0` and `2147483647` (24 days).  
 * `-1` causes no sleep and instead makes the script check its message queue, allowing for interrupts to occur.  
 * Due to the granularity of the OS time-keeping system, Delay might be rounded to the nearest multiple of 10 or 15.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()}
 * @example <caption></caption>  
 */
Sleep(Delay) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm|`Sort()`}  
 * Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).  
 * @param {(String)} Text  
 * The string to sort.  
 * @param {(String)} [Options]  
 * Zero or more of the following {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm#Options|options}:  
 * - `C` `C1` `COn`: Case-sensitive sort. Uppercase comes before lowercase.  
 *   The `N` option overrides this setting.  
 * - `C0` `COff`: Case-insensitive sort. Uppercase and lowercase are considered equals.  
 * - `CL` `CLocale`: Case-insensitive sort based on the current user's locale. 
 * - `CLogical`: Same as `CLocale`, but digits in each item are treated as numerical group values rather than individual key code.  
 *   `A10,A2` would sort as `A2,A10` because 2 is less than 10 numerically, even though the key codes A1 come before A2.  
 * - `D#`: Delimeter character, where `#` is the specific character that separates each item to sort.  
 *   Delimiter is always case-sensitive and the default value is newline `` `n ``.  
 * - `N`: Numeric sort. Numbers inside the string are sorted by their value rather than their individual key codes.  
 *   `100,5` would sort to `5,100` because the value 5 is less than 100 even though first character `5` comes after `1`.  
 * - `P#`: Sorting starts at the specified position for each item, where `#` is the decimal position to start at.  
 *   Everything before that position is ignored in the sort.  
 *   Default is `1`.  
 * 
 *       Sort('x 2`nz 1`ny 3', 'P3') => 'z 1`nx 2`ny 3'
 *       ; z 1
 *       ; x 2
 *       ; y 3
 *       ;   ^--Sort starts at 3rd character
 * - `R`: Reverse sort. Uses descending order.  
 * - `Random`: Randomizes order of items.  
 *   Overrides all options except `D`, `Z`, and `U`.  
 *   The `N`, `C`, and `CL` options will still apply to how duplicates are detected.  
 * - `U`: Unique. Enforces a unique list by removing duplicates.  
 *   - If `C` is in effect, the case of the list items must be identical.  
 *   - If `N` is in effect, numerical avlues are considered duplicates. `2`, `2.0`, and `02` are the same.  
 *   - If `P` or `\` is in effect, the entire item must still be a duplicate, not just the substring or portion.  
 *   - If `Random` or custom sorting is in effect, duplicates are only removed if adjacent to each other.  
 * - `Z`: If a string ends with a delimiting character, the blank area after it is considered an item to sort.  
 *   Without `Z`, the last ending delimiter is considered part of the last item to sort.  
 * - `\:` Path sorting. Items are sorted by the characters that come after the last backslash `\` in the string.  
 *   If no backslash is present, the whole item is used.  This option is useful for sorting bare filenames (i.e. excluding their paths), such as the example below, in which the AAA.txt line is sorted above the BBB.txt line because their directories are ignored for the purpose of the sort:
 *   `C:\bb\aa.txt` would come first, `C:\aa\bb.txt` second, and `cc.txt` last.  
 * @param {(FuncObj)} [Callback]  
 * A callback to perform custom user-implemented sorting.  
 * If omitted, no special sorting is performed.  
 * Callback requires 3 parameters:  
 * - `item1` = First value to compare.  
 * - `item2` = Second value to compare.  
 * - `offset` = Number of characters between the start position of each item, including delimiter.  
 * Callback return values:  
 * - `Postive integer` = item1 is greater than item2
 * - `Negative integer` = item2 is greater than item1
 * - `0` Empty String = item1 and item2 are equal
 * 
 *     sort_callback(item1, item2, offset)
 * 
 *   Having a callback overrides all options except `D`, `Z`, and `U`.  
 *   The `N`, `C`, and `CL` options will still apply to how duplicates are detected.  
 * @returns {(String)}  
 * The sorted version of `Text`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileRead.htm|FileRead()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrSplit.htm|StrSplit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/CallbackCreate.htm|CallbackCreate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopParse.htm|Loop-Parse} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm|Loop-Files}
 * @example <caption></caption>  
 */
Sort(Text [,Options:='C0', Callback:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundBeep.htm|`SoundBeep()`}  
 * Emits a tone from the PC speaker.  
 * This function will wait for the sound to finish before continuing.  
 * To produce system sounds instead of speaker beeping, see {@link https://www.autohotkey.com/docs/v2/lib/SoundPlay.htm|SoundPlay()}.  
 * @param {(Integer)} [Frequency]  
 * The frequency of the beep, between `37` and `32767`
 * @param {(Integer)} [Duration]  
 * The duration of the beep in milliseconds.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SoundPlay.htm|SoundPlay()}
 * @example <caption></caption>  
 */
SoundBeep([Frequency:=523, Duration:=150]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundGetInterface.htm|`SoundGetInterface()`}  
 * Retrieves a native COM interface of a sound device or component.  
 * @param {(String)} IID  
 * An interface identifier (GUID).  
 * GUID format: `{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}`  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, the interface implemented by the drive is retrieved.  
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(Integer)}  
 * `0` if interface is not supported, otherwise an interface pointer is returned.  
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * {@link https://learn.microsoft.com/windows/win32/coreaudio/devicetopology-api|DeviceTopology API}
 * @example <caption></caption>  
 */
SoundGetInterface(IID [,Component:='', Device:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundGetName.htm|`SoundGetMute()`}  
 * Retrieves a mute setting of a sound device.  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, the master mute setting is used.
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(Boolean)}  
 * `1` for muted, `0` for unmuted.  
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found or component does not support this control type.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SoundSetMute.htm|SoundSetMute()}
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#ExSoundcard|Soundcard Analysis Script}
 * @example <caption></caption>  
 */
SoundGetMute([Component:='', Device:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundGetName.htm|`SoundGetName()`}  
 * Retrieves the name of a sound device or component.  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, the name of the device itself will be retrieved.  
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(String)}  
 * The name of the device or component.  
 * This value can be a blank string.  
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * @example <caption></caption>  
 */
SoundGetName([Component:='', Device:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundGetVolume.htm|`SoundGetVolume()`}  
 * Retrieves a volume setting of a sound device.  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, it defaults to the master volume setting.  
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(Float)}  
 * The current volume between `0.0` and `100.0`
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found or component does not support this control type.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SoundSetVolume.htm|SoundSetVolume()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#ExSoundcard|Soundcard Analysis Script}
 * @example <caption></caption>  
 */
SoundGetVolume([Component:='', Device:='']) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundPlay.htm|`SoundPlay()`}  
 * Plays a sound, video, or other supported file type.  
 * @param {(String)} Filename  
 * Path of the file to be played.  
 * If a full path isn't used, Filename is assumed to start in {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}.  
 * To produce system standard sounds, specify one of the following:
 * - `*-1` = Simple beep.  
 *   The internal speaker will beep if no sound card is found.  
 * - `*16` = Hand (Stop/Error) sound
 * - `*32` = Question sound
 * - `*48` = Exclamation sound
 * - `*64` = Information (Info) sound
 * @param {(Boolean|String)} [Wait]
 * - `1` `Wait` = The current thread waits until the file has finished playing.  
 * - `0` = The current thread immediately continues.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws Error - Thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SoundBeep.htm|SoundBeep()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions}
 * @example <caption></caption>  
 */
SoundPlay(Filename [,Wait:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundSetMute.htm|`SoundSetMute()`}  
 * Changes a mute setting of a sound device.  
 * @param {(Integer)} NewSetting
 * - `1` = Enable mute.  
 * - `0` = Disable mute.  
 * - `-1` = Toggle between current setting. Mute <-> Unmute.  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, it defaults to the master mute setting.  
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found or component does not support this control type.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SoundGetMute.htm|SoundGetMute()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#ExSoundcard|Soundcard Analysis Script}
 * @example <caption></caption>  
 */
SoundSetMute(NewSetting [,Component:='', Device:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SoundSetVolume.htm|`SoundSetVolume()`}  
 * Changes a volume setting of a sound device.  
 * @param {(Primitive)} NewSetting
 * - A number prefixed with a `+` increases the current volume by that amount. This must be a string.  
 * - A number prefixed with a `-` decreases the current volume by that amount.  
 * - A positive number sets the current volume to that number.  
 *   If over 100, 100 is used.  
 * @param {(String|Integer)} [Component]  
 * Specify the component's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#component|Component (Sound Functions)}.  
 * If omitted or empty string, it defaults to the master volume setting.  
 * @param {(String|Integer)} [Device]  
 * Specify the device's display name and/or index number.  
 * See {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#device|Device (Sound Functions)}.  
 * If omitted or empty string, the system's default device is retrieved.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws OSError - Thrown on failure other than TargetError.  
 * @throws TargetError - Device or component could not be found or component does not support this control type.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm|Sound Functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SoundGetMute.htm|SoundGetMute()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sound.htm#ExSoundcard|Soundcard Analysis Script}
 * @example <caption></caption>  
 */
SoundSetVolume(NewSetting [,Component:='', Device:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|`SplitPath()`}  
 * Splits up a file name or URL into its component parts.  
 * @param {(String)} Path  
 * A filename or URL to process.  
 * Filenames should use `\` path separators while URLs use `/`.  
 * If the path points to a subdirectory, that subdirectory becomes the "file" of the path.  
 * @param {(VarRef)} [OutName]  
 * A variable reference to receive the file name.  
 * For a URL, this is the file name or the last subdirectory if URL doesn't contain a file.  
 * @param {(VarRef)} [OutDir]  
 * A variable reference to receive the directory containing `OutName`.  
 * For a URL, this is the address up until the file or last subdirectory.  
 * @param {(VarRef)} [OutExt]  
 * A variable reference to receive the file's extenstion type.  
 * This is blank of the file lacks a defined extension.  
 * @param {(VarRef)} [OutNameNoExt]  
 * A variable reference to receive the Filename without the extension.  
 * @param {(VarRef)} [OutDrive]  
 * A variable reference to receive the drive of the file.  
 * For a URL, this is main domain without any included subdirectories.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/StrSplit.htm|StrSplit()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileExt|A_LoopFileExt}
 * @example <caption>Path and URL examples.</caption>  
 * url := 'https://www.autohotkey.com/download/2.0/AutoHotkey_2.0.10.zip'
 * SplitPath(url, &OutName, &OutDir, &OutExt, &OutNameNoX, &OutDrive)
 * MsgBox('OutName: ' OutName      ; AutoHotkey_2.0.10.zip
 *     '`nOutDir: ' OutDir         ; https://www.autohotkey.com/download/2.0
 *     '`nOutExt: ' OutExt         ; zip
 *     '`nOutNameNoX: ' OutNameNoX ; AutoHotkey_2.0.10
 *     '`nOutDrive: ' OutDrive     ; https://www.autohotkey.com
 * )
 * 
 * Path := 'C:\Program Files\AutoHotkey\UX\launcher.ahk'
 * SplitPath(path, &OutName, &OutDir, &OutExt, &OutNameNoX, &OutDrive)
 * MsgBox('OutName: ' OutName      ; launcher.ahk
 *     '`nOutDir: ' OutDir         ; C:\Program Files\AutoHotkey\UX
 *     '`nOutExt: ' OutExt         ; ahk
 *     '`nOutNameNoX: ' OutNameNoX ; launcher
 *     '`nOutDrive: ' OutDrive     ; C:
 * )
 */
SplitPath(Path [,&OutName, &OutDir, &OutExt, &OutNameNoExt, &OutDrive]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Sqrt|`Sqrt()`}  
 * Returns the square root of the specified number.  
 * @param {(Number)} Num  
 * A positive number.  
 * @returns {(Float)}  
 * The square root of `Num`.  
 * @throws ValueError - Number is negative
 * @example <caption>Square Root Examples.</caption>  
 * x := Sqrt(9)
 * MsgBox('value: ' x) ; 3.0
 * 
 * ; Square root of a negative:
 * num := -144
 * if (num < 0)
 *     ans := Sqrt(Abs(num)) 'i',
 * else ans := Sqrt(num)
 * MsgBox(ans) ; 12.0i
 */
Sqrt(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StatusBarGetText.htm|`StatusBarGetText()`}  
 * Retrieves the text from a standard status bar control.  
 * @param {(Integer)} [Section]  
 * The section number if status bar to get the text of.  
 * If omitted, it defaults to 1.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The text of the specified section.  
 * @throws TargetError - Target window could not be found or does not contain a standard status bar.  
 * @throws OSError - There was a problem sending SB_GETPARTS message  
 * @throws OSError - No reply was received within 2000 ms  
 * @throws OSError - Memory could not be allocated within the process that owns the status bar  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/StatusBarWait.htm|StatusBarWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
StatusBarGetText([Section:=1, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StatusBarWait.htm|`StatusBarWait()`}  
 * Waits until a window's status bar contains the specified string.  
 * @param {(String)} [BarText]  
 * Text to wait for in the specified section.  
 * If omitted or empty string, the function waits for the section to be blank.  
 * @param {(Number)} [Timeout]  
 * The max amount of seconds to wait.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @param {(Integer)} [Section]  
 * The section number if status bar to get the text of.  
 * If omitted, it defaults to 1.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(Integer)} [Interval]  
 * How often the status bar should be checked, in milliseconds.  
 * If omitted, it defaults to 50.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @throws TargetError - Target window could not be found or does not contain a standard status bar.  
 * @throws OSError - There was a problem sending SB_GETPARTS message  
 * @throws OSError - No reply was received within 2000 ms  
 * @throws OSError - Memory could not be allocated within the process that owns the status bar  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/StatusBarGetText.htm|StatusBarGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
StatusBarWait([BarText:='', Timeout:=unset, Section:=1, WinTitle:='', WinText:='', Interval:=50, NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrCompare.htm|`StrCompare()`}  
 * Compares two strings alphabetically.  
 * @param {(String)} String1  
 * First string to compare.  
 * @param {(String)} String2  
 * Second string to compare.  
 * @param {(String|Integer)} [CaseSense]
 * - `1` `On` = Case-sensitivity enabled.
 * - `0` `Off` = Case-sensitivity disabled.
 * - `Locale` = Comparison is case-sensitive based on current user's locale.  
 *   This can be anywhere from x1-x8 slower than `Off`.  
 * - `Logical` = Same as Locale, but digits are treated as numerical values rather than individual characters.  
 *   `A2` is considered less than `A10` because 2 is numerically less than 10.  
 * @returns {(Integer)}  
 * A number indicating how the two strings compared: 
 * Negative = Str1 comes before Str2 in lexicographical order.
 * `0` = Str1 and Str2 are equal.  
 * Positive = Str2 comes before Str1 in lexicographical order.
 * 
 * No other assumptions should be made from the returned value.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm|Sort()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VerCompare.htm|VerCompare()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm#callback|Sort callbacks}
 * @example <caption></caption>  
 * str1 := 'a2', str2 := 'a10'
 * ans1 := StrCompare(str1, str2)            ; 1
 * ans2 := StrCompare(str1, str2, 'Logical') ; -1
 * MsgBox('Normal: ' ans1 '`nLogical: ' ans2)
 */
StrCompare(String1, String2 [,CaseSense]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|`StrGet()`}  
 * Copies a string from a memory address or buffer, optionally converting it from a given code page.  
 * @param {(Integer|Buffer)} Source  
 * A memory address or a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|buffer-like} object (any object with a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property).  
 * @param {(Integer|String)} [Length]  
 * Specify the maximum number of {@link https://www.autohotkey.com/docs/v2/Concepts.htm#character|characters} to read.  
 * If omitted or if encoding is passed to the `Length` parameter, the string's full length is used.  
 * @param {(Integer|String)} [Encoding]  
 * Specify the source encoding.  
 * If omitted, the string is copied without any conversion.  
 * Otherwise, any of the {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm#Parameters|FileEncoding()} names.
 * - `CP0`: The system default ANSI code page.
 * - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).
 * - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.
 * - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).
 * - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.
 * - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 * - `nnn`: A numeric code page identifier.
 * 
 * Encoding can be passed to the `Length` parameter and the string's full length will be used for `Length`.  
 * @returns {(String)}  
 * The string retrieved from `Source`.  
 * @throws ValueError - An invalid parameter is detected
 * @throws OSError - Conversion could not be performed
 * @see {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#string-encoding|String Encoding} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object} |
 * {@link https://www.autohotkey.com/docs/v2/Compat.htm|Binary Compatibility}
 * @example <caption></caption>  
 */
StrGet(Source [,Length:=unset, Encoding:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|`StrLen()`}  
 * Retrieves the count of how many characters are in a string.  
 * @param {(String)} Str  
 * String to get the length of.  
 * @returns {(Integer)}  
 * The number of characters in the string.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Trim.htm|Trim()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrLower()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrUpper()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|StrPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|StrGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|StrReplace()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrSplit.htm|StrSplit()}
 * @example <caption></caption>  
 */
StrLen(Str) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|`StrLower()`}  
 * Converts a string to lowercase.  
 * @param {(String)} Str  
 * The string to convert.  
 * @returns {(String)}  
 * A string converted to lowercase.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|StrLen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|StrReplace()}
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#upper|IsUpper()}
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#lower|IsLower()}
 * @example <caption></caption>  
 */
StrLower(Str) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrPtr.htm|`StrPtr()`}  
 * Returns the current memory address of a string.  
 * @param {(String)} Str  
 * A variable containing a string.  
 * @returns {(Integer)}  
 * The current memory address of the string.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|NumPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object}
 * @example <caption></caption>  
 */
StrPtr(Str) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrPut.htm|`StrPut()`}  
 * Copy a string to a memory address and can convert encoding.  
 * This function can also be used to calculate the required buffer size for a string.  
 * @param {(String)} Str  
 * Any string. If a number is given, its converted to a string first.  
 * The string is assumed to be in {@link https://www.autohotkey.com/docs/v2/Concepts.htm#string-encoding|native encoding}.  
 * @param {(Integer|Buffer)} Target  
 * A memory address or a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|buffer-like} object (any object with a {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Ptr|Ptr} and {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm#Size|Size} property).  
 * If omitted, this parameter can be the string's encoding tyep and will return the required buffer size for `Str`.  
 * @param {(Integer)} [Length]  
 * The maximum number of {@link https://www.autohotkey.com/docs/v2/Concepts.htm#character|characters} to write, including the {@link https://www.autohotkey.com/docs/v2/Concepts.htm#null-termination|null-terminator} if required.  
 * Length should be the size of the buffer in characters, not the legnth of `Str` or a substring.  
 * @param {(Integer|String)} [Encoding]  
 * Specify the encoding type.  
 * If omitted, the string is not converted before being copied to `Target` or measured for size.  
 * Otherwise, any of the {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm#Parameters|FileEncoding()} names.  
 * - `CP0`: The system default ANSI code page.
 * - `UTF-8`: Unicode UTF-8 (equivalent to CP65001).
 * - `UTF-8-RAW`: UTF-8 but no byte order mark is written when a new file is created.
 * - `UTF-16`: Unicode UTF-16 with little endian byte order (CP1200).
 * - `UTF-16-RAW`: UTF-16 but no byte order mark is written when a new file is created.
 * - `CPnnn`: A code page with numeric identifier nnn. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.  
 * - `nnn`: A numeric code page identifier.
 * @returns {(Integer)}  
 * If `Target` is used, the function returns number of bytes written.  
 * A null terminator is written if there is space to add it.  
 * If `Target` is omitted, the function returns the bytes requires to make a buffer for `Str`.  
 * @throws Error - Length is zero or length is smaller than required size after conversion
 * @throws Error - Length is larger than buffer size, even if string would fit in the buffer  
 * @throws ValueError - An invalid parameter is detected
 * @throws OSError - Conversion could not be performed
 * @see {@link https://www.autohotkey.com/docs/v2/lib/StrGet.htm|StrGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|VarSetStrCapacity()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object} |
 * {@link https://www.autohotkey.com/docs/v2/Compat.htm|Binary Compatibility} |
 * {@link https://www.autohotkey.com/docs/v2/Concepts.htm#string-encoding|String Encoding}
 * @example <caption></caption>  
 */
StrPut(Str [,Target, Length, Encoding]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|`StrReplace()`}  
 * Replaces the specified substring with a new string.  
 * StrReplace() should be whenever possible over RegEx as it peforms **much** faster.  
 * @param {(String)} Haystack  
 * The string with contents to be replaced
 * @param {(String)} Needle  
 * The specific string to find inside the `Haystack`  
 * @param {(String)} [ReplaceText]  
 * The replacement text for the found `Needle`.  
 * If this parameter is omitted or is an empty string, the found text is removed.  
 * @param {(String|Integer)} [CaseSense] The case-sensitivity setting for this replacement.  
 * - `1` `On` = The search is case-sensitive. `a` does not equal `A`
 * - `0` `Off` = The search is not case-sensitive. `a` and `A` are equal.  
 * - `Locale` = Case-sensitivity follows the current user's locale.  
 *   This can be anywhere from x1-x8 slower than `Off`.  
 * @param {(VarRef)} [OutputVarCount]  
 * A variable reference to receive the number of replacements mades.  
 * `0` if no replacements were made.  
 * @param {(Integer)} [Limit]  
 * The max amount of replacements to make before stopping. All remaining text remains unchanged.  
 * If omitted `-1` is used. `-1` sets replacement to 'All'.  
 * @returns {(String)}  
 * The `Haystack` after replacements are made.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegExReplace.htm|RegExReplace()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|StrLen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrLower()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrUpper()}
 * @example <caption></caption>  
 */
StrReplace(Haystack, Needle [,ReplaceText:='', CaseSense:=0, &OutputVarCount, Limit:=-1]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrSplit.htm|`StrSplit()`}  
 * Separates a string into an array of substrings using the specified delimiters.  
 * @param {(String)} Str  
 * The string to split up.  
 * @param {(String|Array)} [Delimiters]  
 * The character that identifies where each split is to occur. 
 * If omitted, the string is split up into each individual character.  
 * If an array of characters is passed in, each character is used a delimiter once.  
 * When the first delimeter is reached, the substring is saved and the delimeter is updated to the next character in the array.  
 * When the last array character is reached, it restarts at the beginning of the array.  
 * @param {(String)} [OmitChars]  
 * Specify a list of characters to trim from the beginning and end of each substring.  
 * If `Delimeters` is an empty string or omitted, `OmitChars` removes all matching characters from the returned array.  
 * If omitted or an empty string, no characters are excluded.  
 * Common uses for this parameter:  
 * - Trimming whitespace from around each substring:
 * 
 *       StrSplit(str, ',', ' `t') ; Removes surrounding tabs and spaces
 * - Dealing with the uncertaining of `` `r`n `` when the delimeter is newline `` `n ``.  
 * 
 *       StrSplit(str, '`n', '`r') ; Split by newline and remove carriage returns
 * @param {(Integer)} [MaxArrSize]  
 * Specify the maximum size of the return array 
 * If a non-zero number is used, the string continues to be split until the last element is reached.  
 * At that point, any remaining text is put in the last element of the array.  
 * If omitted, `-1` is used indicating no array size limit.  
 * @returns {(Array)}  
 * An array of the substrings from splitting `Str`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm|Sort()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SplitPath.htm|SplitPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|StrLen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrLower()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|StrUpper()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|StrReplace()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/LoopParse.htm|Loop-Parse}
 * @example <caption></caption>  
 * txt := '1 2!3 4?5 6.7 8!9 10?11 12'
 * arr := ['!','?','.']
 * str := ''
 * for i, v in StrSplit(txt, arr)
 *     str .= 'Group ' i ': ' v '`n'
 * MsgBox(str)
 */
StrSplit(Str [,Delimiters:='', OmitChars:='', MaxArrSize:=-1]) => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|`StrTitle()`}  
 * Converts a string to Title Case.  
 * The First Letter Of Each Word Is Capitalized.  
 * @param {(String)} Str  
 * The string to convert.  
 * @returns {(String)}  
 * A string converted to Title Case.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|StrLen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|StrReplace()}
 * @example <caption></caption>  
 */
StrTitle(Str) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/StrLower.htm|`StrUpper()`}  
 * Converts a string to UPPERCASE.  
 * @param {(String)} Str  
 * The string to convert.  
 * @returns {(String)}  
 * A string converted to UPPERCASE.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|SubStr()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrLen.htm|StrLen()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrReplace.htm|StrReplace()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#upper|IsUpper()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm#lower|IsLower()}
 * @example <caption></caption>  
 */
StrUpper(Str) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SubStr.htm|`SubStr()`}  
 * Retrieves one or more characters from the specified position in a string.  
 * @param {(String)} Str  
 * The string to get a portion of.  
 * @param {(Integer)} StartPos  
 * The character position in the string to start the search at.  
 * - Positive Number = Left to right. 1 = first char, 2 = second, ...
 *   If the number exceeds the length of `Str`, the match starts after the last char.  
 *   This will result in an emtpy substring being returned.  
 * - Negative Number = Right to left. -1 = last char, -2 = second from last, ...
 *   If a negative number exceeds the length of `Str`, the first char is used.  
 * @param {(Integer)} [Length] 
 * If positive, this is the number of characters to capture after `StartPos`.   
 * If negative, that's the number of characters from the end to stop capturing at. This can be though of trimming characters from the end.  
 * If omitted, all characters from `StartPos` to the end are captured.  
 * @returns {(String)}  
 * The captured substring.  
 * If `Length` is a negative number equal to or greater than the substring's length, an empty string is returned.  
 * If position is `0` or greater than string length, an empty string is returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/RegExMatch.htm|RegExMatch()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InStr.htm|InStr()}
 * @example <caption></caption>  
 */
SubStr(Str, StartPos [,Length:=unset]) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|`Suspend()`}  
 * Disables or enables all or selected hotkeys and hotstrings.  
 * @param {(Integer)} [NewState] New suspend state.  
 * - `1` = Suspend all hotkeys and hotstrings.  
 * - `0` = Enable all hotkeys and hotstrings.  
 * - `-1` = Toggles suspend state. On <-> Off
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Pause.htm|Pause()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ExitApp.htm|ExitApp()} |
 * {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm|Hotkeys::} |
 * {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm|::Hotstrings::} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_SuspendExempt.htm|#SuspendExempt}
 * @example <caption></caption>  
 */
Suspend([NewState:=-1]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|`SysGet()`}  
 * Retrieves dimensions of system objects, and other system properties.  
 * @param {(Integer)} Property  
 * A {@link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics|system property}. 
 * **{@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm#Commonly_Used|Common Properties}**
 * - `56` = SM_ARRANGE:  
 *   Flags specifying how the system arranged minimized windows.  
 * - `67` = SM_CLEANBOOT:  
 *   Specifies how the system was started:
 *   - `0` = Normal boot
 *   - `1` = Fail-safe boot
 *   - `2` = Fail-safe with network boot  
 * - `5` `6` = SM_CXBORDER, SM_CYBORDER:  
 *   Width and height of a window border, in pixels.
 * - `13` `14` = SM_CXCURSOR, SM_CYCURSOR:  
 *   Width and height of a cursor, in pixels. The system cannot create cursors of other sizes.  
 * - `36` `37` = SM_CXDOUBLECLK, SM_CYDOUBLECLK:  
 *   Width and height of the rectangle, in pixels, that defines the area a double-click can happen in.  
 * - `68` `69` = SM_CXDRAG, SM_CYDRAG:  
 *   Width and height of a rectangle, in pixels, that allows for limited mouse movement before a drag operation begins.  
 * - `45` `46` = SM_CXEDGE, SM_CYEDGE:  
 *   Dimensions of a 3-D border, in pixels.  
 *   These are the 3-D counterparts of SM_CXBORDER and SM_CYBORDER.  
 * - `7` `8 = SM_CXFIXEDFRAME, SM_CYFIXEDFRAME:  
 *   Thickness, in pixels, of the frame around a window that has the caption style but is not sizable.  
 * - `83` `84 = SM_CXFOCUSBORDER, SM_CYFOCUSBORDER:  
 *   Width of the left and right edges and height of the top and bottom edges of a control's focus rectangle. In pixels.  
 * - `21` `3 = SM_CXHSCROLL, SM_CYHSCROLL:  
 *   Width of the arrow bitmap on a horizontal scroll bar and height of a horizontal scroll bar. In pixels.  
 * - `10` = SM_CXHTHUMB:  
 *   Width of the thumb box in a horizontal scroll bar, in pixels.  
 * - `11` `12` = SM_CXICON, SM_CYICON:  
 *   Default width and height of an icon, in pixels.  
 * - `38` `39` = SM_CXICONSPACING, SM_CYICONSPACING:  
 *   Dimensions of a grid cell for items in large icon view, in pixels.  
 * - `71` `72` = SM_CXMENUCHECK, SM_CYMENUCHECK:  
 *   Dimensions of the default menu check-mark bitmap, in pixels.  
 * - `54` `55` = SM_CXMENUSIZE, SM_CYMENUSIZE:  
 *   Dimensions of menu bar buttons in pixels.  
 * - `47` `48` = SM_CXMINSPACING, SM_CYMINSPACING:  
 *   Dimensions of a grid cell for a minimized window, in pixels.  
 *   Each minimized window fits into a rectangle this size when arranged.  
 * - `30` `31` = SM_CXSIZE, SM_CYSIZE:  
 *   Width and height of a button in a window's caption or title bar, in pixels.  
 * - `32` `33` = SM_CXSIZEFRAME, SM_CYSIZEFRAME:  
 *   Thickness of the sizing border around the perimeter of a window that can be resized, in pixels.  
 * - `49` `50` = SM_CXSMICON, SM_CYSMICON:  
 *   Recommended dimensions of a small icon, in pixels.
 * - `52` `53` = SM_CXSMSIZE, SM_CYSMSIZE:  
 *   Dimensions of small caption buttons, in pixels.  
 * - `2` `20` = SM_CXVSCROLL, SM_CYVSCROLL:  
 *   Width of a vertical scroll bar and height of the arrow bitmap on a vertical scroll bar, in pixels.  
 * - `4` = SM_CYCAPTION:  
 *   Height of a caption area, in pixels.  
 * - `18` = SM_CYKANJIWINDOW:  
 *   For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.  
 * - `15` = SM_CYMENU:  
 *   Height of a single-line menu bar, in pixels.  
 * - `51` = SM_CYSMCAPTION:  
 *   Height of a small caption, in pixels.  
 * - `9` = SM_CYVTHUMB:  
 *   Height of the thumb box in a vertical scroll bar, in pixels.  
 * - `42` = SM_DBCSENABLED:  
 *   Nonzero if User32.dll supports DBCS; zero otherwise.  
 * - `22` = SM_DEBUG:  
 *   Nonzero if the debug version of User.exe is installed; zero otherwise.  
 * - `82` = SM_IMMENABLED:  
 *   Nonzero if Input Method Manager/Input Method Editor features are enabled; zero otherwise.
 * - `40` = SM_MENUDROPALIGNMENT:  
 *   Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; zero if the menus are left-aligned.  
 * - `74` = SM_MIDEASTENABLED:  
 *   Nonzero if the system is enabled for Hebrew and Arabic languages, zero if not.  
 * - `41` = SM_PENWINDOWS:  
 *   Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.  
 * - `44` = SM_SECURE:  
 *   Nonzero if security is present; zero otherwise.  
 * - `81` = SM_SAMEDISPLAYFORMAT:  
 *   Nonzero if all the display monitors have the same color format, zero otherwise. 
 * 
 * Also {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm#Not_Commonly_Used|Uncommon properties}.  
 * @returns {(Integer)}  
 * The value gotten from the specified Property.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|Monitor functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm#Commonly_Used|Common Properties} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm#Not_Commonly_Used|Uncommon properties}
 * @example <caption></caption>  
 */
SysGet(Property) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/SysGetIPAddresses.htm|`SysGetIPAddresses()`}  
 * Returns an array of the system's IPv4 addresses.  
 * Currently, IPv6 is not supported.  
 * @returns {(Array)}  
 * An array where each index is an IPv4 addess.  
 * @see {@link https://www.autohotkey.com/docs/v2/Variables.htm#ComputerName|A_ComputerName}
 * @example <caption></caption>  
 */
SysGetIPAddresses() => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Math.htm#Tan|`Tan()`}  
 * Returns the trigonometric tangent of the number.  
 * Convert radians to degrees: `Value * 180/pi` (180/pi = ~57.29578) 
 * Convert degrees to radians: `Value * pi/180` (pi/180 = ~0.01745329252)
 * @param {(Number)} Num  
 * The number to get the tangent value of.  
 * Must be expressed in radians.  
 * @returns {(Float)}  
 * Tangent of `Num`.  
 * @example <caption>Tangent Example.</caption>  
 * Tan(1.2) => 2.572152
 */
Tan(Num) => Float

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm|`Thread()`}  
 * Sets the priority or interruptibility of threads. It can also temporarily disable all timers.  
 * @param {(String)} Option  
 * A thread option to adjust:
 * - {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm#NoTimers|NoTimers} = Sets when a thread can be interruptable by a {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|timer}.  
 *   By default, this is setting is false.  
 *   Timers become interruptable when:   
 *   - The {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread} ends
 *   - `Thread('NoTimers', false)` is called
 *   - It is interrupted by another thread that allows timers.  
 * 
 * - {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm#Priority|Priority} = Change the priority level of the current thread.  
 *   The function {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} is generally preferred over this due to its ability to buffer events.  
 *   Calling this only affects the current thread.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/Thread.htm#Interrupt|Interrupt} = Change the duration of the interruptibility for newly launched threads.  
 *   By default, every new launched thread is uninterruptible for 15 milliseconds or 1000 lines of the script have executed (whichever comes first).  
 *   This is a global setting and calling this affects all subsequent threads.  
 * @param {(Integer)} [NewSetting]  
 * Dependent on the option in use:
 * - `NoTimers`  
 *   If omitted, `1` is used.  
 *   - `1` = Timers cannot interrupt this thread.  
 *   - `0` = Timers can interrupt this thread.  
 * - `Priority`  
 *   Set the priority level to a number between `-2147483648` and `2147483647`.  
 *   This does not affect other threads.  
 * - `Interrupt`  
 *   Set the duration of the interruptibility in milliseconds.  
 *   Default is 15.  
 *   - `0` = Newly launched thread is immediately interruptable.  
 *   - `-1` = The thread cannot be interrupted.  
 *   - Number = The number of milliseconds the thread is uninterruptable.  
 *   - Omit = Setting is not changed. Used when setting LineCount only.  
 * @param {(Integer)} [LineCount]  
 * Only useable with the `Interrupt` option.  
 *   - `0` = Newly launched thread is immediately interruptable.  
 *   - `-1` = The thread cannot be interrupted.  
 *   - Number = Set the amount of lines that can execute before the thread is interruptable.  
 *   - Omit = Setting is not changed. Used when setting `NewSetting` duration only.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|Critical()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Hotkey.htm|Hotkey()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|SetTimer()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|Threads} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions}
 * @example <caption></caption>  
 */
Thread(Option [,NewSetting, LineCount]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|`ToolTip()`}  
 * Shows an always-on-top window anywhere on the screen.  
 * @param {(String)} [Text]  
 * The text to display in the tooltip.  
 * If omitted, the tooltip is hidden.  
 * @param {(Integer)} [X]  
 * The X offset of the tooltip relative to the mouse cursor.  
 * @param {(Integer)} [Y]  
 * The Y offset of the tooltip relative to the mouse cursor.  
 * @param {(Integer)} [ID]  
 * The ID of the tooltip to work with.  
 * This can be `1` through `20` and defaults to `1` if omitted.  
 * @returns {(Integer)}  
 * If the tooltip is being shown or updated, the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} is returned.  
 * This handle can be used to move the tooltip as well as use {@link https://learn.microsoft.com/windows/win32/controls/bumper-tooltip-control-reference-messages|tooltip control messages}.  
 * `0` is returned when the tooltip his destroyed.  
 * This happens when `Text` is an empty string or ToolTip() is called wth no parameters.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/CoordMode.htm|CoordMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/TrayTip.htm|TrayTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUI} |
 * {@link https://learn.microsoft.com/windows/win32/controls/bumper-tooltip-control-reference-messages|Tooltip control messages}
 * @example <caption></caption>  
 */
ToolTip([Text:='', X:=0, Y:=0, ID:=1]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/TraySetIcon.htm|`TraySetIcon()`}  
 * Changes the script's {@link https://www.autohotkey.com/docs/v2/Program.htm#tray-icon|tray icon} (also used by {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|GUI} and dialog windows).  
 * @param {(String)} [FileName]  
 * The path to an icon or image. A {@link https://www.autohotkey.com/docs/v2/misc/ImageHandles.htm|bitmap or icon handle} can be used.  
 * `*` restores the script's default icon.  
 * If omitted, the current tray icon is used. Only applicable when working with `Freeze`.  
 * Supported types: `ICO`, `CUR`, `ANI`, `EXE`, `DLL`, `CPL`, `SCR`, and `Other icon resources`  
 * @param {(Integer)} [IconNumber]  
 * Specify the number of the icon group to use.  
 * If negative, the number is used as a resource ID for an icon inside an executable.  
 * If `FileName` is omitted, `IconNumber` is ignored.  
 * @param {(Boolean)} [Freeze]  
 * Set tray icon's freeze state.  
 * - `1` = Icon is frozen. Things like {@link https://www.autohotkey.com/docs/v2/lib/Pause.htm|Pause()} and {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|Suspend()} will not change the icon.  
 * - `0` = Icon is unfrozen and can be changed.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/TrayTip.htm|TrayTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_NoTrayIcon.htm|#NoTrayIcon} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object}
 * @example <caption></caption>  
 */
TraySetIcon([FileName:=unset, IconNumber:=1, Freeze:=unset]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/TrayTip.htm|`TrayTip()`}  
 * Shows a toast notification near the {@link https://www.autohotkey.com/docs/v2/Program.htm#tray-icon|tray icon}. For pre-Windows 10, this is a balloon notification.  
 * @param {(String)} [Text]  
 * The message to display. There is a display limit of 256 characters.  
 * Linefeed `` `n `` and carriage return `` `r `` can be used to make new lines.  
 * If omitted or an empty string, no text is shown and the traytip becomes shorter.  
 * @param {(String)} [Title]  
 * The title of the TrayTip. There is a display limit of 75 characters.  
 * If omitted or an empty string, no text is shown and the traytip becomes shorter.  
 * @param {(String|Integer)} [Options]  
 * Zero or more of the following options.  
 * If the string version is used, separate items with a space or tab.  
 * If a dec or hex is used, use the sum of the numbers for multiple options.  
 * Icons will not show if a TrayTip lacks a title.  
 * Defaults to `0`.  
 * | -Function-        | -Dec- | -Hex-  | -String- |
 * | ---:              | :--:  | :--:   | :---     |
 * | `No icon`         | `0`   | `0x0`  | `N/A`    |
 * | `Info icon`       | `1`   | `0x1`  | `IconI`  |
 * | `Warning icon`    | `2`   | `0x2`  | `Icon!`  |
 * | `Error icon`      | `3`   | `0x3`  | `IconX`  |
 * | `Tray icon`       | `4`   | `0x4`  | `N/A`    |
 * | `No notify sound` | `16`  | `0x10` | `Mute`   |
 * | `Use large icon`  | `32`  | `0x20` | `N/A`    |
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ToolTip.htm|ToolTip()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTimer.htm|SetTimer()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} |
 * {@link https://www.autohotkey.com/docs/v2/Scripts.htm#continuation|Continuation Section}
 * @example <caption></caption>  
 */
TrayTip([Text:='', Title:='', Options:=0]) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Trim.htm|`Trim()`}  
 * Trims characters from the beginning and end of a string.  
 * @param {(String)} Str  
 * The string to trim.  
 * @param {(String)} [OmitChars]  
 * The characters to trim off.  
 * These characters are case-sensitive.  
 * If omitted, space and tab are used.  
 * @returns {(String)}  
 * The string after being trimmed.  
 * @example <caption></caption>  
 */
Trim(Str [,OmitChars:=' `t']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/Type.htm|`Type()`}  
 * Returns the class name of a value.  
 * @param {(Any)} Value  
 * The value to check.  
 * @returns {(String)}  
 * The class type of the given value.  
 * @see {@link https://www.autohotkey.com/docs/v2/Concepts.htm#values|Values} |
 * {@link https://www.autohotkey.com/docs/v2/Language.htm#expressions|Expressions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Integer.htm|Integer} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Float.htm|Float} |
 * {@link https://www.autohotkey.com/docs/v2/lib/String.htm|String} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Is.htm|Is functions}
 * @example <caption></caption>  
 */
Type(Value) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/VarSetStrCapacity.htm|`VarSetStrCapacity()`}  
 * Enlarges a variable's holding capacity or frees its memory.  
 * This is not normally needed, but may be used with {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()}, {@link https://www.autohotkey.com/docs/v2/lib/SendMessage.htm|SendMessage()}, or to optimize repeated concatenation.  
 * @param {(VarRef)} TargetVar  
 * A variable reference to a string to set the capacity of.  
 * This is not limited to string variables. Dynamic variables like `arr%i%` and {@link https://www.autohotkey.com/docs/v2/Functions.htm#ByRef|function ByRef parameters} can be used.  
 * @param {(Integer)} [Capacity]  
 * Specify the number of characters the variable should be able to hold, not including the null terminator.  
 * For performance reasons, variables are not shurnk in size when `Capacity` is less than the current variable size.  
 * - `0` = Frees the memory of the variable
 * - `-1` = Update the variable's internal string length based on its current contents.  
 *   Useful when something outside of AHK alters the string's contents.  
 * @returns {(Integer)}  
 * The number of characters that `TargetVar` can now hold.  
 * This number may return greater than the `RequestedCapactiy`.  
 * If no `Capacity` is provided, the current capacity of `TargetVar` is returned.  
 * @throws TargetError - `TargetVar` is not a valid variable reference  
 * @throws ValueError - `Capacity` is less than `-1`  
 * @throws ValueError - `Capacity` is greater than the available memory  
 * @throws MemoryError - The requested capacity is too larget to fit within any single contiguous memory block  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/NumPut.htm|NumPut()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm|DllCall()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Buffer.htm|Buffer object}
 * @example <caption></caption>  
 */
VarSetStrCapacity(&TargetVar [,Capacity:=unset]) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/VerCompare.htm|`VerCompare()`}  
 * Compares two version strings.  
 * Each version is delimited into groups by the version dots.  
 * Each group is compared numerically, not by character codes: `v1.01` = `v1.1`  
 * A missing group is `0`: `1.37.0.0` = `1.37`  
 * Pre-releases are considered lower than standard versions: `2.0` > `2.0-alpha.1`
 * @param {(String)} VersionA  
 * A string containing a version.  
 * Can optionally start with one of these operators: `<` `<=` `>` `>=` `=`  
 * These operators do not affect the comparison: `2.0` = `>2.0` = `<2.0`
 * @param {(String)} VersionB  
 * A string containing a version to compare against `VersionA`  
 * Can optionally start with one of these operators: `<` `<=` `>` `>=` `=`  
 * These operators do not affect the comparison: `2.0` = `>2.0` = `<2.0`
 * @returns {(Integer)}  
 * An integer representing the relationship between the two versions:  
 * - Positive Integer = `VersionA` is greater than `VersionB`
 * - `0` = Both versions are considered equals
 * - Negative Integer = `VersionB` is greater than `VersionA`
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Sort.htm#callback|Sort() callbacks} |
 * {@link https://www.autohotkey.com/docs/v2/lib/StrCompare.htm|StrCompare()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_Requires.htm|#Requires}
 * @example <caption></caption>  
 */
VerCompare(VersionA, VersionB) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|`WinActivate()`}  
 * Activates the specified window.  
 * This will automatically restore a minimized window before activating it.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinActivateBottom.htm|WinActivateBottom()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinClose.htm|WinClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_WinActivateForce.htm|#WinActivateForce}
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinActivate([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinActivateBottom.htm|`WinActivateBottom()`}  
 * Activates the bottommost matching window rather than the topmost.  
 * Simliar to {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_WinActivateForce.htm|#WinActivateForce}
 * @example <caption></caption>  
 */
WinActivateBottom([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|`WinActive()`}  
 * Checks if the specified window is active and returns its unique ID (HWND).  
 * On success, this function sets {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}.
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|unique ID (HWND)} if the active window matches the specified criteria, otherwise `0`.
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf}
 * @example <caption></caption>  
 * ; Quickly get active window's ID
 * id := WinActive('A')
 */
WinActive([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinClose.htm|`WinClose()`}  
 * Closes the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [SecToWait]  
 * The number of seconds to wait for the window to close.  
 * If omitted, the function does not wait.  
 * When the wait time is up, the script continues regardless of successful closing.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * No exception is thrown when a window is found but cannot be closed  
 * Use {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} or {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()}  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinKill.htm|WinKill()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ProcessClose.htm|ProcessClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupActivate.htm|GroupActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinClose([WinTitle:='', WinText:='', SecToWait:=unset, NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|`WinExist()`}  
 * Checks if the specified window exists and returns the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|unique ID (HWND)} of the first matching window.  
 * On success, this function sets {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}.
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|unique ID (HWND)} of the first matching window, otherwise `0`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ProcessExist.htm|ProcessExist()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActivate.htm|WinActivate()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/_HotIf.htm|#HotIf} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinExist([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|`WinGetClass()`}  
 * Retrieves the specified window's class name.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|class name} of the specified window.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The class name could not be retrieved  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetClass([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetClientPos.htm|`WinGetClientPos()`}  
 * Retrieves the position and size of the specified window's client area.  
 * Systems with multiple screens with different DPI settings may return different sizes/positions than expected due to {@link https://www.autohotkey.com/docs/v2/misc/DPIScaling.htm|OS DPI scaling}.
 * @param {(VarRef)} [OutX]  
 * A reference to a variable to recieve the X coordinate of the window.  
 * The point references the upper left corner of the client window.  
 * The client area is the main part of the application and excludes the title bar and window border.  
 * @param {(VarRef)} [OutY]  
 * A reference to a variable to recieve the Y coordinate of the window.  
 * The point references the upper left corner of the client window.  
 * The client area is the main part of the application and excludes the title bar and window border.  
 * @param {(VarRef)} [OutWidth]  
 * A reference to a variable to recieve the Width of the client area in pixels.  
 * @param {(VarRef)} [OutHeight]  
 * A reference to a variable to recieve the Height of the client area in pixels.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetPos.htm|ControlGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetClientPos([&OutX, &OutY, &OutWidth, &OutHeight, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetControls.htm|`WinGetControls()`}  
 * Returns the control names for all controls in the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Array)}  
 * An array containing the {@link https://www.autohotkey.com/docs/v2/lib/GuiControl.htm#ClassNN|ClassNN} of every control.  
 * The order is based on the control's z-order which is usually the order they're declared and the order of focus when tabbing.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetControlsHwnd.htm|WinGetControlsHwnd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetControls([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetControlsHwnd.htm|`WinGetControlsHwnd()`}  
 * Returns the unique ID numbers for all controls in the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Array)}  
 * An array containing the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} of every control.  
 * The order is based on the control's z-order which is usually the order they're declared and the order of focus when tabbing.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetControls.htm|WinGetControls()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetControlsHwnd([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetCount.htm|`WinGetCount()`}  
 * Returns the number of existing windows that match the specified criteria.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The number of existing windows that match the specified criteria, otherwise `0`.
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetList.htm|WinGetList()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetCount([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|`WinGetID()`}  
 * Returns the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|unique ID number} of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} of the specified window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetIDLast.htm|WinGetIDLast()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetHwnd.htm|ControlGetHwnd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Hwnd|Gui.Hwnd} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetID([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetIDLast.htm|`WinGetIDLast()`}  
 * Returns the unique ID number of the last/bottommost window if there is more than one match.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} of the bottommost (last) window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetHwnd.htm|ControlGetHwnd()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#Hwnd|Gui.Hwnd} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetIDLast([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetList.htm|`WinGetList()`}  
 * Returns the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|unique ID numbers} of all existing windows that match the specified criteria.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Array)}  
 * An array containing the {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|window handle (HWND)} of every existing window.  
 * The order of windows is from topmost to bottommost (z-order).  
 * If no windows are matched, the array is empty.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetCount.htm|WinGetCount()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetList([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetMinMax.htm|`WinGetMinMax()`}  
 * Returns the state whether the specified window is maximized or minimized.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * A number idicating the state of the window:  
 * - `1` = Window is maximized  
 *   Use {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} to revert from maximize.  
 * - `-1` = Window is minimized  
 *   Use {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} to revert from minimize.  
 * - `0` = Window is normal (not minimized or maximized)
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMaximize.htm|WinMaximize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetMinMax([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|`WinGetPID()`}  
 * Returns the Process ID number of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|Process ID (PID)} of the specified window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetPID([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|`WinGetPos()`}  
 * Retrieves the position and size of the specified window.  
 * Systems with multiple screens with different DPI settings may return different sizes/positions than expected due to {@link https://www.autohotkey.com/docs/v2/misc/DPIScaling.htm|OS DPI scaling}.  
 * @param {(VarRef)} [OutX]  
 * A reference to a variable to recieve the X coordinate of the window.  
 * The point references the upper left corner of the window.  
 * @param {(VarRef)} [OutY]  
 * A reference to a variable to recieve the Y coordinate of the window.  
 * The point references the upper left corner of the window.  
 * @param {(VarRef)} [OutWidth]  
 * A reference to a variable to recieve the Width of the window in pixels.  
 * @param {(VarRef)} [OutHeight]  
 * A reference to a variable to recieve the Height of the window in pixels.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClientPos.htm|WinGetClientPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetPos.htm|ControlGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()}
 * @example <caption></caption>  
 */
WinGetPos([&OutX, &OutY, &OutWidth, &OutHeight, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|`WinGetProcessName()`}  
 * Returns the name of the process that owns the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The process name that owns the specified window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetProcessName([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|`WinGetProcessPath()`}  
 * Returns the full path and name of the process that owns the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @returns {(String)}  
 * The full path of the process that owns the specified window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Process.htm|Process functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetProcessPath([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|`WinGetStyle()`}  
 * Returns the style of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|style} of the specified window.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The class name could not be retrieved  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetStyle([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|`WinGetExStyle()`}  
 * Returns the extended style of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|extended style} of the specified window.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|WinSetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetStyle.htm|ControlGetExStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetExStyle([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|`WinGetText()`}  
 * Retrieves the text from the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The text of the specified window.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - There was a problem retrieving the window's text  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetText([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|`WinGetTitle()`}  
 * Retrieves the title of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The title of the specified window.  
 * An empty string is returned if no matching window is found.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetTitle.htm|WinSetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetTitle([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetTransColor.htm|`WinGetTransColor()`}  
 * Returns the color that is marked transparent in the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * The six-digit RGB color marked as transparent by the target window.  
 * The number includes a hex prefix: `0x0099FF`  
 * An empty string is returned if:
 * - No window matches
 * - No transparency is set
 * - A window has been altered (minimized/resized/restored) since being made transparent  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|WinSetTransColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTransparent.htm|WinGetTransparent()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetTransColor([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinGetTransparent.htm|`WinGetTransparent()`}  
 * Returns the degree of transparency of the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer|String)}  
 * The level of window transparency from `0` (invisible) to `255` (opaque).  
 * An empty string is returned if:
 * - No window matches
 * - No transparency is set
 * - A window has been altered (minimized/resized/restored) since being made transparent  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|WinSetTransparent()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTransColor.htm|WinGetTransColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinGetTransparent([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinHide.htm|`WinHide()`}  
 * Hides the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinShow.htm|WinShow()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinHide([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinKill.htm|`WinKill()`}  
 * Forces the specified window to close.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * No exception is thrown when a window is found but cannot be closed  
 * Use {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} or {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()}  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ProcessClose.htm|ProcessClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinClose.htm|WinClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinKill([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMaximize.htm|`WinMaximize()`}  
 * Enlarges the specified window to its maximum size.  
 * {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} can remove the maximize state and return it to prior size and position.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinMaximize([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|`WinMinimize()`}  
 * Collapses the specified window into a button on the task bar.  
 * {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} can remove the maximize state and return it to prior size and position.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|WinRestore()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMaximize.htm|WinMaximize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMinimizeAll.htm|WinMinimizeAll()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinMinimize([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMinimizeAll.htm|`WinMinimizeAll()`}  
 * Minimizes all windows.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}
 * @example <caption></caption>  
 * WinMinimizeAll()
 * Sleep(1000)
 * WinMinimizeAllUndo()
 */
WinMinimizeAll() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMinimizeAll.htm|`WinMinimizeAllUndo()`}  
 * Unminimizes all windows.  
 * @returns {(String)}  
 * An empty string is always returned.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm|GroupAdd()}
 * @example <caption></caption>  
 * WinMinimizeAll()
 * Sleep(1000)
 * WinMinimizeAllUndo()
 */
WinMinimizeAllUndo() => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|`WinMove()`}  
 * Changes the position and/or size of the specified window.  
 * Systems with multiple screens with different DPI settings may return different sizes/positions than expected due to {@link https://www.autohotkey.com/docs/v2/misc/DPIScaling.htm|OS DPI scaling}.  
 * @param {(Integer)} [X]  
 * The new x coordinate of the window.  
 * This marks the window's upper left corner.  
 * If omitted, nothihng changes and the original value is used.  
 * @param {(Integer)} [Y]  
 * The new y coordinate of the window.  
 * This marks the window's upper left corner.  
 * If omitted, nothihng changes and the original value is used.  
 * @param {(Integer)} [Width]  
 * New window width in pixels.  
 * If omitted, nothihng changes and the original value is used.  
 * @param {(Integer)} [Height]  
 * New window height in pixels.  
 * If omitted, nothihng changes and the original value is used.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - An internal function reported a failure.  
 * Success may be reported even if the window doesn't move, such as it being restricted from moving by its own rules.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlMove.htm|ControlMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinHide.htm|WinHide()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMaximize.htm|WinMaximize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessPath.htm|WinGetProcessPath()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetProcessName.htm|WinGetProcessName()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetClass.htm|WinGetClass()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetID.htm|WinGetID()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPID.htm|WinGetPID()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinMove([X, Y, Width, Height, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMoveBottom.htm|`WinMoveBottom()`}  
 * Sends the specified window to the bottom of stack; that is, beneath all other windows.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - May be thrown on error  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMoveTop.htm|WinMoveTop()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinMoveBottom([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinMoveTop.htm|`WinMoveTop()`}  
 * Brings the specified window to the top of the stack without explicitly activating it.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - May be thrown on error  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMoveBottom.htm|WinMoveBottom()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinMoveTop([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinRedraw.htm|`WinRedraw()`}  
 * Redraws the specified window.  
 * If redraw doesn't work, try {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove()} or try {@link https://www.autohotkey.com/docs/v2/lib/WinHide.htm|WinHide()} then {@link https://www.autohotkey.com/docs/v2/lib/WinShow.htm|WinShow()}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMoveBottom.htm|WinMoveBottom()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|WinSetAlwaysOnTop()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinRedraw([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinRestore.htm|`WinRestore()`}  
 * Restore a specified window from a minimized or maximized state to its original position and size.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMinimize.htm|WinMinimize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMaximize.htm|WinMaximize()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinRestore([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetAlwaysOnTop.htm|`WinSetAlwaysOnTop()`}  
 * Makes the specified window stay on top of all other windows (except other always-on-top windows).  
 * @param {(Integer)} [NewSetting]
 * - `1` = Set to on.  
 * - `0` = Set to off.  
 * - `-1` = Toggle between current state. on <-> off  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - May be thrown on failure.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMoveTop.htm|WinMoveTop()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinMoveBottom.htm|WinMoveBottom()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetAlwaysOnTop([NewSetting:=1, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetEnabled.htm|`WinSetEnabled()`}  
 * Enables or disables the specified window.  
 * @param {(Integer)} [NewSetting]
 * - `1` = Set to enabled.  
 * - `0` = Set to disabled.  
 * - `-1` = Toggle between current state. enabled <-> disabled
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ControlSetEnabled.htm|ControlSetEnabled()}
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetEnabled([NewSetting:=1, WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetRegion.htm|`WinSetRegion()`}  
 * Changes the shape of the specified window to be the specified rectangle, ellipse, or polygon.  
 * @param {(String)} [Options]  
 * Zero or more of the following, spearated by spaces:  
 * - Omit - Restores window to original/default display area.  
 * - `W#` `H#` = Set the width of the rectangle or ellipse in pixels: `w100 h450`
 * - `X-Y` = An x-y coordinate pair set: `300-400`  
 *   These coordinate pairs can be used multiple times when making a polygon.  
 * - `E` = Sets region shape to ellipse instead of rectangle.  
 *   The `W` and `H` options must be present.  
 * - `R#-#` = Creates rounded corners on a rectangular region.  
 *   The `#-#` represents the width-heigth of the ellipse used to round the corners.  
 *   The `W` and `H` options must be present.  
 * - Polygons = If `W` and `H` are omitted, the new display area is a polygon.  
 *   Multiple `X-Y` sets can be used to define the shape of the polygon.  
 * - `Wind` = Use the winding method instead of the alternating method to determing the polygon region.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws ValueError - One or more options are invalid  
 * @throws OSError - The specified region is invalid  
 * @throws OSError - The specified region could not be applied to the target window  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetRegion([Options:='', WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|`WinSetStyle()`}  
 * Changes the style of the specified window.  
 * @param {(String|Integer)} Value  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|style} to add, remove, or toggle from the current style.  
 * | -Operation- | -Example- | -Formula-                         |
 * | :---        | :--:      | :---                              |
 * | `+` Add     | `+0x80`   | NewStyle := CurrentStyle | Value  |
 * | `-` Remove  | `-0x80`   | NewStyle := CurrentStyle & ~Value |
 * | `^` Toggle  | `^0x80`   | NewStyle := CurrentStyle ^ Value  |
 * 
 * If `Value` is a number, `'+'` and `'^'` can be prefixed as a string: `'+' new_style`  
 * The current style can be retrieved with {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle()}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|ControlSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetStyle(Value [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetStyle.htm|`WinSetExStyle()`}  
 * Changes the extended style of the specified window.  
 * @param {(String|Integer)} Value  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|extended style} to add, remove, or toggle from the current style.  
 * | -Operation- | -Example- | -Formula-                         |
 * | :---        | :--:      | :---                              |
 * | `+` Add     | `+0x80`   | NewExStyle := CurrentExStyle | Value  |
 * | `-` Remove  | `-0x80`   | NewExStyle := CurrentExStyle & ~Value |
 * | `^` Toggle  | `^0x80`   | NewExStyle := CurrentExStyle ^ Value  |
 * 
 * If `Value` is a number, `'+'` and `'^'` can be prefixed as a string: `'+' new_exstyle`  
 * The current extended style can be retrieved with {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetExStyle()}.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinGetStyle.htm|WinGetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlSetStyle.htm|ControlSetStyle()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/Styles.htm|Styles table} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetExStyle(Value [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetTitle.htm|`WinSetTitle()`}  
 * Changes the title of the specified window.  
 * @param {(String)} NewTitle  
 * The window's new title.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinMove.htm|WinMove()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetTitle.htm|WinGetTitle()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetText.htm|WinGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ControlGetText.htm|ControlGetText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinGetPos.htm|WinGetPos()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetTitle(NewTitle [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|`WinSetTransColor()`}  
 * Makes all pixels of the chosen color invisible inside the specified window.  
 * @param {(String|Integer)} ColorAndTrans  
 * An RGB hex value and/or a transparency.  
 * Color must be a 6-digit RGB hex value: `00FFbb`  
 * Alpha must come after the color and have a space before it: `FFcc88 128`  
 * To adjust only transparency, use alpha prefixed by a space: ` 255`
 * `Off` or an empty string transparency and performs better than using `255`.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|WinSetTransparent()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetTransColor(Color [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransparent.htm|`WinSetTransparent()`}  
 * Makes the specified window semi-transparent.  
 * @param {(String|Integer)} NewSetting  
 * Specify a transparency number or disable it.  
 * `0`-`255` = Enable transparency for window. `0` is invisible, `255` is opaque.  
 * `Off` or Empty String = Disables transparency and performs better than using `255`.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * @throws OSError - The change could not be applied  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinSetTransColor.htm|WinSetTransColor()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinSetTransparent(NewSetting [,WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinShow.htm|`WinShow()`}  
 * Unhides the specified window.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(String)}  
 * An empty string is always returned.  
 * @throws TargetError - Window could not be found  
 * This does not apply when using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|window group}.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinHide.htm|WinHide()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinShow([WinTitle:='', WinText:='', NoWinTitle:='', NoWinText:='']) => EmptyString

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|`WinWait()`}  
 * Waits until the specified window exists.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(Number)} [Timeout]  
 * The max amount of seconds to wait.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|`unique ID (HWND)`} if a matching window is found, otherwise `0`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/ProcessWait.htm|ProcessWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinWait([WinTitle:='', WinText:='', Timeout:=unset, NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|`WinWaitActive()`}  
 * Waits until the specified window is active.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(Number)} [Timeout]  
 * The max amount of seconds to wait.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|`unique ID (HWND)`} if a matching window is found, otherwise `0`.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinWaitActive([WinTitle:='', WinText:='', Timeout:=unset, NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|`WinWaitNotActive()`}  
 * Waits until the specified window is not active.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(Number)} [Timeout]  
 * The max amount of seconds to wait.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * `1` if the active window does not match the criteria, otherwise `0` if the function timed out.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|WinWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinWaitNotActive([WinTitle:='', WinText:='', Timeout:=unset, NoWinTitle:='', NoWinText:='']) => Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/WinWaitClose.htm|`WinWaitClose()`}  
 * Waits until no matching windows can be found.  
 * @param {(String|Integer|Object)} [WinTitle]  
 * A string using a {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle} to match a window.  
 * Types: {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_exe|ahk_exe}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_class|ahk_class}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_id|ahk_id}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_pid|ahk_pid}, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_group|ahk_group}  
 * Window title is optional and must come before any `ahk_` criteria.  
 * If WinTitle is the letter `A`, the active window is used.  
 * If all `Win` params are omited, {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window} is used.  
 * @param {(String)} [WinText]  
 * Text that must be found in the window.  
 * WindowSpy, found in the AHK install folder, can be used to see window text.  
 * @param {(Number)} [Timeout]  
 * The max amount of seconds to wait.  
 * This number can be a float for higher precision.  
 * If omitted, the function waits indefinitely.  
 * @param {(String)} [NoWinTitle]  
 * Window title does not contain this text.  
 * @param {(String)} [NoWinText]  
 * Text that must not appear in the window.  
 * Use WindowSpy to view window text.
 * @returns {(Integer)}  
 * `1` if the window closed, otherwise `0` if the function timed out.  
 * @see {@link https://www.autohotkey.com/docs/v2/lib/ProcessWaitClose.htm|ProcessWaitClose()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinClose.htm|WinClose()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWait.htm|WinWait()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinWaitActive.htm|WinWaitActive()}
 * {@link https://www.autohotkey.com/docs/v2/lib/WinExist.htm|WinExist()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/WinActive.htm|WinActive()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Win functions} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()} |
 * {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitle Window Matching} |
 * {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#LastFoundWindow|Last Found Window}
 * @example <caption></caption>  
 */
WinWaitClose([WinTitle:='', WinText:='', Timeout:=unset, NoWinTitle:='', NoWinText:='']) => Integer
;@endregion

;@region vars
/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#AhkPath|A_AhkPath}  
 * - If embedded or not compiled:  
 *   The full path and name of the AutoHotkey file that is running the current script.  
 *   Example: `C:\Program Files\AutoHotkey\AutoHotkey.exe`  
 * - If compiled .exe file:  
 *   Contains the full path of the compiled script.  
 *   This can be used in combination with {@link https://www.autohotkey.com/docs/v2/Scripts.htm#SlashScript|/script} to execute external scripts.  
 * - If compiled .bin file:  
 *   The installation path recorded in the registry for AutoHotkey is used and `\AutoHotkey.exe` is appended.  
 *   If AutoHotkey is not found in the registry, this variable will be an empty string.  
 * @type String
 * @example 
 * MsgBox('The current AHK path is: ' A_AhkPath)
 * 
 * ; Running a file using the AHK interpreter that's running the current script:
 * Run(AhkPath ' /script "C:\Some\Path\my_script.ahk"')
 * 
 * ; This is the code used for determining the path for a compiled file:
 * InstallDir := RegRead('HKLM\SOFTWARE\AutoHotkey', 'InstallDir', '')
 * AhkPath := InstallDir ? InstallDir '\AutoHotkey.exe' : ''
 */
A_AhkPath: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#AhkVersion|A_AhkVersion}  
 * Contains the version of AutoHotkey that is running the script.  
 * v2 uses {@link https://semver.org/|semantic versioning}: `2.0.11`  
 * Compiled scripts will report the version of AHK bundled with the exe.  
 * Version comparison is allowed: `(A_AhkVersion >= '2.0.1')`  
 * Remember that this is a string, not a number.  
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/_Requires.htm|#Requires} | 
 * {@link https://www.autohotkey.com/docs/v2/lib/VerCompare.htm|VerCompare}
 * @example 
 * ; Showing the current version
 * MsgBox('This script is being ran by version: ' A_AhkVersion)
 * 
 * ; Comparing the current version
 * if VerCompare(A_AhkVersion, '<2.0.11')
 *     MsgBox('You probably need to update you AHK.')
 * else MsgBox('Your AHK version is at least 2.0.11')
 */
A_AhkVersion: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#AllowMainWindow|A_AllowMainWindow}  
 * Used to get or set whether the {@link https://www.autohotkey.com/docs/v2/Program.htm#main-window|script's main window} can be opened with the script's {@link https://www.autohotkey.com/docs/v2/Program.htm#tray-icon|tray icon}.  
 * This variable can be set to the following values:
 * - `1` = Tray icon can activate main window.
 * - `0` = Tray icon can no longer open the main window.
 *   This removes the "Open" option from the tray menu as well as the ability to double click the tray icon to launch the main window.
 * The default value is `0`.  
 * If the script is {@link https://www.autohotkey.com/docs/v2/Program.htm#embedded-scripts|embedded} or {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe|compiled}, the default value is `1`.
 * @type Integer
 * @example 
 * MsgBox('Try right clicking the tray icon. Notice the "Open" option.'
 *     '`nAlso, double click the icon to launch the main window.'
 *     '`n`nClick OK to set A_AllowMainWindow to false.')
 * A_AllowMainWindow := 0
 * MsgBox('Try right clicking the tray icon. "Open" no longer exists.'
 *     '`nDouble clicking no longer launches the main window.')
 */
A_AllowMainWindow: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#AppData|A_AppData}  
 * This variable contains the path to the user's application data folder.  
 * Typically, this contains: `C:\Users\<UserName>\AppData\Roaming`  
 * @type String
 * @example 
 * MsgBox('Path to user`'s application data folder: ' A_AppData)
 */
A_AppData: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#AppDataCommon|A_AppDataCommon}  
 * This variable contains the path to the common/all-user application data folder.  
 * Typically, this contains: `C:\ProgramData`  
 * @type String
 * @example 
 * MsgBox('Path to the common application data folder: ' A_AppDataCommon)
 */
A_AppDataCommon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Args|A_Args}  
 * Contains an {@link https://www.autohotkey.com/docs/v2/Objects.htm#Usage_Simple_Arrays|array} of command line parameters.  
 * For details, see {@link https://www.autohotkey.com/docs/v2/Scripts.htm#cmd|Passing Command Line Parameters to a Script}.
 * @type Array
 * @example <caption>Showing a /restart arg</caption>
 * ; If the script has no args.
 * if !A_Args.Length
 *     ; Restart the script with some args.
 *     Run(A_ScriptFullPath ' /restart "Hello World"')
 * 
 * ; Show all the args that were passed in.
 * for value in A_Args
 *     MsgBox(value)
 */
A_Args: Array

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Clipboard|A_Clipboard}  
 * This variable gives access to the operating system's clipboard.  
 * This is what's used when you use copy and paste methods such as ctrl+c and ctrl+v.  
 * Pasting text can be much faster than using the Send() method.  
 * @type String
 * {@link https://www.autohotkey.com/docs/v2/lib/A_Clipboard.htm|A_Clipboard info}
 * @example 
 */
A_Clipboard: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ComSpec|A_ComSpec}  
 * This variable contains the path to Window's cmd.exe (command prompt).  
 * Typically, this contains: `C:\Windows\system32\cmd.exe`
 * This is normally used with {@link https://www.autohotkey.com/docs/v2/lib/Run.htm|Run()/RunWait()}.  
 * @type String
 * @example 
 * ; A ping tester activated by typing: /pingtest
 * :*?:/pingtest:: {
 *     ; This will ping Google's DNS server until stopped
 *     Run(A_ComSpec ' /c ping -t 8.8.8.8')
 *     ToolTip('Press control+c to stop the pinging or close the window.')
 * }
 */
A_ComSpec: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ComputerName|A_ComputerName}  
 * The assigned name of the computer as seen on the network.
 * @type String
 * @example 
 * MsgBox('Computer name: ' A_ComputerName)
 */
A_ComputerName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ControlDelay|A_ControlDelay}  
 * Used to get or set the delay, in milliseconds, that occurs after {@link https://www.autohotkey.com/docs/v2/lib/Control.htm|Control functions} are used.  
 * This variable can be set to the following values:
 * - Positive value = The amount of time to wait, in ms.
 * - `0` = Use the smallest possible delay.
 * - `-1` = Use no delay.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetControlDelay.htm|SetControlDelay()}
 * @example 
 * ; This will cause a 0.5 second delay between 
 * ; window activation and sending the keystrokes. 
 * A_WinDelay := 500
 * WinActivate('ahk_exe SomeProgram.exe')
 * Send('Hello, world!')
 */
A_ControlDelay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#CoordModeCaret|A_CoordModeCaret}    
 * Gets or sets the coordinate mode used by {@link https://www.autohotkey.com/docs/v2/lib/CaretGetPos.htm|CaretGetPos( relative to everything else)}.
 * Coordinate mode determines where x0 y0 starts.  
 * This variable can be set to the following values:
 * - `Screen` = x0 y0 starts at the upper left corner of the main monitor.  
 *   Though this is the default value, it's not normally the best choice.  
 * - `Window` = x0 y0 starts at the upper left corner of the active window.  
 *   This includes the window's title bar and border.  
 * - `Client` = x0 y0 starts at the upper left corner of the client portion of the window.  
 *   The client portion is the main part of the window and does not include the title bar and border Window's adds.
 *   Generally, client is the best mode to use.
 * @type String
 * @example 
 * ; Launch an instance of notepad and get its caret position
 * Run('notepad.exe')
 * WinWaitActive('ahk_exe notepad.exe')
 * get_cursor_positions()
 * 
 * get_cursor_positions() {
 *     str := ''
 *     ; Loop through all 3 coord mode types
 *     ; and save to string
 *     loop parse 'Screen,Window,Client', 'csv'
 *         A_CoordModeCaret := A_LoopField
 *         ,CaretGetPos(&x, &y)
 *         ,str .= A_LoopField ':'
 *             . '`nx: ' x 
 *             . '`ny: ' y
 *             . '`n`n'
 *     ; Show the different coordmode coordinates
 *     MsgBox(str)
 * }
 */
A_CoordModeCaret: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#CoordModeMenu|A_CoordModeMenu}  
 * Gets or sets the coordinate mode used by {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm#Show|Menu.Show()}.  
 * Coordinate mode determines where x0 y0 starts relative to everything else.  
 * This variable can be set to the following values:
 * - `Screen` = x0 y0 starts at the upper left corner of the main monitor.  
 *   Though this is the default value, it's not normally the best choice.  
 * - `Window` = x0 y0 starts at the upper left corner of the active window.  
 *   This includes the window's title bar and border.  
 * - `Client` = x0 y0 starts at the upper left corner of the client portion of the window.  
 *   The client portion is the main part of the window and does not include the title bar and border Window's adds.
 *   Generally, client is the best mode to use.
 * @type String
 * @example 
 * #Requires AutoHotkey v2.0.11+
 * 
 * ; Use notepad so there's a window in the middle of the screen.
 * Run('notepad.exe')
 * WinWaitActive('ahk_exe notepad.exe')
 * WinMove(A_ScreenWidth/2, A_ScreenHeight/2, A_ScreenWidth/2, A_ScreenHeight/2, 'A')
 * 
 * ; Create a generic menu
 * main_menu := Menu()
 * main_menu.Add('1: Click to continue', void)
 * main_menu.Add('2: Click to continue', void)
 * main_menu.Add('3: Click to continue', void)
 * 
 * ; A function for the menu items to use tha does nothing.
 * void(*) => ''
 * 
 * ; Open menu using the different coordinate modes types.
 * for value in ['Screen', 'Window', 'Client']
 *     MsgBox("Press OK to move mouse to the " value "'s x0 y0 poisition.")
 *     ,A_CoordModeMenu := value
 *     ,main_menu.Show(0,0)
 */
A_CoordModeMenu: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#CoordModeMouse|A_CoordModeMouse}  
 * Gets or sets the coordinate mode used by {@link https://www.autohotkey.com/docs/v2/lib/MouseGetPos|MouseGetPos()}, {@link https://www.autohotkey.com/docs/v2/lib/Click|Click()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseMove|MouseMove()}, {@link https://www.autohotkey.com/docs/v2/lib/MouseClick|MouseClick()}, and {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag|MouseClickDrag()}.  
 * Coordinate mode determines where x0 y0 starts relative to everything else.  
 * This variable can be set to the following values:
 * - `Screen` = x0 y0 starts at the upper left corner of the main monitor.  
 *   Though this is the default value, it's not normally the best choice.  
 * - `Window` = x0 y0 starts at the upper left corner of the active window.  
 *   This includes the window's title bar and border.  
 * - `Client` = x0 y0 starts at the upper left corner of the client portion of the window.  
 *   The client portion is the main part of the window and does not include the title bar and border Window's adds.
 *   Generally, client is the best mode to use.
 * @type String
 * @example 
 * ; Use notepad so there's a window in the middle of the screen.
 * Run('notepad.exe')
 * WinWaitActive('ahk_exe notepad.exe')
 * WinMove(500, 200, A_ScreenWidth/2, A_ScreenHeight/2, 'A')
 * 
 * ; Move the mouse to the x0 y0 position of each coordinate mode type.
 * A_DefaultMouseSpeed := 10
 * for value in ['Screen', 'Window', 'Client']
 *     MsgBox("Press OK to move mouse to the " value "'s x0 y0 poisition.")
 *     ,A_CoordModeMouse := value
 *     ,Click(0, 0, 0)
 */
A_CoordModeMouse: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#CoordModePixel|A_CoordModePixel}  
 * Gets or sets the coordinate mode used by {@link https://www.autohotkey.com/docs/v2/lib/PixelGetColor.htm|PixelGetColor()}, {@link https://www.autohotkey.com/docs/v2/lib/PixelSearch.htm|PixelSearch()}, and {@link https://www.autohotkey.com/docs/v2/lib/ImageSearch.htm|ImageSearch()}.  
 * Coordinate mode determines where x0 y0 starts relative to everything else.  
 * This variable can be set to the following values:
 * - `Screen` = x0 y0 starts at the upper left corner of the main monitor.  
 *   Though this is the default value, it's not normally the best choice.  
 * - `Window` = x0 y0 starts at the upper left corner of the active window.  
 *   This includes the window's title bar and border.  
 * - `Client` = x0 y0 starts at the upper left corner of the client portion of the window.  
 *   The client portion is the main part of the window and does not include the title bar and border Window's adds.
 *   Generally, client is the best mode to use.
 * @type String
 * @example 
 * ; Use notepad so there's a window in the middle of the screen.
 * Run('notepad.exe')
 * WinWaitActive('ahk_exe notepad.exe')
 * WinMove(500, 200, A_ScreenWidth/2, A_ScreenHeight/2, 'A')
 * 
 * ; Get the x0 y0 pixel color of each coordiante type.  
 * ; Mouse moves to each pixel being checked.
 * A_DefaultMouseSpeed := 10
 * for value in ['Screen', 'Window', 'Client']
 *     A_CoordModeMouse := value
 *     ,A_CoordModePixel := value
 *     ,Click(0, 0, 0)
 *     ,color := PixelGetColor(0, 0)
 *     ,MsgBox('Color at ' value ' x0 y0: ' color)
 */
A_CoordModePixel: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#CoordModeToolTip|A_CoordModeToolTip}  
 * Gets or sets the coordinate mode used by .  
 * Coordinate mode determines where x0 y0 starts relative to everything else.  
 * This variable can be set to the following values:
 * - `Screen` = x0 y0 starts at the upper left corner of the main monitor.  
 *   Though this is the default value, it's not normally the best choice.  
 * - `Window` = x0 y0 starts at the upper left corner of the active window.  
 *   This includes the window's title bar and border.  
 * - `Client` = x0 y0 starts at the upper left corner of the client portion of the window.  
 *   The client portion is the main part of the window and does not include the title bar and border Window's adds.
 *   Generally, client is the best mode to use.
 * @type String
 * @example 
 * ; Use notepad so there's a window in the middle of the screen.
 * Run('notepad.exe')
 * WinWaitActive('ahk_exe notepad.exe')
 * WinMove(500, 200, A_ScreenWidth/2, A_ScreenHeight/2, 'A')
 * 
 * ; Loop through each coordinate mode type
 * for value in ['Screen', 'Window', 'Client']
 *     A_CoordModeToolTip := value
 *     ,show_tt()
 * 
 * ; Show tooltip for 4 seconds
 * show_tt() {
 *     start := A_TickCount
 *     loop
 *         remain := 4000 - (A_TickCount - start)
 *         ,ToolTip('This tooltip is at x0 y0 using coordinate mode ' value '.'
 *             '`nTooltip remaining time: ' Round(remain / 1000) ' seconds'
 *             , 0, 0)
 *         ,Sleep(50)
 *     until (remain < 0)
 * }
 */
A_CoordModeToolTip: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Cursor|A_Cursor}  
 * The type of mouse cursor currently being displayed.  
 * It will be one of the following:  
 * | Cursor Name | Description           | Use Case                            |
 * | :--         | :--                   | :--                                 |
 * | AppStarting | Arrow & hour glass    | Working in background, app start    |
 * | Arrow       | Arrow                 | Standard arrow, normal selection    |
 * | Cross       | Cross                 | Precision selections                |
 * | Help        | Arrow & question mark | Help selections                     |
 * | IBeam       | I-beam shape          | Text cursor, text selection         |
 * | Icon        | Custom icon           |                                     |
 * | No          | Circle with slash     | Not available, no access            |
 * | Size        | 4-Point arrow         | Move selection                      |
 * | SizeAll     | 4-Point arrow         | Move selection                      |
 * | SizeNESW    | Double arrow, NE/SW   | Resize window up+right or down+left |
 * | SizeNS      | Double arrow, N/S     | Resize window up or down            |
 * | SizeNWSE    | Double arrow, NW/SE   | Resize window up+left or down+right |
 * | SizeWE      | Double arrow, E/W     | Resize window left or right         |
 * | UpArrow     | Vertical arrow        | Alterante select                    |
 * | Wait        | Arrow & hour glass    | Busy symbol                         |
 * | Wait        | Rotating circle       | Busy symbol                         |
 * | Unknown     | Any unknown icon      | Includes the hand icons             |
 * @type String
 * @see {@link https://learn.microsoft.com/en-us/windows/win32/menurc/about-cursors|MSDN Cursor Info}
 * @example 
 * monitor_cursor()
 * ; Constantly monitor the current cursor
 * monitor_cursor() {
 *     ; Show current cursor
 *     ToolTip(A_Cursor)
 *     ; Run this function one more time in 50 ms
 *     SetTimer(monitor_cursor, -50)
 * }
 */
A_Cursor: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DD|A_DD}  
 * The current date in two-digit format: `00`-`31`  
 * This is synonymous with A_MDay.
 * @type String
 * @example 
 * MsgBox('Today`'s date is: ' A_MMMM ' ' A_DD)
 */
A_DD: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DDD|A_DDD}  
 * The abbreviated name of the current day of the week: `Sun`-`Sat`
 * @type String
 * @example 
 * MsgBox('The current day is : ' A_DDD)
 */
A_DDD: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DDDD|A_DDDD}  
 * The full name of the current day of the week: `Sunday`-`Saturday`
 * @type String
 * @example 
 * MsgBox('The current day is : ' A_DDDD)
 */
A_DDDD: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DefaultMouseSpeed|A_DefaultMouseSpeed}  
 * Used to get or set the speed the mouse is moved by mouse functions.  
 * This value should be set between `0` (fastest) and `100` (slowest).  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetDefaultMouseSpeed.htm|SetDefaultMouseSpeed()}
 * @example 
 * ; Set start position
 * Click(0, 0, 0)
 * ; Slow movement down
 * A_DefaultMouseSpeed := 20
 * Click(100, 500, 0)
 * ; Slow movement down even more
 * A_DefaultMouseSpeed := 50
 * MouseMove(A_ScreenWidth, A_ScreenHeight)
 * ; Set movement speed to instant
 * A_DefaultMouseSpeed := 0
 * MouseClick('L', A_ScreenWidth/2, A_ScreenHeight/2)
 */
A_DefaultMouseSpeed: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Desktop|A_Desktop}  
 * This variable contains the path to the user's Desktop folder.  
 * Typically, this contains: `C:\Users\<UserName>\Desktop`  
 * @type String
 * @example 
 * MsgBox('Path to user`'s Desktop folder: ' A_Desktop)
 */
A_Desktop: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DesktopCommon|A_DesktopCommon}  
 * This variable contains the path to the common/all-user Desktop folder.  
 * Typically, this contains: `C:\Users\Public\Desktop`  
 * @type String
 * @example 
 * MsgBox('Path to the common Desktop folder: ' A_DesktopCommon)
 */
A_DesktopCommon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#|}  
 * Used to get or set the whether hidden text is detected.  
 * This variable can be set to the following values:  
 * - `1` = Hidden text is detected. This is the default value.
 * - `0` = Hidden text is not detected.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenText.htm|DetectHiddenText()}
 * @example 
 * WinHide(A_ScriptHwnd)
 * MsgBox('Script window exist: ' WinExist(A_ScriptHwnd))
 * A_DetectHiddenWindows := 1
 * MsgBox('After enabling DetectHiddenWindows: ' WinExist(A_ScriptHwnd))
 */
A_DetectHiddenText: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DetectHiddenWindows|A_DetectHiddenWindows}  
 * Used to get or set the whether hidden windows are detected.  
 * This variable can be set to the following values:
 * - `1` = Hidden windows are detected.
 * - `0` = Hidden windows are not detected, except by the {@link https://www.autohotkey.com/docs/v2/lib/WinShow.htm|WinShow()} function. This is the default value.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/DetectHiddenWindows.htm|DetectHiddenWindows()}
 * @example 
 * WinHide(A_ScriptHwnd)
 * MsgBox('Script window exist: ' WinExist(A_ScriptHwnd))
 * A_DetectHiddenWindows := 1
 * MsgBox('After enabling DetectHiddenWindows: ' WinExist(A_ScriptHwnd))
 */
A_DetectHiddenWindows: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#EndChar|A_EndChar}  
 * Contains the {@link https://www.autohotkey.com/docs/v2/Hotstrings.htm#EndChars|ending character} used to trigger the most recent non-auto-replace hotstring (A hotstring that uses the `x` option).  
 * If the wildcard `*` option is being used, there is no end char and this variable will contain an empty string.  
 * @type String
 * @example 
 * ; Try triggering this hotkey with different end chars.  
 * ; Type ahk followed by a space, tab, or enter.
 * :?x:ahk:: {
 *     Send('AutoHotkey')
 *     MsgBox('The endchar used to trigger the hotkey is: '
 *         '`n' GetKeyName(A_EndChar))
 * }
 */
A_EndChar: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#EventInfo|A_EventInfo}  
 * Contains additional information about the following events:  
 * - {@link https://www.autohotkey.com/docs/v2/Hotkeys.htm#Wheel|Mouse wheel hotkeys}:
 *   Stores the number of times the wheel was turned, which is typically 120.  
 * - {@link https://www.autohotkey.com/docs/v2/lib/OnMessage.htm|OnMessage()}:
 *   Contains a `0` if SendMessage() was used, otherwise contains the {@link https://www.autohotkey.com/docs/v2/Variables.htm#TickCount|tick count} since PostMessage() was posted.  
 * - {@link https://www.autohotkey.com/docs/v2/misc/RegExCallout.htm|Regular Expression Callouts}:
 *   Contains additional information from the pcre_callout_block structure.  
 *   This is binary data and can be retrieved using {@link https://www.autohotkey.com/docs/v2/lib/NumGet.htm|NumGet()}  
 * 
 * Unlike most varaibles, each {@link |thread} retains its own A_EventInfo. Starting a new thread does not alter the prior threads A_EventInfo.  
 * @type Integer
 * @example 
 * 
 * ; Monitoring the amount the mousewheel is turned.
 * A_MaxHotkeysPerInterval := 1000
 * ~WheelDown::
 * ~WheelUp:: {
 *     ToolTip A_EventInfo
 * }
 * 
 * 
 * ; Getting information from a RegEx Callout:
 * text := 'Hello, world!'
 * RegExMatch(text, 'C)Hello(.*?)')
 * 
 * ; Function that's called whenever the C) RegEx option is used
 * ; To change the function name, use this in the RegExPattern:
 * ; (?CalloutNumber:FuncName)
 * pcre_callout(RegExMatchInfoObject, CalloutNumber, FoundPos, Haystack, NeedleRegEx) {
 *     str := ''
 *     pad := A_PtrSize = 8 ? 4 : 0
 *     version :=                    NumGet(A_EventInfo,  0                    , 'Int')
 *     str .= 'version: ' version
 *     str .= '`ncallout_number: '   NumGet(A_EventInfo,  4                    , 'Int')
 *     str .= '`noffset_vector: '    NumGet(A_EventInfo,  8                    , 'Ptr')
 *     str .= '`nsubject: '          NumGet(A_EventInfo,  8 + A_PtrSize        , 'Ptr')
 *     str .= '`nsubject_length: '   NumGet(A_EventInfo,  8 + A_PtrSize*2      , 'Int')
 *     str .= '`nstart_match: '      NumGet(A_EventInfo, 12 + A_PtrSize*2      , 'Int')
 *     str .= '`ncurrent_position: ' NumGet(A_EventInfo, 16 + A_PtrSize*2      , 'Int')
 *     str .= '`ncapture_top: '      NumGet(A_EventInfo, 20 + A_PtrSize*2      , 'Int')
 *     str .= '`ncapture_last: '     NumGet(A_EventInfo, 24 + A_PtrSize*2      , 'Int')
 *     str .= '`ncallout_data: '     NumGet(A_EventInfo, 28 + pad + A_PtrSize*2, 'Ptr')
 *     str .= '`npattern_position: ' NumGet(A_EventInfo, 28 + pad + A_PtrSize*3, 'Int')
 *     str .= '`nnext_item_length: ' NumGet(A_EventInfo, 32 + pad + A_PtrSize*3, 'Int')
 *     if (version >= 2)
 *         str .= '`nmark: ' NumGet(A_EventInfo, 36 + pad + A_PtrSize*3, 'Int')
 *     
 *     MsgBox(str)
 * }
 */
A_EventInfo: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#FileEncoding|A_FileEncoding}  
 * Used to get or set the default encoding of various built-in functions.  
 * This variable can be set to the following values:
 * - `CP0` or Empty String: The system default ANSI code page. See remarks below.
 * - `UTF-8` = Unicode UTF-8. Equivalent to `CP65001`.
 * - `UTF-8-RAW` = UTF-8 with no {@link https://www.w3.org/International/questions/qa-byte-order-mark|byte order mark} is written when a new file is created.
 * - `UTF-16` = Unicode UTF-16 with little endian byte order, equivalent to CP1200.
 * - `UTF-16-RAW` = As above, but no {@link https://www.w3.org/International/questions/qa-byte-order-mark|byte order mark} is written when a new file is created.
 * - `CP###` = A code page where `###` is a numeric identifier. See {@link https://learn.microsoft.com/windows/win32/intl/code-page-identifiers|Code Page Identifiers}.
 * - `###` = A numeric code page identifier.
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/FileEncoding.htm|FileEncoding()}
 */
A_FileEncoding: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#HotkeyInterval|A_HotkeyInterval}  
 * Used to get or set the time interval, in milliseconds, that's used by {@link https://www.autohotkey.com/docs/v2/Variables.htm#MaxHotkeysPerInterval|A_MaxHotkeysPerInterval}.  
 * When a script activates more hotkeys than the value of A_MaxHotkeysPerInterval within this time interval, the script throws up a warning.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_MaxHotkeysPerInterval.htm|A_MaxHotkeysPerInterval / A_HotkeyInterval info}
 */
A_HotkeyInterval: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#HotkeyModifierTimeout|A_HotkeyModifierTimeout}  
 * Used to get or set the time, in milliseconds, that a hotkey will assume modifier keys (ctrl/alt/win/shift) are still being held when using {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|SendEvent()}.  
 * Hotkeys release all modifiers when sending keys so they don't affect the keystrokes being sent.  
 * If a hotkey finishes sending in less time than this timeout, the initial modifiers are automatically returned to their down state.  
 * This timeout only applies to unhooked hotkeys that are using the Send Event mode.
 * The variable can be set to the following values:
 * - Positive number = The number of milliseconds to wait. Default is 50.
 * - `0` = Always timeout. Modifier keys are never set back to their initial state.
 * - `-1` = Never timeout. Modifier keys always set back to their initial state.
 * @type Integer
 */
A_HotkeyModifierTimeout: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Hour|A_Hour}  
 * Current 2-digit hour in 24-hour time: `00`-`23`  
 * To get 12-hour time, use: `FormatTime(, 'h:mm:ss tt')`
 * @type String
 * @example 
 * MsgBox('The current hour is: ' A_Hour
 *     '`nOr in 12-hour format: ' FormatTime(, 'h tt'))
 */
A_Hour: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IconFile|A_IconFile}  
 * Contains the full path of the custom icon file that's been applied to the script's tray icon.  
 * If no custom image has been applied, this variable contains an empty string.  
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/TraySetIcon.htm|TraySetIcon()}
 * @example 
 * ; Image to get.
 * url := 'https://i.imgur.com/DlSIhRC.png'
 * ; Path to store the file.
 * path := A_AppData '\AhkV2CutsomTrayIcon.png'
 * ; Download the image.
 * Download(url, path)
 * ; Set the downloaded image as the tray icon
 * TraySetIcon(path)
 * ; Showing that A_IconFile is equal to the path we've used
 * MsgBox('The path of the current tray icon file is: ' A_IconFile
 *     '`nPress OK to delete downloaded image.')
 * ; File clean up
 * FileDelete(path)
 * ExitApp()
 */
A_IconFile: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#|}  
 * Used to get or set the visibility of the tray icon.  
 * This variable can be set to the following values:
 * - `0` = Tray icon is set to visible.
 * - `1` = Tray icon is set to hidden.
 * @type Integer
 * @example 
 * ; Create a gui with 2 radio buttons to show/hide tray icon.
 * goo := Gui()
 * con := goo.AddRadio('xm ym Checked vShow', 'Show Icon')
 * con.OnEvent('Click', switch_icon)
 * con := goo.AddRadio('x+m vHide', 'Hide Icon')
 * con.OnEvent('Click', switch_icon)
 * goo.Show()
 * 
 * switch_icon(radio, info) {
 *     if radio.name = 'Show'
 *         A_IconHidden := 0
 *     else A_IconHidden := 1
 * }
 */
A_IconHidden: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IconNumber|A_IconNumber}  
 * Contains the number of the icon being used with the script's current Tray Icon.  
 * If `A_IconFile` is an empty string, this variable will also contain an empty string.
 * @type Primitive
 * @see {@link https://www.autohotkey.com/docs/v2/Variables.htm#IconFile|A_IconFile}  
 */
A_IconNumber: Primitive

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IconTip|A_IconTip}  
 * Used to get or set the text displayed when hovering over the script's tray icon.  
 * To create multiple lines of text, use the linefeed character: `` `n ``  
 * The max characters that can be displayed is 127. Characters past that are truncated.  
 * If there is a tab character `` `t ``, all characters past the tab are truncated.  
 * @type String
 * @example 
 * A_IconTip := 'Custom message shown on hover!'
 *     . '`nAdditional line of text!'
 *     . '`tThis line will not show up because of the tab.'
 * MsgBox('Hover your mouse over the AHK script icon in the system tray.')
 */
A_IconTip: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Index|A_Index}  
 * A built-in variable available to all loop types, including for-loops and while-loops.  
 * This contains the current iteration number of the loop.  
 * If there are nested loops, this variable contains the inner-most loop's current iteration.  
 * To access an outer-loop's A_Index, save it to a variable.  
 * Assigning a number 
 * @type Integer
 * @example
 * ; === Showing each iteration of a basic loop
 * loop 3
 *     MsgBox(A_Index)
 *
 * ; === Assigning a value to A_Index
 * ; Track actual iteration number
 * i := 0
 * ; Loop 5 times
 * loop 5 {
 *     ; Increment i by 1
 *     i++
 *     ; On the 3rd iteration
 *     If (A_index = 3)
 *         ; Set A_Index to 5
 *         A_Index := 5
 *     ; Show actual iteration and A_Index
 *     MsgBox('iteration: ' i
 *         '`nA_Index: ' A_Index)
 * }
 * 
 * ; === Make copy+paste hotkeys using numpad
 * ; A class that turns the Numpad into a multi-clipboard.
 * ; Use ctrl+Numpad# to save data to that "slot number".
 * ; Use alt+Numpad# to paste data from that "slot number".
 * class multi_clip {
 *     ; Object to store all clipboard info.
 *     static data := Map()
 *     
 *     ; Runs automatically when the script starts.
 *     static __New() {
 *         ; Create the numpad0-numpad9 hotkeys.
 *         loop 10 {
 *             ; Use A_Index to create each number.
 *             num := A_Index - 1
 *             ; Clear data from that number slot.
 *             this.data[num] := ''
 *             ; Create callback to run when hotkey is pressed.
 *             callback := ObjBindMethod(this, 'copy', num)
 *             ; Create copy hotkeys (ctrl+numpad).
 *             Hotkey('$^Numpad' num, callback)
 *             ; Create paste hotkeys (alt+numpad).
 *             callback := ObjBindMethod(this, 'paste', num)
 *             Hotkey('$!Numpad' num, callback)
 *         }
 *     }
 *     
 *     ; Method that runs for copy hotkeys.
 *     static copy(num, *) {
 *         ; Clear clipboard and copy.
 *         A_Clipboard := ''
 *         Send('^c')
 *         ; Wait up to 1 second for something
 *         ; to appear on clipboard.
 *         if ClipWait(1, 1)
 *             ; Save clipboard data to slot.
 *             this.data[num] := A_Clipboard
 *         ; Otherwise, inform user data could not be gotten.
 *         else TrayTip('No data showed up on clipboard.')
 *     }
 *     
 *     ; Method that runs for paste hotkeys.
 *     static paste(num, *) {
 *         ; Backup current clipboard data.
 *         clipbackup := ClipboardAll()
 *         ; Assign stored data to clipboard
 *         A_Clipboard := this.data[num]
 *         ; Paste data
 *         Send('^v')
 *         
 *         loop
 *             ; Wait 100ms
 *             Sleep(100)
 *         ; Break if clipboard window no longer open
 *         ; or if too many tries (20) have been made
 *         until !DllCall('GetOpenClipboardWindow', 'Ptr')
 *             || (A_Index > 20)
 *         ; Finally, restore original clipboard contents
 *         A_Clipboard := clipbackup
 *     }
 * }
 */
A_Index: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#InitialWorkingDir|A_InitialWorkingDir}  
 * The script's initial working directory, which is determined by how it was launched.  
 * This is not the same as {@link https://www.autohotkey.com/docs/v2/Variables.htm#BuiltIn#WorkingDir|A_WorkingDir}.
 * @type String
 * @example 
 */
A_InitialWorkingDir: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Is64bitOS|A_Is64bitOS}  
 * Contains a `1` if the OS is 64-bit or `0` if it's 32-bit.  
 * @type Integer
 * @example 
 * MsgBox('The current OS is ' (A_Is64bitOS ? '64-bit' : '32-bit'))
 */
A_Is64bitOS: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IsAdmin|A_IsAdmin}  
 * This variable is set to `1` if script has administrative rights, otherwise `0`.  
 * A script can be restarted with admin privileges using {@link https://www.autohotkey.com/docs/v2/lib/Run.htm#RunAs|Run('*RunAs')}.  
 * @type Integer
 * @example 
 * MsgBox('Script running with admin privileges: ' (A_IsAdmin ? 'Yes' : 'No'))
 * 
 * ; Function that attempts to run script as admin
 * run_as_admin() 
 * 
 * run_as_admin() {
 *     if (!A_IsAdmin && !InStr(DllCall("GetCommandLine", "str"), ' /restart'))
 *         try 
 *             if A_IsCompiled
 *                 Run('*RunAs "' A_ScriptFullPath '" /restart')
 *             else Run('*RunAs "' A_AhkPath '" /restart "' A_ScriptFullPath '"')
 *         Finally ExitApp()
 *     TrayTip('Script Running as Admin: ' (A_IsAdmin ? 'True' : 'False'))
 * }
 */
A_IsAdmin: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IsCompiled|A_IsCompiled}  
 * Contains 1 if the script is running as a compiled EXE, otherwise it is set to 0.
 * @type Integer
 * @example 
 * if A_IsCompiled
 *     MsgBox('Script is compiled.')
 * else MsgBox('Script is not compiled.')
 */
A_IsCompiled: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IsCritical|A_IsCritical}  
 * This is set to `0` if {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm|critical} is off for the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|current thread}.  
 * Otherwise, this variable is to a positive number, namely the {@link https://www.autohotkey.com/docs/v2/lib/Critical.htm#Interval|message-check interval} being used by Critical.  
 * @type Integer
 * @example 
 * if A_IsCritical
 *     state := 'Enabled'
 * else state := 'Disabled'
 * MsgBox('The current thread`'s critical state is: ' state)
 */
A_IsCritical: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IsPaused|A_IsPaused}  
 * This is set to `1` if the {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|thread} immediately under the current thread is {@link |paused}, otherwise it's set to `0`.
 * @type Integer
 * @example 
 * if A_IsPaused
 *     MsgBox('Prior thread is paused.')
 * else MsgBox('Prior thread is not paused.')
 */
A_IsPaused: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#IsSuspended|A_IsSuspended}  
 * This is set to `1` when script is in the {@link https://www.autohotkey.com/docs/v2/lib/Suspend.htm|suspended state}, otherwise it's set to `0`.
 * @type Integer
 * @example 
 * if A_IsSuspended
 *     MsgBox('Script is suspended.')
 * else MsgBox('Script is not suspended.')
 */
A_IsSuspended: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#KeyDelay|A_KeyDelay}  
 * Used to get or set the the key delay duration used by {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} events.  
 * This is the amount of time, in milliseconds, between the sending of each keystroke.  
 * It has no affect on SendInput() events.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()}
 * @example 
 * ; There will be a 0.5 second pause between each character sent.
 * A_KeyDelay := 500
 * SendEvent('AHK')
 */
A_KeyDelay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#KeyDelayPlay|A_KeyDelayPlay}  
 * Used to get or set the the key delay duration used by {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay()} events.  
 * This is the amount of time, in milliseconds, between the sending of each keystroke.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()}
 * @example 
 * ; There will be a 0.5 second pause between each character sent.
 * A_KeyDelayPlay := 500
 * SendPlay('AHK')
 */
A_KeyDelayPlay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#KeyDelay|A_KeyDuration}  
 * Used to get or set the the key hold duration used by {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} events.  
 * This is the amount of time, in milliseconds, a key is held down before being released.  
 * It has no affect on SendInput() events.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()}
 * @example 
 * ; During sending, each key is held down for 100ms before being released
 * A_KeyDuration := 100
 * SendEvent('AHK')
 */
A_KeyDuration: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#KeyDelayPlay|A_KeyDurationPlay}  
 * Used to get or set the the key hold duration used by {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlayDetail|SendPlay()} events.  
 * This is the amount of time, in milliseconds, a key is held down before being released.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetKeyDelay.htm|SetKeyDelay()}
 * @example 
 * ; During sending, each key is held down for 100ms before being released
 * A_KeyDurationPlay := 100
 * SendPlay('AHK')
 */
A_KeyDurationPlay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Language|A_Language}  
 * The {@link https://www.autohotkey.com/docs/v2/misc/Languages.htm|4-digit language code} number of the system's default language.  
 * Examples:  
 * English (US): `0409`  
 * French (France): `040C`  
 * Chinese (Simplified, China): `0804`
 * @type String
 * @example 
 * MsgBox('Current system language code: ' A_Language)
 */
A_Language: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#LastError|A_LastError}  
 * Usually contains the results from the operating system's {@link https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror|GetLastError()} and is a decimal number between `0` and `4294967295`.  
 * A `0` indicates success and a positive number indicates some kind of error.  
 * Unlike most built-in variables, this value is stored per-thread. Interruptions from other {@link https://www.autohotkey.com/docs/v2/misc/Threads.htm|threads} do not change it.  
 * @type Integer
 * @see {@link https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-|List of OS error codes}  
 * @example 
 * error_example()
 * 
 * error_example() {
 *     error_list := Map(
 *         0, 'ERROR_SUCCESS',
 *         1, 'ERROR_INVALID_FUNCTION',
 *         2, 'ERROR_FILE_NOT_FOUND',
 *         3, 'ERROR_PATH_NOT_FOUND',
 *         4, 'ERROR_TOO_MANY_OPEN_FILES',
 *         5, 'ERROR_ACCESS_DENIED',
 *         6, 'ERROR_INVALID_HANDLE',
 *         7, 'ERROR_ARENA_TRASHED',
 *         8, 'ERROR_NOT_ENOUGH_MEMORY',
 *         9, 'ERROR_INVALID_BLOCK'
 *     )
 *     ; Make a faulty system function call
 *     DllCall('GetHandleInformation')
 *     ; Error is set to 6
 *     MsgBox('System error number: ' A_LastError
 *         '`nError message: ' error_list[A_LastError])
 * }
 */
A_LastError: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#LineFile|A_LineFile}  
 * The full path and name of the file to which {@link https://www.autohotkey.com/docs/v2/Variables.htm#LineNumber|A_LineNumber} belongs.  
 * If loaded from an external file, this is the same as {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptFullPath|A_ScriptFullPath}.  
 * If the code belongs to an {@link https://www.autohotkey.com/docs/v2/lib/_Include.htm|#Include} file, that file's name is used.  
 * If the script is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe|compiled} or a {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe-base|.bin file}, this is the full path and name of the executable file.
 * If the script is {@link https://www.autohotkey.com/docs/v2/Program.htm#embedded-scripts|embedded}, A_LineFile will contain an asterisk (*) followed by the resource name: `*#1`
 * @type String
 * @example 
 * MsgBox('This line of code resides on line: ' A_LineNumber 
 *     '`nand is found in the file: ' A_LineFile)
 */
A_LineFile: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#LineNumber|A_LineNumber}  
 * The number of the currently executing line. This can be within the main script or a script from an {@link https://www.autohotkey.com/docs/v2/lib/_Include.htm|#Include} file.  
 * This line number match the one found in {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|ListLines()}
 * @type Integer
 * @example 
 * ; This comment is on line one
 * var := 'This variable is on line 2'
 * MsgBox('This should show as line 3:`nLine ' A_LineNumber)
 */
A_LineNumber: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ListLines|A_ListLines}  
 * Used to get or set whether a script should log executed lines to the {@link https://www.autohotkey.com/docs/v2/Program.htm#main-window|main AHK window}.  
 * This variable can be set to the following values:
 * - `1` = Logging lines is enabled. This is the default value.
 * - `0` = Logging lines is disabled.
 * Lines can be viewed using {@link https://www.autohotkey.com/docs/v2/lib/ListLines.htm|ListLines()}
 * @type Integer
 * @example 
 * x := 0
 * y := 'The next line will be the last line logged.'
 * A_ListLines := 0
 * if x
 *     z := 123
 * else z := 'abc'
 * ListLines()
 */
A_ListLines: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopParse.htm#LoopField|A_LoopField}  
 * Used by all parse-loops, this built-in variable contains the current substring of the parse.  
 * If there are nested parse-loops, this variable contains the inner-most loop's current substring.  
 * To access an outer-loop's A_LoopField, save it to a variable prior to the inner-parse-loop.  
 * @type String
 * @example 
 * ; Get current script's text.
 * text := FileRead(A_ScriptFullPath)
 * 
 * ; Parse through each line of the script.
 * loop parse text, '`n', '`r' {
 *     ; Save the current line.
 *     line := A_LoopField
 *     ; Parse through each word of the line.
 *     loop parse line, ' '
 *         ; Show line and current word.
 *         MsgBox('Script line:`n' line
 *             '`n`nCurrent word`n: ' A_LoopField)
 * }
 */
A_LoopField: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileAttrib|A_LoopFileAttrib}  
 * The {@link https://www.autohotkey.com/docs/v2/lib/FileGetAttrib.htm|attributes} of the file currently retrieved.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileAttrib: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileDir|A_LoopFileDir}  
 * The directory path of the current file of the loop.  
 * If the loop's {@link {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#Parameters|FilePattern} is relative, this path will also be relative.  
 * Root directories will not contain a trailing backslash: `C:` instead of `C:\`
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileDir: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileExt|A_LoopFileExt}  
 * The current file's extension without the period separator.  
 * Examples: `txt`, `docx`, `exe`, `ahk`
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileExt: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileFullPath|A_LoopFileFullPath}  
 * The path and name of the file/folder currently retrieved.  
 * This always contains the absolute path of the file, even if the loop's {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#Parameters|FilePattern} contains a relative path.  
 * Character case is converted to match the exact characters used in the path. This is helpful when renaming.  
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileFullPath: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileName|A_LoopFileName}  
 * The name of the file or folder currently retrieved.  
 * This does not contain the file's path.  
 * @type 
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFilePath|A_LoopFilePath}  
 * The path and name of the file/folder currently retrieved.  
 * If FilePattern contains a relative path instead of an absolute path, the path here will also be relative.
 * @type 
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFilePath: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileShortName|A_LoopFileShortName}  
 * The short name or alternate name of the file in 8.3 format.  
 * A_LoopFileName is used if the if the file doesn't have a short format.  
 * This might be due to the long name being shorter than 8.3 or because NTFS is being used and short-name generation is disabled.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileShortName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileShortPath|A_LoopFileShortPath}  
 * Contains the short path and name of the file/folder currently retrieved in 8.3 format.  
 * Example: `C:\MYDOCU~1\ADDRES~1.txt`
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileShortPath: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileSize|A_LoopFileSize}  
 * The current file's size, in bytes, rounded down to the nearest integer.  
 * Files larger than 4 GB are supported.  
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileSize: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileSizeKB|A_LoopFileSizeKB}  
 * The current file's size, in KB, rounded down to the nearest integer.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileSizeKB: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileSizeMB|A_LoopFileSizeMB}  
 * The current file's size, in MB, rounded down to the nearest integer.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileSizeMB: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileTimeAccessed|A_LoopFileTimeAccessed}  
 * The time the file was last accessed.  
 * This time is returned in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|YYYYMMDDHH24MISS format}.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileTimeAccessed: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileTimeCreated|A_LoopFileTimeCreated}  
 * The time the file was created.  
 * This time is returned in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|YYYYMMDDHH24MISS format}.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileTimeCreated: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopFiles.htm#LoopFileTimeModified|A_LoopFileTimeModified}  
 * The time the file was last accessed.  
 * This time is returned in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|YYYYMMDDHH24MISS format}.
 * @type String
 * @example 
 * loop files A_ScriptDir '\*', 'F' {
 *     var_list := [
 *         'A_LoopFileName'
 *         ,'A_LoopFileExt'
 *         ,'A_LoopFilePath'
 *         ,'A_LoopFileFullPath'
 *         ,'A_LoopFileShortPath'
 *         ,'A_LoopFileShortName'
 *         ,'A_LoopFileDir'
 *         ,'A_LoopFileAttrib'
 *         ,'A_LoopFileSize'
 *         ,'A_LoopFileSizeKB'
 *         ,'A_LoopFileSizeMB'
 *         ,'A_LoopFileTimeModified'
 *         ,'A_LoopFileTimeCreated'
 *         ,'A_LoopFileTimeAccessed'
 *     ]
 *     
 *     str := ''
 *     for var in var_list
 *         str .= var ':`n' %var% '`n`n'
 *         
 *     MsgBox(str, 'Files from: ' A_ScriptDir)
 * }
 */
A_LoopFileTimeModified: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopRead.htm#LoopReadLine|A_LoopReadLine}  
 * Used by all file read-loops, this built-in variable contains the current line of the file, excluding the end of line character: `` `n `` or `` `r`n ``  
 * If there are nested file read-loops, this variable contains the inner-most loop's current line.  
 * To access an outer-loop's A_LoopReadLine, save it to a variable prior to the inner-parse-loop.  
 * @type String
 * @example 
 * ; Showing each line of the current script.
 * loop read A_ScriptFullPath
 *     MsgBox('Line ' A_Index '`n' A_LoopReadLine)
 */
A_LoopReadLine: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm#vars|A_LoopRegKey}  
 * Name of the currently retrieved item, which can be either a subkey name or a value.  
 * Value names displayed by Windows RegEdit as `(Default)` will be retrieved if a value has been assigned to them, but A_LoopRegName will be blank.  
 * @type String
 */
A_LoopRegKey: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm#vars|A_LoopRegName}  
 * The full name of the key which contains the current loop item.  
 * For remote registry access, this value will not include the computer name.  
 * @type String
 */
A_LoopRegName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm#vars|A_LoopRegTimeModified}  
 * The time the current subkey or any of its values was last modified.  
 * This time is returned in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm|YYYYMMDDHH24MISS} format.  
 * If the currently retrieved item is not a subkey, this variable will be empty.
 * @type String
 */
A_LoopRegTimeModified: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/lib/LoopReg.htm#vars|A_LoopRegType}  
 * The type of the currently retrieved item.  
 * Values can be:
 * - `REG_SZ` = A null-terminated string. Can be either Unicode or ANSI.
 * - `REG_EXPAND_SZ` = A null-terminated string that contains unexpanded references to environment variables.  
 *   Example: `%PATH%`
 * - `REG_MULTI_SZ` = A sequence of null-terminated strings, terminated by an empty string `\0`.  
 *   Example: `String1\0String2\0String3\0LastString\0\0`
 * - `REG_DWORD` = A 32-bit number.
 * - `REG_QWORD` = A 64-bit number.
 * - `REG_BINARY` = Binary data.
 * - `REG_LINK` = A null-terminated Unicode string that contains the target path of a symbolic link that was created by calling the {@link https://learn.microsoft.com/en-us/windows/win32/api/Winreg/nf-winreg-regcreatekeyexa|RegCreateKeyEx} function with REG_OPTION_CREATE_LINK.
 * - `REG_RESOURCE_LIST` = A device driver's list of hardware resources, used by the driver or one of the physical devices it controls, in the \ResourceMap tree.
 * - `REG_FULL_RESOURCE_DESCRIPTOR` = A list of hardware resources that a physical device is using, detected and written into the \HardwareDescription tree by the system.
 * - `REG_RESOURCE_REQUIREMENTS_LIST` = A device driver's list of possible hardware resources it or one of the physical devices it controls can use, from which the system writes a subset into the \ResourceMap tree.
 * - `REG_DWORD_BIG_ENDIAN` = A 32-bit number in {@link https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types#byte-formats|big-endian format}.
 * - Empty String - The currently retrieved item is of an unknown type.  
 * @type String
 */
A_LoopRegType: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MaxHotkeysPerInterval|A_MaxHotkeysPerInterval}  
 * Used to get or set the maximum number of hotkeys that can be activated within the interval time period.  
 * This interval can be gotten or changed with the {@link https://www.autohotkey.com/docs/v2/Variables.htm#HotkeyInterval|A_HotkeyInterval} variable.  
 * When a script activates more hotkeys than this number within A_HotkeyInterval's time frame, the script throws up a warning.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_MaxHotkeysPerInterval.htm|A_MaxHotkeysPerInterval / A_HotkeyInterval info}
 */
A_MaxHotkeysPerInterval: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#DD|A_MDay}  
 * The current date in two-digit format: `00`-`31`.  
 * This is synonymous with A_DD.
 * @type String
 * @example 
 * MsgBox('Today`'s date is: ' A_MMMM ' ' A_DD)
 */
A_MDay: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MenuMaskKey|A_MenuMaskKey}  
 * Used to get or set the key used to mask Win and Alt up events.  
 * This is used to prevent the start menu and other alt-up menus from activating when using a hotkey containing alt or win keys.  
 * This value needs to be a `vk###` (virtual key), `sc###` (scan code), or both `vk###sc###`.  
 * If set to an empty string, masking is disabled.  
 * The default mask key is: `vk11sc01D`, the left Ctrl key.
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/A_MenuMaskKey.htm|A_MenuMaskKey info}
 * @example 
 * ; Reset the menu mask to it's original value
 * A_MenuMaskKey := 'vk11sc01D'
 */
A_MenuMaskKey: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Min|A_Min}  
 * The current minute in 2-digit format: `00`-`59`
 * @type String
 * @example 
 * MsgBox('The current minutes is: ' A_Min)
 */
A_Min: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MM|A_MM}  
 * The current month in 2-digit format: `01`-`12`.  
 * Synonymous with `A_Mon`.  
 * @type String
 * @example 
 * MsgBox('The current month number is: ' A_MM)
 */
A_MM: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MMM|A_MMM}  
 * The 3 letter abbreviation for the current month: `Jan`-`Dec`
 * @type String
 * @example 
 * MsgBox('The current month is: ' A_MMM)
 */
A_MMM: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MMMM|A_MMMM}  
 * The full name of the current month: `January`-`December`
 * @type String
 * @example 
 * MsgBox('The current month is: ' A_MMMM)
 */
A_MMMM: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#A_MM|A_Mon}  
 * The current month in 2-digit format: `01`-`12`.  
 * Synonymous with `A_MM`.  
 * @type String
 * @example 
 * MsgBox('The current month number is: ' A_MM)
 */
A_Mon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MouseDelay|A_MouseDelay}  
 * Used to get or set the delay, in milliseconds, that occurs after SendEvent-based mouse movements or clicks.  
 * This variable can be set to the following values:
 * - Positive value = The amount of time to wait, in ms.
 * - `0` = Use the smallest possible delay.
 * - `-1` = Use no delay.
 * SendPlay mode has its own delay setting.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} | 
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#MouseDelayPlay|A_MouseDelayPlay}
 * @example 
 * SendMode('Event')
 * A_MouseDelay := 200
 * ; Each click will have 200ms between them
 * Click(3)
 */
A_MouseDelay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MouseDelayPlay|A_MouseDelayPlay}  
 * Used to get or set the delay, in milliseconds, that occurs after SendPlay-based mouse movements or clicks.  
 * This variable can be set to the following values:
 * - Positive value = The amount of time to wait, in ms.
 * - `0` or `-1` = Use no delay.
 * SendEvent mode has its own delay setting.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetMouseDelay.htm|SetMouseDelay()} | 
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#MouseDelay|A_MouseDelay}
 */
A_MouseDelayPlay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#MSec|A_MSec}  
 * The current millisecond in 3-digit format: `000`-`999`
 * @type String
 * @example 
 * MsgBox('Current milliseconds: ' A_MSec)
 */
A_MSec: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#A_MyDocuments|A_MyDocuments}  
 * This variable contains the path to the user's Documents (My Documents) folder.  
 * Typically, this contains: `C:\Users\<UserName>\Documents`  
 * Unlike most other path variables, the following `\` is not included with root directories: `D:` instead of `D:\`
 * @type String
 * @example 
 * MsgBox('Path to user`'s Documents folder:`n' A_MyDocuments)
 */
A_MyDocuments: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Now|A_Now}  
 * @type String
 * The current local time in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS format}.  
 * Date and time math can be performed with {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|DateAdd()} and {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|DateDiff()}.  
 * Time formatting can be done with {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()}.  
 * @example 
 * current := A_Now
 * formatted := FormatTime(current, 'dddd, MMMM dd, yyyy @ hh:mm:ss tt')
 * past := DateAdd(current, -7, 'D')
 * time_until := DateDiff(current, 21000101000000, 'D')
 * MsgBox('Current DTS: '
 *     '`n' current
 *     '`nCurrent time formatted: '
 *     '`n' formatted
 *     '`n1 week ago: '
 *     '`n' past
 *     '`nTime until the year 2100: '
 *     '`n' Abs(time_until) ' Days')
 */
A_Now: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#NowUTC|A_NowUTC}  
 * The current UTC (Coordinated Universal Time) time in {@link https://www.autohotkey.com/docs/v2/lib/FileSetTime.htm#YYYYMMDD|YYYYMMDDHH24MISS format}.  
 * This is also known as Zulu time.  
 * Date and time math can be performed with {@link https://www.autohotkey.com/docs/v2/lib/DateAdd.htm|DateAdd()} and {@link https://www.autohotkey.com/docs/v2/lib/DateDiff.htm|DateDiff()}.  
 * Time formatting can be done with {@link https://www.autohotkey.com/docs/v2/lib/FormatTime.htm|FormatTime()}.  
 * Bonus info: It's called UTC as a compromise between the English abbreviation CUT (Coordinated Universal Time) and the French version TUC (Temps Universel Coordonné).  
 * @type String
 * @example 
 * current := A_NowUTC
 * formatted := FormatTime(current, 'dddd, MMMM dd, yyyy @ hh:mm:ss tt')
 * past := DateAdd(current, -7, 'D')
 * time_until := DateDiff(current, 21000101000000, 'D')
 * MsgBox('Current UTC time: '
 *     '`n' current
 *     '`nCurrent UTC time formatted: '
 *     '`n' formatted
 *     '`n1 week ago: '
 *     '`n' past
 *     '`nTime until the year 2100: '
 *     '`n' Abs(time_until) ' Days')
 */
A_NowUTC: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#OSVersion|A_OSVersion}  
 * The current operating system version in `Major`.`Minor`.`Patch` format.  
 * Example: `10.0.19045`
 * @type String
 * @example 
 * MsgBox('Current OS Version: ' A_OSVersion)
 */
A_OSVersion: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#PriorHotkey|A_PriorHotkey}  
 * Contains the text of the hotkey or non-auto-replacing hotstring (a hotstring that uses the `x` option) that was executed prior to the last hotkey.  
 * This is a useful variable when writing code that activates on a double tap or to otherwise track prior key sequences.  
 * @type String
 * @example 
 * ; Creating code that activates on double tap
 * *Space:: {
 *     ; Initially, A_TimeSincePriorHotkey and A_PriorHotkey are empty strings.  
 *     ; Using an empty string in a comparison is an error.  
 *     ; Try prevents this initial inevitible error.
 *     try
 *         ; Check if it's been 400 ms or less since the prior hotkey was fired
 *         ; And check if the current fired hotkey matches the prior hotkey.
 *         if (A_TimeSincePriorHotkey < 400 && A_ThisHotkey = A_PriorHotkey)
 *             MsgBox('Double tap detected!')
 *         else Send(' ')
 *     catch
 *         Send(' ')
 * }
 */
A_PriorHotkey: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#PriorKey|A_PriorKey}  
 * Contains the text of the last key press since the most most recent key down or key up event.  
 * @type String
 * @example 
 * last_key_checker()
 * 
 * last_key_checker() {
 *     if (A_PriorKey = '')
 *         ToolTip('Prior key: ' A_PriorKey)
 *     else ToolTip(A_PriorKey)
 *     SetTimer(%A_ThisFunc%, -50)
 * }
 * 
 * MsgBox('Type to see A_PriorKey being tracked.')
 */
A_PriorKey: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ProgramFiles|A_ProgramFiles}  
 * This variable contains the path to the user's Program Files folder.  
 * Typically, this contains: `C:\Program Files` or `C:\Program Files (x86)`  
 * This is usually the same as the ProgramFiles {@link https://www.autohotkey.com/docs/v2/Concepts.htm#environment-variables|environment variable}.  
 * @type String
 * @example 
 * MsgBox('The system`'s Program Files path:`n' A_ProgramFiles)
 */
A_ProgramFiles: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Programs|A_Programs}  
 * This variable contains the path to the user's Start menu's Programs folder.  
 * Typically, this contains: `C:\Users\<UserName>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs`  
 * @type String
 * @example 
 * MsgBox('Start menu`'s Programs folder path: ' A_Programs)
 */
A_Programs: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ProgramsCommon|A_ProgramsCommon}  
 * This variable contains the path to the common/all-user Start menu's Programs folder.  
 * Typically, this contains: `C:\ProgramData\Microsoft\Windows\Start Menu\Programs`  
 * @type String
 * @example 
 * MsgBox('The common Start menu`'s Programs folder path: ' A_ProgramsCommon)
 */
A_ProgramsCommon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#PtrSize|A_PtrSize}  
 * The size of the pointer, in bytes, based on the system architecture type.  
 * This is `8` if a 64-bit system and `4` if a 32-bit system.  
 * @type Integer
 * @example 
 * MsgBox('Pointers are ' A_PtrSize ' bytes on this system.')
 */
A_PtrSize: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#RegView|A_RegView}  
 * Used to get or set which Registry view, 32-bit or 64-bit, is used.  
 * This variable can be set to the following values:
 * - `32` = View registry as a 32-bit app.
 * - `64` = View registry as a 64-bit app.
 * - `Default` = Restore to normal view.
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetRegView.htm|SetRegView()}
 */
A_RegView: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenDPI|A_ScreenDPI}  
 * The number of pixels per logical inch of screen width.  
 * On most systems, this is 96.  
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm#DPIScale|Gui DPIScale}
 * @example 
 * MsgBox('This computer`'s screen DPI is set to ' A_ScreenDPI)
 */
A_ScreenDPI: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenHeight|A_ScreenHeight}  
 * The height of the primary monitor, in pixels.  
 * To get the height of other monitors, use {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} or one of the {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|monitor functions} such as {@link https://www.autohotkey.com/docs/v2/lib/MonitorGet.htm|MonitorGet()}.  
 * @type Integer
 * @example <caption>Open Notepad 4 times and arrange in 2x2 grid.</caption>
 * ; Array to store each notepad PID.
 * win_list := []
 * ; Do everything 4 times.
 * loop 4 {
 *     ; Run notepad and add PID to list.
 *     Run('notepad.exe',,, &pid)
 *     win_list.Push(pid)
 *     notepad := 'ahk_pid ' pid
 *     ; Assign 1/2 width and height.
 *     w := A_ScreenWidth / 2
 *     h := A_ScreenHeight / 2
 *     ; Assign x/y based on each iteration.
 *     switch A_Index {
 *         ; Upper left window
 *         case 1: x := 0, y := 0
 *         ; Upper right window
 *         case 2: x := w, y := 0
 *         ; Lower left window
 *         case 3: x := 0, y := h
 *         ; Lower right window
 *         case 4: x := w, y := h
 *     }
 *     ; Wait to make sure the window has fully launched.
 *     WinWait(notepad)
 *     ; Move window to its correct position and size.
 *     WinMove(x, y, w, h, notepad)
 * }
 * 
 * MsgBox('Click OK to close the notepad instances.')
 * for pid in win_list
 *     WinClose('ahk_pid ' pid)
 */
A_ScreenHeight: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScreenWidth|A_ScreenWidth}  
 * The width of the primary monitor, in pixels.  
 * To get the width of other monitors, use {@link https://www.autohotkey.com/docs/v2/lib/SysGet.htm|SysGet()} or one of the {@link https://www.autohotkey.com/docs/v2/lib/Monitor.htm|monitor functions} such as {@link https://www.autohotkey.com/docs/v2/lib/MonitorGet.htm|MonitorGet()}.  
 * @type Integer
 * @example <caption>Open Notepad 4 times and arrange in 2x2 grid.</caption>
 * ; Array to store each notepad PID.
 * win_list := []
 * ; Do everything 4 times.
 * loop 4 {
 *     ; Run notepad and add PID to list.
 *     Run('notepad.exe',,, &pid)
 *     win_list.Push(pid)
 *     notepad := 'ahk_pid ' pid
 *     ; Assign 1/2 width and height.
 *     w := A_ScreenWidth / 2
 *     h := A_ScreenHeight / 2
 *     ; Assign x/y based on each iteration.
 *     switch A_Index {
 *         ; Upper left window
 *         case 1: x := 0, y := 0
 *         ; Upper right window
 *         case 2: x := w, y := 0
 *         ; Lower left window
 *         case 3: x := 0, y := h
 *         ; Lower right window
 *         case 4: x := w, y := h
 *     }
 *     ; Wait to make sure the window has fully launched.
 *     WinWait(notepad)
 *     ; Move window to its correct position and size.
 *     WinMove(x, y, w, h, notepad)
 * }
 * 
 * MsgBox('Click OK to close the notepad instances.')
 * for pid in win_list
 *     WinClose('ahk_pid ' pid)
 */
A_ScreenWidth: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptDir|A_ScriptDir}  
 * The full directory path of the current script.  
 * The final backslash is omitted. This includes for root directories.  
 * If the script text is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#stdin|read from stdin} rather than from file, this variable contains the {@link https://www.autohotkey.com/docs/v2/Variables.htm#InitialWorkingDir|initial working directory.}.
 * @type String
 * @example  
 * ; Open the current script's directory.
 * Run(A_ScriptDir)
 */
A_ScriptDir: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptFullPath|A_ScriptFullPath}  
 * The full path of the current script. Directory and file name: `C:\Scripts\My Script.ahk`  
 * If the script text is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#stdin|read from stdin} rather than from file, this variable contains an asterisk (*).  
 * If the script is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe|compiled} or {@link https://www.autohotkey.com/docs/v2/Program.htm#embedded-scripts|embedded}, the file's exe is used.
 * @type String
 */
A_ScriptFullPath: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptHwnd|A_ScriptHwnd}  
 * The unique ID (HWND/handle) of the script's hidden {@link https://www.autohotkey.com/docs/v2/Program.htm#main-window|main window}.  
 * @type Integer
 * @example 
 * ; A hotkey that maximizes the script's main window.
 * $F1::WinMaximize(A_ScriptHwnd)
 */
A_ScriptHwnd: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptName|A_ScriptName}  
 * Used to get or set the default title used when calling {@link https://www.autohotkey.com/docs/v2/lib/MsgBox.htm|MsgBox()}, {@link https://www.autohotkey.com/docs/v2/lib/InputBox.htm|InputBox()}, {@link https://www.autohotkey.com/docs/v2/lib/FileSelect.htm|FileSelect()}, {@link https://www.autohotkey.com/docs/v2/lib/DirSelect.htm|DirSelect()}, and {@link https://www.autohotkey.com/docs/v2/lib/Gui.htm|Gui()}.  
 * The default value is the script's name, including extension: `my_script.ahk`  
 * If the script text is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#stdin|read from stdin} rather than from file, this variable contains an asterisk (*).  
 * If the script is {@link https://www.autohotkey.com/docs/v2/Scripts.htm#ahk2exe|compiled} or {@link https://www.autohotkey.com/docs/v2/Program.htm#embedded-scripts|embedded}, the file's exe is used.
 * @type String
 * @example 
 * ; Notice the text and title are the same.
 * MsgBox(A_ScriptName)
 * ; Set to new name.
 * A_ScriptName := 'Customized A_ScriptName!'
 * ; Now the title is 
 * MsgBox(A_ScriptName)
 */
A_ScriptName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Sec|A_Sec}  
 * The current seconds in 2-digit format: `00`-`59`
 * @type String
 * @example 
 * MsgBox('Current seconds: ' A_Sec)
 */
A_Sec: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#SendLevel|A_SendLevel}  
 * Used to get or set the send level of a thread.  
 * The value should be between `0` and `100`, with `0` being the default of all threads until changed.  
 * This controls whether the current thread can affect hotkeys and hotstrings that are hooked.  
 * If the thread is higher
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendLevel.htm|SendLevel()}
 * @example 
 * ; All threads are started at 0
 * ; This won't affect either hotkey
 * Send('ab')
 * MsgBox('Send level 0.`nWhat traytips popped up?')
 * 
 * ; The thread now has a send level of 1
 * A_SendLevel := 1
 * ; Because the thread is level 1 and the 'a' hotkey 
 * ; is level 0, this send will activate the 'a' hotkey
 * ; The 'b' hotkey is not affected b/c its level is 5
 * Send('ab')
 * MsgBox('Send level 1.`nWhat traytips popped up?')
 * 
 * ; Set current thread to level 6
 * A_SendLevel := 6
 * ; This send activates both the 'a' (level 0) and 
 * ; 'b' (level 5) hotkeys because 6 is higher than 0 and 5
 * Send('ab')
 * MsgBox('Send level 6.`nWhat traytips popped up?')
 * 
 * ; Hotkeys have a default send level of 0
 * $a::TrayTip(A_ThisHotkey ' was fired!')
 * 
 * ; All hotkeys past here are level 5
 * #InputLevel 5
 * $b::TrayTip(A_ThisHotkey ' was fired!')
 */
A_SendLevel: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#SendMode|A_SendMode}  
 * Used to get or set the the current default mode used for.  
 * {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode} affects the sending method of multiple functions, including 
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()}, 
 * {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#Text|SendText()},
 * {@link https://www.autohotkey.com/docs/v2/lib/Click.htm|Click()},
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseMove.htm|MouseMove()},
 * {@link https://www.autohotkey.com/docs/v2/lib/MouseClick.htm|MouseClick()},
 * and {@link https://www.autohotkey.com/docs/v2/lib/MouseClickDrag.htm|MouseclickDrag()}.  
 * This variable can be set to the following values:
 * - `Event` = Uses {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent()}.
 * - `Input` = Uses {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInput|SendInput()}.  
 *   If this fails, {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendEvent|SendEvent()} is used as the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputUnavail|fallback}.  
 *   This is the default value.
 * - `InputThenPlay` = Uses {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInput|SendInput()}
 *   If this fails, {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlay|SendPlay()} is used as the {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendInputUnavail|fallback}.
 * - `Play` = Uses {@link https://www.autohotkey.com/docs/v2/lib/Send.htm#SendPlay|SendPlay()}.
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SendMode.htm|SendMode()}
 */
A_SendMode: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Space|A_Space}  
 * Contains a single space character.  
 * @type String
 * @example
 * txt := 'Hello' A_Space 'World'
 * MsgBox(txt)
 */
A_Space: ' '

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#StartMenu|A_StartMenu}  
 * This variable contains the path to the user's Start menu folder.  
 * Typically, this contains: `C:\Users\<UserName>\AppData\Roaming\Microsoft\Windows\Start Menu`  
 * @type String
 * @example 
 * MsgBox('Path to the user`'s Start menu folder: ' A_StartMenu)
 */
A_StartMenu: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#StartMenuCommon|A_StartMenuCommon}  
 * This variable contains the path to the user's Start menu folder.  
 * Typically, this contains: `C:\ProgramData\Microsoft\Windows\Start Menu`  
 * @type String
 * @example 
 * MsgBox('Path to the common Start menu folder: ' A_StartMenuCommon)
 */
A_StartMenuCommon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Startup|A_Startup}  
 * This variable contains the path to the user's Start menu Startup folder.  
 * Typically, this contains: `C:\Users\<UserName>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`  
 * @type String
 * @example 
 * MsgBox('User`'s Start menu Startup folder: ' A_Startup)
 */
A_Startup: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#StartupCommon|A_StartupCommon}  
 * This variable contains the path to the common/all-user Start menu Startup folder.  
 * Typically, this contains: `C:\Users\<UserName>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`  
 * @type String
 * @example 
 * MsgBox('Common Start menu Startup folder: ' A_StartupCommon)
 */
A_StartupCommon: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#StoreCapsLockMode|A_StoreCapsLockMode}  
 * Used to get or set whether the CapsLock state is restored to its former value after a {@link https://www.autohotkey.com/docs/v2/lib/Send.htm|Send()} function has been used.  
 * This variable can be set to the following values:
 * - `1` = Enabled. This is the default value.
 * - `0` = Disabled.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetStoreCapsLockMode.htm|SetStoreCapsLockMode()}
 * @example 
 */
A_StoreCapsLockMode: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Tab|A_Tab}  
 * Contains a single tab character.  
 * @type String
 * @example
 * MsgBox('one:'
 *     '`n' A_Tab 'Cut a hole in the box.'
 *     '`ntwo:'
 *     '`n' A_Tab 'Put your code in the box.'
 *     '`nthree:'
 *     '`n' A_Tab 'Make her open the box.'
 *     '`n`nAnd that`'s the way you do it.'
 *     '`nIt`'s AHK in a box!')
 */
A_Tab: '`t'

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#Temp|A_Temp}  
 * This variable contains the path to the user's temporary folder.  
 * Typically, this contains: `C:\Users\<USERNAME>\AppData\Local\Temp`
 * @type String
 * @example 
 * ; A ping tester activated by typing: /pingtest
 * :*?:/pingtest:: {
 *     ; This will ping Google's DNS server until stopped
 *     Run(A_ComSpec ' /c ping -t 8.8.8.8')
 *     ToolTip('Press control+c to stop the pinging or close the window.')
 * }
 * @type 
 * @example 
 */
A_Temp: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ThisFunc|A_ThisFunc}  
 * The name of the function that is currently executing.  
 * If in global space (not in a function), this variable contains an empty string.
 * @type String
 * @see {@link https://www.autohotkey.com/docs/v2/lib/Func.htm#Name|Name property (Func)}
 * @example 
 * ; Run the function.
 * my_function()
 * 
 * my_function() {
 *     ; Get the current functions name.
 *     MsgBox('Currently inside the function called:`n' A_ThisFunc)
 *     
 *     ; An example of using this variable.
 *     If (MsgBox('Run function again?',, 'YesNo') = 'Yes')
 *         ; SetTimer requires an object but this contains a string.
 *         ; We can derefernce it by wrapping it in percent signs.
 *         SetTimer(%A_ThisFunc%, -1)
 *     Else ExitApp()
 * }
 */
A_ThisFunc: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#ThisHotkey|A_ThisHotkey}  
 * Contains the text of the last executed hotkey or non-auto-replacing hotstring (a hotstring that uses the `x` option).  
 * The string will include any 
 * @type String
 * @example 
 * ; Function that will continuously show the current A_ThisHotkey.
 * last_key_checker()
 * 
 * last_key_checker() {
 *     if (A_ThisHotkey = '')
 *         ToolTip('<EMPTY STRING>')
 *     else ToolTip(A_ThisHotkey)
 *     SetTimer(%A_ThisFunc%, -50)
 * }
 * 
 * ; Try out each of these to see which shows up by the checker function.
 * :?*:test1::This is an auto-replace hotstring
 * :?*x:test2::MsgBox('This is not an auto-replace hotstring')
 * *F1::MsgBox('This is a hotkey')
 * F2 & F3::MsgBox('Custom combo hotkey')
 */
A_ThisHotkey: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TickCount|A_TickCount}  
 * The number of elapsed milliseconds since the computer was last started.  
 * This value maxes out at 49.7 days and the system will need to be rebooted to make use of A_TickCount again.  
 * A_TickCount can be used to measure elapsed time by saving the current A_TickCount and subtracting it from a future call to A_TickCount.  
 * If higher precision is needed, use {@link https://www.autohotkey.com/docs/v2/lib/DllCall.htm#ExQPC|QueryPerformanceCounter()}.  
 * @type Integer
 * @example 
 * MsgBox('Start randomized sleep.')
 * start := A_TickCount
 * Sleep(Random(500, 2000))
 * seconds_passed := (A_TickCount - start) / 1000
 * MsgBox('The sleep lasted ' Round(seconds_passed, 3) ' seconds')
 */
A_TickCount: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeIdle|A_TimeIdle}  
 * Contains the time, in milliseconds, since the system received input from the mouse or keyboard.  
 * Both physical input from the user and artificial input from a script will reset this timer.  
 * The tracked time is not exact, so do not look for an exact time match. Use `>` and `<`.  
 * @type Integer
 * @example 
 * idle_checker()
 * 
 * idle_checker() {
 *     ; Check if it's been more than 5 seconds.
 *     if (A_TimeIdle > 5000)
 *         MsgBox("You've been AFK for over 5 seconds!")
 *     ; Run this function one more time in 100ms.
 *     SetTimer(idle_checker, -100)
 * }
 */
A_TimeIdle: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeIdleKeyboard|A_TimeIdleKeyboard}  
 * Contains the time, in milliseconds, since the system received input from the keyboard.  
 * This only applies if the {@link https://www.autohotkey.com/docs/v2/lib/InstallKeybdHook.htm|keyboard hook} is installed.  
 * Otherwise, `A_TimeIdleKeyboard` contains the same value as `A_TimeIdle`.  
 * The tracked time is not exact, so do not look for an exact time match. Use `>` and `<`.  
 * @type Integer
 * @example 
 * InstallKeybdHook(1)
 * idle_checker()
 * 
 * idle_checker() {
 *     ; Check if it's been more than 5 seconds.
 *     if (A_TimeIdleKeyboard > 5000)
 *         MsgBox("It has been over 5 seconds since the keyboard was used.")
 *     ; Run this function one more time in 100ms.
 *     SetTimer(idle_checker, -100)
 * }
 */
A_TimeIdleKeyboard: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeIdleMouse|A_TimeIdleMouse}  
 * Contains the time, in milliseconds, since the system received input from the mouse.  
 * This only applies if the {@link https://www.autohotkey.com/docs/v2/lib/InstallMouseHook.htm|mouse hook} is installed.  
 * Otherwise, `A_TimeIdleMouse` contains the same value as `A_TimeIdle`.  
 * The tracked time is not exact, so do not look for an exact time match. Use `>` and `<`.  
 * @type Integer
 * @example 
 * InstallKeybdHook(1)
 * idle_checker()
 * 
 * idle_checker() {
 *     ; Check if it's been more than 5 seconds.
 *     if (A_TimeIdleMouse > 5000)
 *         MsgBox("It has been over 5 seconds since the mouse was used.")
 *     ; Run this function one more time in 100ms.
 *     SetTimer(idle_checker, -100)
 * }
 */
A_TimeIdleMouse: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeIdlePhysical|A_TimeIdlePhysical}  
 * Contains the time, in milliseconds, since the system received input from the mouse or keyboard.  
 * This only applies to physical input from the user. Artificial input from a script will not reset this timer.  
 * The tracked time is not exact, so do not look for an exact time match. Use `>` and `<`.  
 * @type Integer
 * @example 
 * idle_checker()
 * 
 * idle_checker() {
 *     ; Check if it's been more than 5 seconds.
 *     if (A_TimeIdlePhysical > 5000)
 *         MsgBox("It has been over 5 seconds since a physical action was taken.")
 *     ; Run this function one more time in 100ms.
 *     SetTimer(idle_checker, -100)
 * }
 */
A_TimeIdlePhysical: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeSincePriorHotkey|A_TimeSincePriorHotkey}  
 * Tracks how many milliseconds have elapsed since the hotkey prior to the most current one was pressed.  
 * This is a useful variable when writing code that activates on a double tap or to otherwise track prior key sequences.  
 * @type Integer
 * @example 
 * ; Creating code that activates on double tap
 * *Space:: {
 *     ; Initially, A_TimeSincePriorHotkey and A_PriorHotkey are empty strings.  
 *     ; Using an empty string in a comparison is an error.  
 *     ; Try prevents this initial inevitible error.
 *     try
 *         if (A_TimeSincePriorHotkey < 400 && A_ThisHotkey = A_PriorHotkey)
 *             MsgBox('Double tap detected!')
 *         else Send(' ')
 *     ; On failure, send space as the default action.
 *     catch
 *         Send(' ')
 * }
 */
A_TimeSincePriorHotkey: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TimeSinceThisHotkey|A_TimeSinceThisHotkey}  
 * Tracks how many milliseconds have elapsed since the most current hotkey was pressed.  
 * @type Integer
 * @example 
 * *F1:: {
 *     ToolTip('Temporary message')
 *     while (A_TimeSinceThisHotkey < 1500)
 *         Sleep(100)
 *     ToolTip()
 * }
 */
A_TimeSinceThisHotkey: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TitleMatchMode|A_TitleMatchMode}  
 * Used to get or set the mode used when matching {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitles}.  
 * This variable can be set to the following values:
 * - `1` = A window's title must start with the specified WinTitle to be a match.
 * - `2` = Default behavior. A window's title can contain WinTitle anywhere inside it to be a match.  
 *    This is the default value.
 * - `3` = A window's title must exactly match WinTitle to be a match.
 * - `RegEx` = Changes WinTitle, WinText, ExcludeTitle, and ExcludeText to accept {@link https://www.autohotkey.com/docs/v2/misc/RegEx-QuickRef.htm|regular expressions}.
 * @type Primitive
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()}
 * @example 
 * A_TitleMatchMode := 2
 * if WinExist('AutoHotkey')
 *     MsgBox('An AHK script exists.')
 * else MsgBox('No AHK scripts were found.')
 */
A_TitleMatchMode: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TitleMatchModeSpeed|A_TitleMatchModeSpeed}  
 * Used to get or set the speed mode used when matching {@link https://www.autohotkey.com/docs/v2/misc/WinTitle.htm|WinTitles}.  
 * This variable can be set to the following values:
 * - `Fast` = Default behavior. Performance may be substantially better than the slow mode, but certain types of controls are not detected.  
 *    This is the default value.
 * - `Slow` = Can be much slower, but works with all controls which respond to the {@link https://learn.microsoft.com/windows/win32/winmsg/wm-gettext|WM_GETTEXT} message.
 * @type String 
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetTitleMatchMode.htm|SetTitleMatchMode()}
 * @example 
 */
A_TitleMatchModeSpeed: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TrayMenu|A_TrayMenu}  
 * Returns a {@link https://www.autohotkey.com/docs/v2/lib/Menu.htm|Menu object} to the script's system tray menu.  
 * This is the menu that pops up you right click the tray icon in the system tray.
 * @type Menu
 * @example 
 * ; Get the script's menu tray object.
 * tray := A_TrayMenu
 * ; Delete everything from the menu.
 * tray.Delete()
 * ; Add a simple customized menu.
 * tray.Add('Customized Tray Menu', (*) => '')
 * tray.Add()
 * ; Example of using an anonymous function as a callback.
 * ; The thing that runs when an event occurs.
 * tray.Add('Exit', (*) => ExitApp())
 * 
 * MsgBox('Right click the tray icon in system tray.'
 *     '`nThe only menu item should be "Exit".')
 */
A_TrayMenu: Menu

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#UserName|A_UserName}  
 * The username of the user that launched the script.  
 * This is not necessarily the same as the current logged in user.  
 * @type 
 * @example 
 */
A_UserName: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#WDay|A_WDay}  
 * The one digit number of the current day of the week: `1`-`7`  
 * Sunday is always day 1.  
 * @type String
 * @example
 *  
 * MsgBox('The current day is: ' A_DDDD
 *     '`nThis is week day number: ' A_WDay)
 */
A_WDay: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#WinDelay|A_WinDelay}  
 * Used to get or set the delay, in milliseconds, that occurs after {@link https://www.autohotkey.com/docs/v2/lib/Win.htm|Window functions} are used.  
 * This variable can be set to the following values:
 * - Positive value = The amount of time to wait, in ms.
 * - `0` = Use the smallest possible delay.
 * - `-1` = Use no delay.
 * @type Integer
 * @see {@link https://www.autohotkey.com/docs/v2/lib/SetWinDelay.htm|SetWinDelay()}
 * @example 
 * ; This will cause a 0.5 second delay between 
 * ; window activation and sending the keystrokes. 
 * A_WinDelay := 500
 * WinActivate('ahk_exe SomeProgram.exe')
 * Send('Hello, world!')
 */
A_WinDelay: Integer

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#WinDir|A_WinDir}  
 * This variable contains the path to the Windows main system folder.  
 * Typically, this contains: `C:\Windows`
 * @type String
 * @example 
 * MsgBox('Main Windows path is: ' A_WinDir)
 */
A_WinDir: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#WorkingDir|A_WorkingDir}  
 * Get or set the script's current working directory. This is the default folder that is checked when a file is referenced without a path.  
 * The final backslash is not included unless it is a root directory: `C:\` vs `C:\My Documents`  
 * {@link https://www.autohotkey.com/docs/v2/lib/SetWorkingDir.htm|SetWorkingDir()} can also be used to change the working directory.  
 * The default directory is always {@link https://www.autohotkey.com/docs/v2/Variables.htm#ScriptDir|A_ScriptDir} until it's set to something else.  
 * @type String
 * @example 
 * ; Showing the default working directory.
 * MsgBox(A_WorkingDir)
 * ; Making the desktop the new working directory.
 * A_WorkingDir := A_Desktop
 */
A_WorkingDir: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#YDay|A_YDay}  
 * Current day of the year: `1`-`366`  
 * This value is not zero-padded.  
 * To retrieve a zero-padded value, use the following: `FormatTime(, "YDay0")`
 * @type String
 * @example 
 * MsgBox('The current day of the year is: ' A_YDay)
 */
A_YDay: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#YYYY|A_Year}  
 * The current 4-digit year: `2024`  
 * This is identical to `A_YYYY`.
 * @type String
 * @example 
 * MsgBox("Today's date is:"
 *     '`n' A_DDDD ', ' A_MMMM ' ' A_DD ', ' A_Year)
 */
A_Year: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#YWeek|A_YWeek}  
 * Current year and week number without a seperator according to ISO 8601 (see {@link {@link https://www.iso.org/obp/ui/#iso:std:iso:8601:-1:ed-1:v1:en|RFC 3339}).  
 * This will always be a 6 digit number.  
 * To get the week only, use SubStr() to get the last two digits.  
 * To separate the year from the week, use Year := SubStr(A_YWeek, 1, 4) and Week := SubStr(A_YWeek, -2).  
 * Defining first week:  
 * If January 1st belongs to a week with at least 4 days, that's week one.  
 * If the week has fewer than 4 days, that week is considered the last week of the previous year and the next week starts the first week.  
 * In other words, January 1st must fall be between Sunday and Wednesday (inclusive) for that week to be considered the first week.  
 * @type String
 * @example 
 * MsgBox('A_YWeek = ' A_YWeek)
 * 
 * ; Use SubStr() to separate week from year.
 * ; The last 2 digits are always the week.
 * week := SubStr(A_YWeek, -2)
 * ; Normaly, you wouldn't waste time getting the year like this.
 * ; The variables A_Year and A_YYYY already contain this information.
 * year := SubStr(A_YWeek, 1, 4)
 * MsgBox("The current week number is: " week
 *     "`nAnd the current year is: " year)
 */
A_YWeek: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#YYYY|A_YYYY}  
 * The current 4-digit year: `2024`  
 * This is identical to `A_Year`.
 * @type String
 * @example 
 * MsgBox("Today's date is:"
 *     '`n' A_DDDD ', ' A_MMMM ' ' A_DD ', ' A_YYYY)
 */
A_YYYY: String

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TrueFalse|true}  
 * Contains the number 1.  
 * All things in AHK are true except for the values: `0` and `''` (an empty string)  
 * @type Integer
 * @example <caption>Truthy/falsy evaluation examples.</caption>
 * ; Create an associative array of values.
 * ; Then test each value to see if they evaluate as true.
 * values := Map(true, 'true variable'
 *         , 1       , 'The number 1'
 *         , false   , 'false variable'
 *         , 0       , 'The number 0'
 *         ,'String' , 'String with characters'
 *         , ''      , 'Empty string'
 *         , Object(), 'An object literal'
 *         , Array() , 'An array object'
 *         , Gui()   , 'A GUI object')
 * ; Loop through each item
 * for value, definition in values
 *     ; Check if each value is considered true or false
 *     if (value)
 *         MsgBox(definition ' is considered truthy.'
 *             '`n`nRemember, EVERYTHING in AHK is considered true except:'
 *             '`n- The number 0'
 *             '`n- An empty string')
 *     else MsgBox(definition ' is considered falsy.'
 *             '`n`nRemember, the only two things in AHK considered false are:'
 *             '`n- The number 0'
 *             '`n- An empty string')
 */
true: 1

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Variables.htm#TrueFalse|false}  
 * Contains the number 0.  
 * All things in AHK are true except for the values: `0` and `''` (an empty string)  
 * @type Integer
 * @example <caption>Truthy/falsy evaluation examples.</caption>
 * ; Create an associative array of values.
 * ; Then test each value to see if they evaluate as true.
 * values := Map(true, 'true variable'
 *         , 1       , 'The number 1'
 *         , false   , 'false variable'
 *         , 0       , 'The number 0'
 *         ,'String' , 'String with characters'
 *         , ''      , 'Empty string'
 *         , Object(), 'An object literal'
 *         , Array() , 'An array object'
 *         , Gui()   , 'A GUI object')
 * 
 * ; Loop through each item
 * for value, definition in values
 *     ; Check if each value is considered true or false
 *     if (value)
 *         MsgBox(definition ' is considered truthy.'
 *             '`n`nRemember, EVERYTHING in AHK is considered true except:'
 *             '`n- The number 0'
 *             '`n- An empty string')
 *     else MsgBox(definition ' is considered falsy.'
 *             '`n`nRemember, the only two things in AHK considered false are:'
 *             '`n- The number 0'
 *             '`n- An empty string')
 */
false: 0

/**
 * @description {@link https://www.autohotkey.com/docs/v2/Language.htm#unset|unset}  
 * Sets a variable or value to an unset state, freeing any data and making the variable unusable until a new value is set to it.  
 * unset is not a type of value. It's a state meaning the value or variable is uninitialized.  
 * Attempting to use something that's unset will throw an error.  
 * The {@link https://www.autohotkey.com/docs/v2/lib/IsSet.htm|IsSet()} function can be used to check if a value is unset.  
 * @type unset
 * @see {@link https://www.autohotkey.com/docs/v2/Variables.htm#maybe|? (Maybe operator)} | 
 * {@link https://www.autohotkey.com/docs/v2/Variables.htm#or-maybe|?? (Or-Maybe operator)} | 
 * {@link https://www.autohotkey.com/docs/v2/lib/IsSet.htm|IsSet()}
 * @example 
 * ; Example of assigning a variable an initial value of unset:
 * ; Create an unset variable
 * x := unset
 * 
 * ; Example of using an unset variable as an object value:
 * arr := [1, unset, 3]
 * 
 * ; Example of using an unset variable as a default parameter:
 * ; Optional 
 * some_func(mandatory_param, optional_param := unset) {
 *     ; Check if value is unset.
 *     if !IsSet(optional_param)
 *         ; If unset, give it a default value.
 *         optional_param := 'Default value'
 * }
 */
unset: unset
;@endregion
