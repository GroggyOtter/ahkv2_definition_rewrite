{
	"version": 1.1,
	"directives": [
		{
			"body": "#ClipboardTimeout ${0:milliseconds}",
			"description": "Set time between retrying the clipboard in milliseconds. 0 = try once, -1 = try indefinitely, omit = default search restored.",
			"prefix": "#ClipboardTimeout"
		},
		{
			"body": "#DllLoad ",
			"description": "Load the DLL or EXE file before the script starts executing or omit to to reset default search strategy."
		},
		{
			"body": "#ErrorStdOut ${1|'CP0','UTF-8','UTF-8-RAW','UTF-16','UTF-16-RAW','CP###'|}",
			"description": "Syntax errors that prevent a script from launching as sent to standard error stream (stderr).",
			"prefix": "#ErrorStdOut"
		},
		{
			"body": "#HotIf ",
			"description": "Create context-sensitive hotkeys and hotstrings that are enabled when the criteria is true. Use #HotIf to reset criteria."
		},
		{
			"body": "#HotIf WinActive(${3:'Title' }${1|'ahk_exe ,'ahk_class ,'ahk_id ,'ahk_pid ,'ahk_group |}${2:identifier}')",
			"description": "Create context-sensitive hotkeys and hotstrings that work when the specified window is active. Use #HotIf to reset criteria.",
			"prefix": "#HotIfWinActive"
		},
		{
			"body": "#HotIf WinExist(${3:'Title' }${1|'ahk_exe ,'ahk_class ,'ahk_id ,'ahk_pid ,'ahk_group |}${2:}')",
			"description": "Create context-sensitive hotkeys and hotstrings that work when the specified window exists. Use #HotIf to reset criteria.",
			"prefix": "#HotIfWinExist"
		},
		{
			"body": "#HotIfTimeout ${0:milliseconds}",
			"description": "Max time spent evaluating #HotIf criteria. Default is 1000.",
			"prefix": "#HotIfTimeout"
		},
		{
			"body": "#Hotstring EndChars ${0:-()[]{\\}':;\"/\\,.?!`n`s`t}",
			"description": "Change the default options for hotstrings or their ending char.",
			"prefix": "#Hotstring EndChars"
		},
		{
			"body": "#Hotstring NoMouse",
			"description": "Prevents mouse clicks from resetting the hotstring recognizer.",
			"prefix": "#Hotstring NoMouse"
		},
		{
			"body": "#Hotstring ${0:NewOptions}",
			"description": "Change the default options for hotstrings or their ending char.",
			"prefix": "#Hotstring"
		},
		{
			"body": "#Include ${0:File_Dir_Or_<LibName>}",
			"description": "File contents are inserted here when script runs, but not if already included earlier.",
			"prefix": "#Include"
		},
		{
			"body": "#IncludeAgain ${0:File_Or_Dir}",
			"description": "File contents are inserted here when script runs, even if inserted before.",
			"prefix": "#IncludeAgain"
		},
		{
			"body": "#InputLevel ${0:0_to_100}",
			"description": "Set Input Level of any subsequently created hotkeys/hotstrings. Omit for 0.",
			"prefix": "#InputLevel"
		},
		{
			"body": "#MaxThreads ${0:1_to_255}",
			"description": "Set max number of simultaneous threads that can run. Default is 10.",
			"prefix": "#MaxThreads"
		},
		{
			"body": "#MaxThreadsBuffer ${1|true,false|}",
			"description": "Set if hotkeys are buffered or ignored when max threads reached. Default and omit value is 1.",
			"prefix": "#MaxThreadsBuffer"
		},
		{
			"body": "#MaxThreadsPerHotkey ${0:Between_1_and_255}",
			"description": "Set the maximum number of threads that can exist simultaneously for each hotkey or hotstring.",
			"prefix": "#MaxThreadsPerHotkey"
		},
		{
			"body": "#NoTrayIcon",
			"description": "Removes the script's tray icon."
		},
		{
			"body": "#Requires AutoHotkey${1| , >, >=, <, <=, =|}v2${2|.0,.1|}${3|.11,.10,.9,.8,.7,.6,.5,.4,.3,.2,.1,.0|}${4|+,+ 32-bit,+ 64-bit|}",
			"description": "The required version of AutoHotkey for the script to run otherwise script s and quits.",
			"prefix": "#Requires"
		},
		{
			"body": "#SingleInstance ${1|Force,Ignore,Prompt,Off|}",
			"description": "Determine whether the script is allowed to run again when it is already running.",
			"prefix": "#SingleInstance"
		},
		{
			"body": "#SuspendExempt ${1|true,false|}",
			"description": "Sets if subsequent hotkeys and hotstrings are marked as exempt from Suspend().",
			"prefix": "#SuspendExempt"
		},
		{
			"body": "#UseHook ${1|true,false|}",
			"description": "Force the use of the hook with some/all hotkeys.",
			"prefix": "#UseHook"
		},
		{
			"body": "#Warn ${1|All,VarUnset,LocalSameAsGlobal,Unreachable|}, ${2|MsgBox,StdOut,OutputDebug,Off|}",
			"description": "Enable or disable warnings for certain critera. Can catch multiple types of s.",
			"prefix": "#Warn"
		},
		{
			"body": "#WinActivateForce",
			"description": "Use forceful activation by default instead of gentle activation first."
		},
		{
			"body": ";@Ahk2Exe-${1|IgnoreBegin,IgnoreEnd|}",
			"description": "You can delete code fragments from compiled scripts by wrapping them in instructions.",
			"prefix": "@Ahk2Exe-Ignore"
		},
		{
			"body": "/*@Ahk2Exe-Keep",
			"description": "Marked code snippets are only executed in the compiled script.",
			"prefix": "@Ahk2Exe-Keep"
		},
		{
			"body": ";@Ahk2Exe-AddResource ${2:FileName}${1| , RT_BITMAP, RT_MENU, RT_DIALOG, RT_STRING, RT_ACCELERATORS, RT_RCDATA, RT_MESSAGETABLE, RT_GROUP_CURSOR, RT_GROUP_ICON, RT_HTML, RT_MANIFEST|}",
			"description": "Add resources to the compiled executable file.",
			"prefix": "@Ahk2Exe-AddResource"
		},
		{
			"body": ";@Ahk2Exe-Base ${0:[Path\\]Name [, [Exe_path\\][Name], Codepage]}",
			"description": "Specify the binary version of AutoHotkey to be included in the generated .exe file.",
			"prefix": "@Ahk2Exe-Base"
		},
		{
			"body": ";@Ahk2Exe-ConsoleApp",
			"description": "Change the executable subsystem to console mode.",
			"prefix": "@Ahk2Exe-ConsoleApp"
		},
		{
			"body": ";@Ahk2Exe-Cont ${0:Text}",
			"description": "Specify a continuation line for the previous instruction. This allows a long line of instructions to be formatted for easy reading in the source code.",
			"prefix": "@Ahk2Exe-Cont"
		},
		{
			"body": ";@Ahk2Exe-Debug ${0:Text}",
			"description": "Display msgbox with supporting text for debugging.",
			"prefix": "@Ahk2Exe-Debug"
		},
		{
			"body": ";@Ahk2Exe-ExeName ${0:[Path\\]Name}",
			"description": "Specify the location and name of the generated .exe file.",
			"prefix": "@Ahk2Exe-ExeName"
		},
		{
			"body": ";@Ahk2Exe-Let ${0:Name = Value [, NameN = ValueN]}",
			"description": "Create (or modify) one or more user variables, these variables can be accessed through %U_Name%, similar to built-in variables (see above).",
			"prefix": "@Ahk2Exe-Let"
		},
		{
			"body": ";@Ahk2Exe-Obey ${1:Name}, ${2:CmdOrExp [, Extra]}",
			"description": "Execute a command or expression independent of AutoHotkey, and the result is U_Name.",
			"prefix": "@Ahk2Exe-Obey"
		},
		{
			"body": ";@Ahk2Exe-PostExec ${0:Program [parameters] [, When]}",
			"description": "Specify the program to be executed before (or after) any compression program applied to the .exe file after successful compilation.",
			"prefix": "@Ahk2Exe-PostExec"
		},
		{
			"body": ";@Ahk2Exe-SetMainIcon ${0:[IcoFile]}",
			"description": "Overwrite the custom EXE icon used for compilation.",
			"prefix": "@Ahk2Exe-SetMainIcon"
		},
		{
			"body": ";@Ahk2Exe-SetCompanyName ${0:CompanyName}",
			"description": "Changes the company name.",
			"prefix": ";@Ahk2Exe-SetCompanyName"
		},
		{
			"body": ";@Ahk2Exe-SetCopyright ${0:CopyrightInfo}",
			"description": "Changes the legal copyright information.",
			"prefix": ";@Ahk2Exe-SetCopyright"
		},
		{
			"body": ";@Ahk2Exe-SetDescription ${0:Description}",
			"description": "Changes the file description and changes script's name in Task Manager under \"Processes\".",
			"prefix": ";@Ahk2Exe-SetDescription"
		},
		{
			"body": ";@Ahk2Exe-SetFileVersion ${0:Version}",
			"description": "Changes the file version, in both text and raw binary format.",
			"prefix": ";@Ahk2Exe-SetFileVersion"
		},
		{
			"body": ";@Ahk2Exe-SetInternalName ${0:InternalName}",
			"description": "Changes the internal name.",
			"prefix": ";@Ahk2Exe-SetInternalName"
		},
		{
			"body": ";@Ahk2Exe-SetLanguage ${0:0x0409}",
			"description": "Changes the language code. Must include 0x prefix.",
			"prefix": ";@Ahk2Exe-SetLanguage"
		},
		{
			"body": ";@Ahk2Exe-SetLegalTrademarks ${0:Trademark}",
			"description": "Changes the legal trademarks information.",
			"prefix": ";@Ahk2Exe-SetLegalTrademarks"
		},
		{
			"body": ";@Ahk2Exe-SetName ${0:Name}",
			"description": "Changes the product name and the internal name.",
			"prefix": ";@Ahk2Exe-SetName"
		},
		{
			"body": ";@Ahk2Exe-SetOrigFilename ${0:OriginalFilename}",
			"description": "Changes the original filename information.",
			"prefix": ";@Ahk2Exe-SetOrigFilename"
		},
		{
			"body": ";@Ahk2Exe-SetProductName ${0:ProductName}",
			"description": "Changes the product name.",
			"prefix": ";@Ahk2Exe-SetProductName"
		},
		{
			"body": ";@Ahk2Exe-SetProductVersion ${0:Version}",
			"description": "Changes the product version, in both text and raw binary format.",
			"prefix": ";@Ahk2Exe-SetProductVersion"
		},
		{
			"body": ";@Ahk2Exe-SetVersion ${0:Version}",
			"description": "Changes the file version and the product version, in both text and raw binary format.",
			"prefix": ";@Ahk2Exe-SetVersion"
		},
		{
			"body": ";@Ahk2Exe-UpdateManifest ${1|0,1,2|}${2| ,[\\, Name\\, Version\\, UIAccess]|}",
			"description": "Changes details in the .exe's manifest. This directive is for specialised use only.",
			"prefix": ";@Ahk2Exe-UpdateManifest"
		},
		{
			"body": ";@Ahk2Exe-UseResourceLang ${0:0x0409}",
			"description": "Changes the resource language used by ;@Ahk2Exe-AddResource.",
			"prefix": ";@Ahk2Exe-UseResourceLang"
		}
	],
	"keywords": [
		{
			"body": "AND",
			"description": "Both items must evaluate true.\nSame as: &&\nif (x AND y)\nif (x && y)"
		},
		{
			"body": "AS",
			"description": ""
		},
		{
			"body": "IN",
			"description": "Used with for-loops to identify object.\nFor key, value IN obj"
		},
		{
			"body": "IS",
			"description": "Check if item is of a certain class type, such as number, string, object, or array.\nSame as using: if (Type() = \"TypeName\")\nif (var IS Number)\nif (my_arr is Array)\nif !(item IS object)"
		},
		{
			"body": "NOT",
			"description": "Item must not be true.\nSame as: !\nif NOT (false)\nif !false"
		},
		{
			"body": "OR",
			"description": "One item OR the other must bet true.\nSame as: ||\nif (var1 OR var2)\nif (var1 OR !var2)"
		},
		{
			"body": "break",
			"description": "Immediately ends any type of loop, including a For-Loop/While-Loop/Loop [Count/Read/Reg/Parse]."
		},
		{
			"body": "catch${1| , Error , MemoryError , OSError , TargetError , TimeoutError , TypeError , UnsetError , MemberError , PropertyError , MethodError , UnsetItemError , ValueError , IndexError , ZeroDivisionError |}${2| ,as OutputVar|}",
			"description": "Catch is used with Try and is the code that runs when if a try statement encounters an error.",
			"prefix": "catch"
		},
		{
			"body": "continue",
			"description": "Immediately ends the current loop iteration and starts the next.\nIf there are no more iterations, the loop ends."
		},
		{
			"body": "else If ",
			"description": "Adds another decision branch to check if prior checks were false.",
			"prefix": "elif"
		},
		{
			"body": "else",
			"description": "Defines the code block that should run when all prior evaluations have failed."
		},
		{
			"body": "finally",
			"description": "Used with try/catch statements to ensure some code is guaranteed to run after the try/catch has finished."
		},
		{
			"body": "for id, value IN ${0:Obj}",
			"description": "Iterate through each element of an Array, Map, Gui, or other enumerable object.\nMost objects can be looped through by referencing their .OwnProps() method.\nFor prop, value in obj.OwnProps()",
			"prefix": "for"
		},
		{
			"body": "global",
			"description": "Sets a variable or entire function to global scope, making the variable(s) available to all other functions, objects, and classes.\nGenerally, global variables are not needed."
		},
		{
			"body": "goto('${0:Label}')",
			"description": "Jump to the specified label and continue execution.\nGenerally, Goto programming should only be used when jumping around inside of a loop or with a Switch statement.",
			"prefix": "goto"
		},
		{
			"body": "if",
			"description": "Creates a decision branch. When the supplied expression evaluates as true, the following code block is executed.\nif (1 = 1)\nif (var1 = var2)"
		},
		{
			"body": "loop files ${2:FilePattern}, '${1|>File\\,Directory\\,Recurse,F,D,FD,FR,DR,FDR|}'",
			"description": "Loop through a directory's files and/or sub-folders.\n- FilePattern = A file path to check. Wildcards * can be used to match all.\n- MODES:\n  D = Get directories.\n  F = Get files.\n  R = Recurse into sub-folders.\n\nBuilt-in loop vars:\n- A_LoopFileName = File name and extension, no path.\n- A_LoopFileExt = File extension.\n- A_LoopFilePath = Path using aboslute or relative path.\n- A_LoopFileFullPath = Absolute path.\n- A_LoopFileShortPath = 8.3 path if supported.\n- A_LoopFileShortName = 8.3 file name if supported.\n- A_LoopFileDir = Directory of the current file or sub-directory.\n- A_LoopFileTimeModified = Last modification time of file.\n- A_LoopFileTimeCreated = Creation time of file.\n- A_LoopFileTimeAccessed = Last access time of file.\n- A_LoopFileAttrib = List of file's attributes.\n- A_LoopFileSize = Size of file in bytes.\n- A_LoopFileSizeKB = Size of file in kilobytes.\n- A_LoopFileSizeMB = Size of file in megabytes.",
			"prefix": "loop files"
		},
		{
			"body": "loop parse ${1:Text}, ${2:DelimitChar}, ${3:OmitChar}",
			"description": "Loop through a string by character or substrings.\n- Text = The text to parse through.\n- Delimiter = The character that's separating each desired substring. Omit delimeter to parse through each character.\n- `Omit` = Characters to ignore at the beginning and end of each substring.\n\n- Built-in loop vars:\n- A_Index = Tracks the current iteration Number.\n- A_LoopField = Contains the current substring or character.",
			"prefix": "loop parse"
		},
		{
			"body": "loop read ${1:FilePath}${2:, OutputFile|}",
			"description": "Parse through text one line at a time.\n- FilePath = Path to the text file to read.\n- OutputFile = File to keep open for the duration of the loop. Use FileAppend() with a filename to automatically append text to the OutputFile.\n\n- Built-in loop vars:\n- A_Index = Tracks the current iteration Number.\n- A_LoopReadLine = The text of the current line.",
			"prefix": "loop read"
		},
		{
			"body": "loop reg '${2|HKEY_LOCAL_MACHINE,HKEY_USERS,HKEY_CURRENT_USER,HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG|}\\\\$3', '${1|>Choose Key\\,Value\\,Recurse,K,V,KV,KR,VR,KVR|}'",
			"description": "Retrieve the contents of the specified registry subkey.\n- Modes:\n  V = Get value.\n  K = Get key.\n  R = Recurse into sub keys.\n\n- Built-in loop vars:\n- A_Index = Tracks the current iteration Number.\n- A_LoopRegName = Name of the current value or subkey.\n- A_LoopRegType = The data type of the current item. KEY, REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, REG_QWORD, REG_BINARY, REG_LINK, REG_RESOURCE_LIST, REG_FULL_RESOURCE_DESCRIPTOR, REG_RESOURCE_REQUIREMENTS_LIST, REG_DWORD_BIG_ENDIAN\n- A_LoopRegKey = Full key name of the current item.\n- A_LoopRegTimeModified = The time, in YYYYMMDDHH24MISS format, of the last modification made to the current registry key.",
			"prefix": "loop reg"
		},
		{
			"body": "loop ${0:Count}",
			"description": "Used to repeatedly execute a block of code.\nCount is the number of times the loop should run. If omitted, the loop will continue to run.\nTo stop a loop, use Break or set an Until condition.",
			"prefix": "loop"
		},
		{
			"body": "local ",
			"description": "Sets a variable or a function's scope to local only. A local variable can only be seen inside the function/class they belong to."
		},
		{
			"body": "case $1: ",
			"description": "Used with Switch statements, these define each 'check' to be made.\nChecks are done against the Switch's value or, if no value is provided, each case is evaluated individually.\nOnce the first match is made, no further cases are evaluated and the code does not 'fall through' to the other cases.",
			"prefix": "case"
		},
		{
			"body": "default: ",
			"description": "Used with Swtich statements. This case must be defined after all other cases and contains any code that should run if no other cases make a match.\nThe Default: case is optional and does not need to be included.",
			"prefix": "default:"
		},
		{
			"body": "return",
			"description": "Return the flow of code to the original caller. If there is no caller to return to, Return acts as an Exit() command, ending the current code thread.\nTo return multiple values, put them in a map, array, or other object.\nAlternatively, use &VarRef parameters to get multiple pieces of data back from a function."
		},
		{
			"body": "static ${1:name}${2|(), := , += , -= , *= , /= |}",
			"description": "A static variable or function persists through the life of the script and does not get erased at the end of a function call.",
			"prefix": "static"
		},
		{
			"body": "throw(${1|Error,MemoryError,OSError,TargetError,TimeoutError,TypeError,UnsetError,MemberError,PropertyError,MethodError,UnsetItemError,ValueError,IndexError,ZeroDivisionError|}('${2:Message}', ${3:A_ThisFunc}, ${4:ExtraInfo}))",
			"description": "Indicates that an error has occurred. The signal can be caught by a try-catch statement.",
			"prefix": "throw"
		},
		{
			"body": "try ",
			"description": "Try attempts to execute a block of code while suppressing any errors that may be thrown.\nIf an error happens, the associated Catch statement's code block is ran.\nCatch statements are optional."
		},
		{
			"body": "until ($1)",
			"description": "A condition that is checked at the end of every loop iteration.\nIf it evaluates as true, the loop ends as though Break() was used.\nUntil can be used with normal loops and their variants [count/read/parse/reg] as well as for-loops, but does not work with while-loops.",
			"prefix": "until"
		},
		{
			"body": "while ($1)",
			"description": "Defines a loop that continues running as long as the provided evaulate remains true.\n\n- Built-in loop vars:\n- A_Index = Tracks the current iteration Number.",
			"prefix": "while"
		}
	],
	"options": {
		"ahk_criteria": [
			{
				"body": "ahk_class",
				"description": "Identify one or more windows by their class name. See [WinTitle](https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_)"
			},
			{
				"body": "ahk_exe",
				"description": "Identify one or more windows by their executable/process name. See [WinTitle](https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_)"
			},
			{
				"body": "ahk_group",
				"description": "Identify one or more windows that have been added to an AHK window group. See [WinTitle](https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_) | [Window Groups](https://www.autohotkey.com/docs/v2/lib/GroupAdd.htm)"
			},
			{
				"body": "ahk_id",
				"description": "Identify one or more windows by their window handle, a unique number assigned by the operating system at window creation. See [WinTitle](https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_)"
			},
			{
				"body": "ahk_pid",
				"description": "Identify one or more windows by the parent process ID, a unique number assigned by the operating system at the launch of an exe. See [WinTitle](https://www.autohotkey.com/docs/v2/misc/WinTitle.htm#ahk_)"
			}
		],
		"hotstring": [
			{
				"body": "*",
				"description": "An ending character (e.g. `Space`, `.`, or `Enter`) is not required to trigger the hotstring. For example:\n```ahk2\n:*:j@::jsmith@somedomain.com\n```"
			},
			{
				"body": "?",
				"description": "The hotstring will be triggered even when it is inside another word; that is, when the character typed immediately before it is alphanumeric. For example, if `:?:al::airline` is a hotstring, typing \"practical \" would produce \"practicairline \". Use `?0` to turn this option back off."
			},
			{
				"body": "B0",
				"description": "Automatic backspacing is not done to erase the abbreviation you type. Use a plain `B` to turn backspacing back on after it was previously turned off. A script may also do its own backspacing via {bs 5}, which sends `Backspace` five times. Similarly, it may send `←` five times via {left 5}. For example, the following hotstring produces \"<em></em>\" and moves the caret 5 places to the left (so that it's between the tags):\n```ahk2\n:*b0:<em>::</em>{left 5}\n```"
			},
			{
				"body": "C",
				"description": "Case-sensitive: When you type an abbreviation, it must exactly match the case defined in the script. Use `C0` to turn case sensitivity back off."
			},
			{
				"body": "C1",
				"description": "Do not conform to typed case. Use this option to make auto-replace hotstrings case-insensitive and prevent them from conforming to the case of the characters you actually type. Case-conforming hotstrings (which are the default) produce their replacement text in all caps if you type the abbreviation in all caps. If you type the first letter in caps, the first letter of the replacement will also be capitalized (if it is a letter). If you type the case in any other way, the replacement is sent exactly as defined."
			},
			{
				"body": "K#",
				"description": "Key-delay: This rarely-used option sets the delay between keystrokes produced by auto-backspacing or auto-replacement. Specify the new delay for n; for example, specify `k10` to have a 10 ms delay and `k-1` to have no delay."
			},
			{
				"body": "O",
				"description": "Omit the ending character of auto-replace hotstrings when the replacement is produced. This is useful when you want a hotstring to be kept unambiguous by still requiring an ending character, but don't actually want the ending character to be shown on the screen. Use `O0` to turn this option back off."
			},
			{
				"body": "P#",
				"description": "The priority of the hotstring (e.g. `P1`). This rarely-used option has no effect on auto-replace hotstrings."
			},
			{
				"body": "R",
				"description": "Send the replacement text raw; that is, without translating `{Enter}` to `Enter`, `^c` to `Ctrl+C`, etc. Use `R0` to turn this option back off, or override it with `T`."
			},
			{
				"body": "S",
				"description": "Specify the letter `S` to make the hotstring exempt from Suspend. Specify `S0` to remove the exemption, allowing the hotstring to be suspended."
			},
			{
				"body": "SI",
				"description": "SendInput"
			},
			{
				"body": "SP",
				"description": "SendPlay"
			},
			{
				"body": "SE",
				"description": "SendEvent"
			},
			{
				"body": "T",
				"description": "Send the replacement text using Text mode. Use `T0` or `R0` to turn this option back off, or override it with R."
			},
			{
				"body": "X",
				"description": "Instead of replacement text, the hotstring accepts a function call or expression to execute."
			},
			{
				"body": "Z",
				"description": "This rarely-used option resets the hotstring recognizer after each triggering of the hotstring. In other words, the script will begin waiting for an entirely new hotstring, eliminating from consideration anything you previously typed. This can prevent unwanted triggerings of hotstrings."
			}
		]
	},
	"texts": [
		{
			"body": "AlwaysOnTop",
			"description": "Keep the window above all other windows."
		},
		{
			"body": "AutoSize",
			"description": "Resize the window to only accommodate its currently visible controls. This is useful for adjusting the window size after adding new controls or adjusting the size of existing controls, hiding or unhiding them."
		},
		{
			"body": "Border",
			"description": "Provide a thin border around the control. Most controls do not need this because they already have a type-specific border. When adding a border to an existing control, you may need to increase the width and height of the control by 1 Pixels."
		},
		{
			"body": "Caption",
			"description": "Provide title bar and thick window border/edge."
		},
		{
			"body": "Center",
			"description": "Center the text of the control within its available width."
		},
		{
			"body": "DropFiles",
			"description": "Start when a file/folder is dragged and dropped onto the window as part of a drag-and-drop operation (but if this callback is already running, the drag-and-drop event will be ignored)."
		}
	],
	"keys": [
		{
			"body": "Alt"
		},
		{
			"body": "AltTab",
			"description": "If the alt-tab menu is visible, then move forward in the menu. Otherwise, display the menu (only when the hotkey is two keys connected by'&'; otherwise, it does nothing)."
		},
		{
			"body": "AltTabAndMenu",
			"description": "If the alt-tab menu is visible, move forward. Otherwise, display the menu."
		},
		{
			"body": "AltTabMenu",
			"description": "Show or hide the alt-tab menu."
		},
		{
			"body": "AltTabMenuDismiss",
			"description": "Close the Alt-tab menu."
		},
		{
			"body": "AppsKey",
			"description": "Activates the right-click context menu."
		},
		{
			"body": "BackSpace"
		},
		{
			"body": "BS",
			"description": "Short version of Backspace."
		},
		{
			"body": "Browser_Back",
			"description": "Back"
		},
		{
			"body": "Browser_Favorites",
			"description": "Favorites"
		},
		{
			"body": "Browser_Forward",
			"description": "Forward"
		},
		{
			"body": "Browser_Home",
			"description": "Homepage"
		},
		{
			"body": "Browser_Refresh",
			"description": "Refresh"
		},
		{
			"body": "Browser_Search",
			"description": "Search"
		},
		{
			"body": "Browser_Stop",
			"description": "Stop"
		},
		{
			"body": "CapsLock"
		},
		{
			"body": "Control"
		},
		{
			"body": "Ctrl"
		},
		{
			"body": "CtrlBreak",
			"description": "Ctrl+Pause or Ctrl+ScrollLock"
		},
		{
			"body": "Del",
			"description": "Short version of Delete."
		},
		{
			"body": "Delete"
		},
		{
			"body": "Down"
		},
		{
			"body": "End"
		},
		{
			"body": "Enter"
		},
		{
			"body": "Esc",
			"description": "Short version of Escape."
		},
		{
			"body": "Escape"
		},
		{
			"body": "F1"
		},
		{
			"body": "F10"
		},
		{
			"body": "F11"
		},
		{
			"body": "F12"
		},
		{
			"body": "F13"
		},
		{
			"body": "F14"
		},
		{
			"body": "F15"
		},
		{
			"body": "F16"
		},
		{
			"body": "F17"
		},
		{
			"body": "F18"
		},
		{
			"body": "F19"
		},
		{
			"body": "F2"
		},
		{
			"body": "F20"
		},
		{
			"body": "F21"
		},
		{
			"body": "F22"
		},
		{
			"body": "F23"
		},
		{
			"body": "F24"
		},
		{
			"body": "F3"
		},
		{
			"body": "F4"
		},
		{
			"body": "F5"
		},
		{
			"body": "F6"
		},
		{
			"body": "F7"
		},
		{
			"body": "F8"
		},
		{
			"body": "F9"
		},
		{
			"body": "Home"
		},
		{
			"body": "Ins",
			"description": "Short version of Insert."
		},
		{
			"body": "Insert"
		},
		{
			"body": "Joy1"
		},
		{
			"body": "Joy10"
		},
		{
			"body": "Joy11"
		},
		{
			"body": "Joy12"
		},
		{
			"body": "Joy13"
		},
		{
			"body": "Joy14"
		},
		{
			"body": "Joy15"
		},
		{
			"body": "Joy16"
		},
		{
			"body": "Joy17"
		},
		{
			"body": "Joy18"
		},
		{
			"body": "Joy19"
		},
		{
			"body": "Joy2"
		},
		{
			"body": "Joy20"
		},
		{
			"body": "Joy21"
		},
		{
			"body": "Joy22"
		},
		{
			"body": "Joy23"
		},
		{
			"body": "Joy24"
		},
		{
			"body": "Joy25"
		},
		{
			"body": "Joy26"
		},
		{
			"body": "Joy27"
		},
		{
			"body": "Joy28"
		},
		{
			"body": "Joy29"
		},
		{
			"body": "Joy3"
		},
		{
			"body": "Joy30"
		},
		{
			"body": "Joy31"
		},
		{
			"body": "Joy32"
		},
		{
			"body": "Joy4"
		},
		{
			"body": "Joy5"
		},
		{
			"body": "Joy6"
		},
		{
			"body": "Joy7"
		},
		{
			"body": "Joy8"
		},
		{
			"body": "Joy9"
		},
		{
			"body": "JoyAxes"
		},
		{
			"body": "JoyButtons"
		},
		{
			"body": "JoyInfo"
		},
		{
			"body": "JoyName"
		},
		{
			"body": "JoyPOV"
		},
		{
			"body": "JoyR"
		},
		{
			"body": "JoyU"
		},
		{
			"body": "JoyV"
		},
		{
			"body": "JoyX"
		},
		{
			"body": "JoyY"
		},
		{
			"body": "JoyZ"
		},
		{
			"body": "LAlt"
		},
		{
			"body": "Launch_App1"
		},
		{
			"body": "Launch_App2"
		},
		{
			"body": "Launch_Mail"
		},
		{
			"body": "Launch_Media"
		},
		{
			"body": "LButton"
		},
		{
			"body": "LControl"
		},
		{
			"body": "LCtrl"
		},
		{
			"body": "Left"
		},
		{
			"body": "LShift"
		},
		{
			"body": "LWin"
		},
		{
			"body": "MButton"
		},
		{
			"body": "Media_Next"
		},
		{
			"body": "Media_Play_Pause"
		},
		{
			"body": "Media_Prev"
		},
		{
			"body": "Media_Stop"
		},
		{
			"body": "NumLock"
		},
		{
			"body": "Numpad0"
		},
		{
			"body": "Numpad1"
		},
		{
			"body": "Numpad2"
		},
		{
			"body": "Numpad3"
		},
		{
			"body": "Numpad4"
		},
		{
			"body": "Numpad5"
		},
		{
			"body": "Numpad6"
		},
		{
			"body": "Numpad7"
		},
		{
			"body": "Numpad8"
		},
		{
			"body": "Numpad9"
		},
		{
			"body": "NumpadAdd"
		},
		{
			"body": "NumpadClear"
		},
		{
			"body": "NumpadDel"
		},
		{
			"body": "NumpadDiv"
		},
		{
			"body": "NumpadDot"
		},
		{
			"body": "NumpadDown"
		},
		{
			"body": "NumpadEnd"
		},
		{
			"body": "NumpadEnter"
		},
		{
			"body": "NumpadHome"
		},
		{
			"body": "NumpadIns"
		},
		{
			"body": "NumpadLeft"
		},
		{
			"body": "NumpadMult"
		},
		{
			"body": "NumpadPgdn"
		},
		{
			"body": "NumpadPgup"
		},
		{
			"body": "NumpadRight"
		},
		{
			"body": "NumpadSub"
		},
		{
			"body": "NumpadUp"
		},
		{
			"body": "PgDn"
		},
		{
			"body": "PgUp"
		},
		{
			"body": "PrintScreen"
		},
		{
			"body": "RAlt"
		},
		{
			"body": "RButton"
		},
		{
			"body": "RControl"
		},
		{
			"body": "RCtrl"
		},
		{
			"body": "Right"
		},
		{
			"body": "RShift"
		},
		{
			"body": "RWin"
		},
		{
			"body": "ScrollLock"
		},
		{
			"body": "Shift"
		},
		{
			"body": "ShiftAltTab"
		},
		{
			"body": "Space"
		},
		{
			"body": "Tab"
		},
		{
			"body": "Up"
		},
		{
			"body": "Volume_Down"
		},
		{
			"body": "Volume_Mute"
		},
		{
			"body": "Volume_Up"
		},
		{
			"body": "WheelDown"
		},
		{
			"body": "WheelLeft"
		},
		{
			"body": "WheelRight"
		},
		{
			"body": "WheelUp"
		},
		{
			"body": "XButton1"
		},
		{
			"body": "XButton2"
		}
	]
}
